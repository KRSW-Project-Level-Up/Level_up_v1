{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar operators_1 = require(\"rxjs/operators\");\n\nvar result_rx_1 = __importDefault(require(\"./result-rx\")); // eslint-disable-next-line no-unused-vars\n\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\n\nvar transaction_managed_rx_1 = __importDefault(require(\"./transaction-managed-rx\"));\n\nvar retry_logic_rx_1 = __importDefault(require(\"./internal/retry-logic-rx\"));\n\nvar _a = neo4j_driver_core_1.internal.constants,\n    ACCESS_MODE_READ = _a.ACCESS_MODE_READ,\n    ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE,\n    TELEMETRY_APIS = _a.TELEMETRY_APIS,\n    TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\n/**\n * A Reactive session, which provides the same functionality as {@link Session} but through a Reactive API.\n */\n\nvar RxSession =\n/** @class */\nfunction () {\n  /**\n   * Constructs a reactive session with given default session instance and provided driver configuration.\n   *\n   * @protected\n   * @param {Object} param - Object parameter\n   * @param {Session} param.session - The underlying session instance to relay requests\n   */\n  function RxSession(_a) {\n    var _b = _a === void 0 ? {} : _a,\n        session = _b.session,\n        config = _b.config,\n        log = _b.log;\n\n    this._session = session;\n    this._retryLogic = _createRetryLogic(config);\n    this._log = log;\n  }\n  /**\n   * Creates a reactive result that will execute the  query with the provided parameters and the provided\n   * transaction configuration that applies to the underlying auto-commit transaction.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @param {TransactionConfig} transactionConfig - Configuration for the new auto-commit transaction.\n   * @returns {RxResult} - A reactive result\n   */\n\n\n  RxSession.prototype.run = function (query, parameters, transactionConfig) {\n    var _this = this;\n\n    return new result_rx_1.default(new rxjs_1.Observable(function (observer) {\n      try {\n        observer.next(_this._session.run(query, parameters, transactionConfig));\n        observer.complete();\n      } catch (err) {\n        observer.error(err);\n      }\n\n      return function () {};\n    }));\n  };\n  /**\n   * Starts a new explicit transaction with the provided transaction configuration.\n   *\n   * @public\n   * @param {TransactionConfig} transactionConfig - Configuration for the new transaction.\n   * @returns {Observable<RxTransaction>} - A reactive stream that will generate at most **one** RxTransaction instance.\n   */\n\n\n  RxSession.prototype.beginTransaction = function (transactionConfig) {\n    return this._beginTransaction(this._session._mode, transactionConfig, {\n      api: TELEMETRY_APIS.UNMANAGED_TRANSACTION\n    });\n  };\n  /**\n   * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeRead} instead.\n   * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n\n\n  RxSession.prototype.readTransaction = function (work, transactionConfig) {\n    return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);\n  };\n  /**\n   * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeWrite} instead.\n   * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n\n\n  RxSession.prototype.writeTransaction = function (work, transactionConfig) {\n    return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n  };\n  /**\n   * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n\n\n  RxSession.prototype.executeRead = function (work, transactionConfig) {\n    return this._executeInTransaction(ACCESS_MODE_READ, work, transactionConfig);\n  };\n  /**\n   * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n   * transaction configuration.\n   * @public\n   * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n   * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n   * @returns {Observable} - A reactive stream returned by the unit of work.\n   */\n\n\n  RxSession.prototype.executeWrite = function (work, transactionConfig) {\n    return this._executeInTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n  };\n  /**\n   * @private\n   * @param {function(txc: RxManagedTransaction): Observable} work\n   * @param {TransactionConfig} transactionConfig\n   * @returns {Observable}\n   */\n\n\n  RxSession.prototype._executeInTransaction = function (accessMode, work, transactionConfig) {\n    var wrapper = function (txc) {\n      return new transaction_managed_rx_1.default({\n        run: txc.run.bind(txc)\n      });\n    };\n\n    return this._runTransaction(accessMode, work, transactionConfig, wrapper);\n  };\n  /**\n   * Closes this reactive session.\n   *\n   * @public\n   * @returns {Observable} - An empty reactive stream\n   */\n\n\n  RxSession.prototype.close = function () {\n    var _this = this;\n\n    return new rxjs_1.Observable(function (observer) {\n      _this._session.close().then(function () {\n        observer.complete();\n      }).catch(function (err) {\n        return observer.error(err);\n      });\n    });\n  };\n\n  RxSession.prototype[Symbol.asyncDispose] = function () {\n    return this.close();\n  };\n  /**\n   * Returns the bookmarks received following the last successfully completed query, which is executed\n   * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n   * the {@link RxSession#run} method of this session instance.\n   *\n   * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n   * changed.\n   *\n   * @deprecated This method will be removed in 6.0 version. Please, use {@link RxSession#lastBookmarks} instead.\n   *\n   * @public\n   * @returns {string[]}\n   */\n\n\n  RxSession.prototype.lastBookmark = function () {\n    return this.lastBookmarks();\n  };\n  /**\n   * Returns the bookmarks received following the last successfully completed query, which is executed\n   * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n   * the {@link RxSession#run} method of this session instance.\n   *\n   * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n   * changed.\n   *\n   * @public\n   * @returns {string[]}\n   */\n\n\n  RxSession.prototype.lastBookmarks = function () {\n    return this._session.lastBookmarks();\n  };\n  /**\n   * @private\n   */\n\n\n  RxSession.prototype._beginTransaction = function (accessMode, transactionConfig, apiTelemetryConfig) {\n    var _this = this;\n\n    var txConfig = TxConfig.empty();\n\n    if (transactionConfig) {\n      txConfig = new TxConfig(transactionConfig, this._log);\n    }\n\n    return new rxjs_1.Observable(function (observer) {\n      try {\n        _this._session._beginTransaction(accessMode, txConfig, apiTelemetryConfig).then(function (tx) {\n          observer.next(new transaction_rx_1.default(tx));\n          observer.complete();\n        }).catch(function (err) {\n          return observer.error(err);\n        });\n      } catch (err) {\n        observer.error(err);\n      }\n\n      return function () {};\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  RxSession.prototype._runTransaction = function (accessMode, work, transactionConfig, transactionWrapper) {\n    var _this = this;\n\n    if (transactionWrapper === void 0) {\n      transactionWrapper = function (tx) {\n        return tx;\n      };\n    }\n\n    var txConfig = TxConfig.empty();\n\n    if (transactionConfig) {\n      txConfig = new TxConfig(transactionConfig);\n    }\n\n    var context = {\n      apiTelemetryConfig: {\n        api: TELEMETRY_APIS.MANAGED_TRANSACTION,\n        onTelemetrySuccess: function () {\n          context.apiTelemetryConfig = undefined;\n        }\n      }\n    };\n    return this._retryLogic.retry((0, rxjs_1.of)(1).pipe((0, operators_1.mergeMap)(function () {\n      return _this._beginTransaction(accessMode, txConfig, context.apiTelemetryConfig);\n    }), (0, operators_1.mergeMap)(function (txc) {\n      return (0, rxjs_1.defer)(function () {\n        try {\n          return work(transactionWrapper(txc));\n        } catch (err) {\n          return (0, rxjs_1.throwError)(function () {\n            return err;\n          });\n        }\n      }).pipe((0, operators_1.catchError)(function (err) {\n        return txc.rollback().pipe((0, operators_1.concatWith)((0, rxjs_1.throwError)(function () {\n          return err;\n        })));\n      }), (0, operators_1.concatWith)(txc.commit()));\n    })));\n  };\n\n  return RxSession;\n}();\n\nexports.default = RxSession;\n\nfunction _createRetryLogic(config) {\n  var maxRetryTimeout = config && config.maxTransactionRetryTime ? config.maxTransactionRetryTime : null;\n  return new retry_logic_rx_1.default({\n    maxRetryTimeout: maxRetryTimeout\n  });\n}","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","rxjs_1","require","operators_1","result_rx_1","neo4j_driver_core_1","transaction_rx_1","transaction_managed_rx_1","retry_logic_rx_1","_a","internal","constants","ACCESS_MODE_READ","ACCESS_MODE_WRITE","TELEMETRY_APIS","TxConfig","txConfig","RxSession","_b","session","config","log","_session","_retryLogic","_createRetryLogic","_log","prototype","run","query","parameters","transactionConfig","_this","default","Observable","observer","next","complete","err","error","beginTransaction","_beginTransaction","_mode","api","UNMANAGED_TRANSACTION","readTransaction","work","_runTransaction","writeTransaction","executeRead","_executeInTransaction","executeWrite","accessMode","wrapper","txc","bind","close","then","catch","Symbol","asyncDispose","lastBookmark","lastBookmarks","apiTelemetryConfig","empty","tx","transactionWrapper","context","MANAGED_TRANSACTION","onTelemetrySuccess","undefined","retry","of","pipe","mergeMap","defer","throwError","catchError","rollback","concatWith","commit","maxRetryTimeout","maxTransactionRetryTime"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver/lib/session-rx.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar rxjs_1 = require(\"rxjs\");\nvar operators_1 = require(\"rxjs/operators\");\nvar result_rx_1 = __importDefault(require(\"./result-rx\"));\n// eslint-disable-next-line no-unused-vars\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\nvar transaction_managed_rx_1 = __importDefault(require(\"./transaction-managed-rx\"));\nvar retry_logic_rx_1 = __importDefault(require(\"./internal/retry-logic-rx\"));\nvar _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_READ = _a.ACCESS_MODE_READ, ACCESS_MODE_WRITE = _a.ACCESS_MODE_WRITE, TELEMETRY_APIS = _a.TELEMETRY_APIS, TxConfig = neo4j_driver_core_1.internal.txConfig.TxConfig;\n/**\n * A Reactive session, which provides the same functionality as {@link Session} but through a Reactive API.\n */\nvar RxSession = /** @class */ (function () {\n    /**\n     * Constructs a reactive session with given default session instance and provided driver configuration.\n     *\n     * @protected\n     * @param {Object} param - Object parameter\n     * @param {Session} param.session - The underlying session instance to relay requests\n     */\n    function RxSession(_a) {\n        var _b = _a === void 0 ? {} : _a, session = _b.session, config = _b.config, log = _b.log;\n        this._session = session;\n        this._retryLogic = _createRetryLogic(config);\n        this._log = log;\n    }\n    /**\n     * Creates a reactive result that will execute the  query with the provided parameters and the provided\n     * transaction configuration that applies to the underlying auto-commit transaction.\n     *\n     * @public\n     * @param {string} query - Query to be executed.\n     * @param {Object} parameters - Parameter values to use in query execution.\n     * @param {TransactionConfig} transactionConfig - Configuration for the new auto-commit transaction.\n     * @returns {RxResult} - A reactive result\n     */\n    RxSession.prototype.run = function (query, parameters, transactionConfig) {\n        var _this = this;\n        return new result_rx_1.default(new rxjs_1.Observable(function (observer) {\n            try {\n                observer.next(_this._session.run(query, parameters, transactionConfig));\n                observer.complete();\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            return function () { };\n        }));\n    };\n    /**\n     * Starts a new explicit transaction with the provided transaction configuration.\n     *\n     * @public\n     * @param {TransactionConfig} transactionConfig - Configuration for the new transaction.\n     * @returns {Observable<RxTransaction>} - A reactive stream that will generate at most **one** RxTransaction instance.\n     */\n    RxSession.prototype.beginTransaction = function (transactionConfig) {\n        return this._beginTransaction(this._session._mode, transactionConfig, { api: TELEMETRY_APIS.UNMANAGED_TRANSACTION });\n    };\n    /**\n     * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeRead} instead.\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.readTransaction = function (work, transactionConfig) {\n        return this._runTransaction(ACCESS_MODE_READ, work, transactionConfig);\n    };\n    /**\n     * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @deprecated This method will be removed in version 6.0. Please, use {@link RxSession#executeWrite} instead.\n     * @param {function(txc: RxTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.writeTransaction = function (work, transactionConfig) {\n        return this._runTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n    };\n    /**\n     * Executes the provided unit of work in a {@link READ} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.executeRead = function (work, transactionConfig) {\n        return this._executeInTransaction(ACCESS_MODE_READ, work, transactionConfig);\n    };\n    /**\n     * Executes the provided unit of work in a {@link WRITE} reactive transaction which is created with the provided\n     * transaction configuration.\n     * @public\n     * @param {function(txc: RxManagedTransaction): Observable} work - A unit of work to be executed.\n     * @param {TransactionConfig} transactionConfig - Configuration for the enclosing transaction created by the driver.\n     * @returns {Observable} - A reactive stream returned by the unit of work.\n     */\n    RxSession.prototype.executeWrite = function (work, transactionConfig) {\n        return this._executeInTransaction(ACCESS_MODE_WRITE, work, transactionConfig);\n    };\n    /**\n     * @private\n     * @param {function(txc: RxManagedTransaction): Observable} work\n     * @param {TransactionConfig} transactionConfig\n     * @returns {Observable}\n     */\n    RxSession.prototype._executeInTransaction = function (accessMode, work, transactionConfig) {\n        var wrapper = function (txc) { return new transaction_managed_rx_1.default({\n            run: txc.run.bind(txc)\n        }); };\n        return this._runTransaction(accessMode, work, transactionConfig, wrapper);\n    };\n    /**\n     * Closes this reactive session.\n     *\n     * @public\n     * @returns {Observable} - An empty reactive stream\n     */\n    RxSession.prototype.close = function () {\n        var _this = this;\n        return new rxjs_1.Observable(function (observer) {\n            _this._session\n                .close()\n                .then(function () {\n                observer.complete();\n            })\n                .catch(function (err) { return observer.error(err); });\n        });\n    };\n    RxSession.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    /**\n     * Returns the bookmarks received following the last successfully completed query, which is executed\n     * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n     * the {@link RxSession#run} method of this session instance.\n     *\n     * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n     * changed.\n     *\n     * @deprecated This method will be removed in 6.0 version. Please, use {@link RxSession#lastBookmarks} instead.\n     *\n     * @public\n     * @returns {string[]}\n     */\n    RxSession.prototype.lastBookmark = function () {\n        return this.lastBookmarks();\n    };\n    /**\n     * Returns the bookmarks received following the last successfully completed query, which is executed\n     * either in an {@link RxTransaction} obtained from this session instance or directly through one of\n     * the {@link RxSession#run} method of this session instance.\n     *\n     * If no bookmarks were received or if this transaction was rolled back, the bookmarks value will not be\n     * changed.\n     *\n     * @public\n     * @returns {string[]}\n     */\n    RxSession.prototype.lastBookmarks = function () {\n        return this._session.lastBookmarks();\n    };\n    /**\n     * @private\n     */\n    RxSession.prototype._beginTransaction = function (accessMode, transactionConfig, apiTelemetryConfig) {\n        var _this = this;\n        var txConfig = TxConfig.empty();\n        if (transactionConfig) {\n            txConfig = new TxConfig(transactionConfig, this._log);\n        }\n        return new rxjs_1.Observable(function (observer) {\n            try {\n                _this._session._beginTransaction(accessMode, txConfig, apiTelemetryConfig)\n                    .then(function (tx) {\n                    observer.next(new transaction_rx_1.default(tx));\n                    observer.complete();\n                })\n                    .catch(function (err) { return observer.error(err); });\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            return function () { };\n        });\n    };\n    /**\n     * @private\n     */\n    RxSession.prototype._runTransaction = function (accessMode, work, transactionConfig, transactionWrapper) {\n        var _this = this;\n        if (transactionWrapper === void 0) { transactionWrapper = function (tx) { return tx; }; }\n        var txConfig = TxConfig.empty();\n        if (transactionConfig) {\n            txConfig = new TxConfig(transactionConfig);\n        }\n        var context = {\n            apiTelemetryConfig: {\n                api: TELEMETRY_APIS.MANAGED_TRANSACTION,\n                onTelemetrySuccess: function () {\n                    context.apiTelemetryConfig = undefined;\n                }\n            }\n        };\n        return this._retryLogic.retry((0, rxjs_1.of)(1).pipe((0, operators_1.mergeMap)(function () { return _this._beginTransaction(accessMode, txConfig, context.apiTelemetryConfig); }), (0, operators_1.mergeMap)(function (txc) {\n            return (0, rxjs_1.defer)(function () {\n                try {\n                    return work(transactionWrapper(txc));\n                }\n                catch (err) {\n                    return (0, rxjs_1.throwError)(function () { return err; });\n                }\n            }).pipe((0, operators_1.catchError)(function (err) { return txc.rollback().pipe((0, operators_1.concatWith)((0, rxjs_1.throwError)(function () { return err; }))); }), (0, operators_1.concatWith)(txc.commit()));\n        })));\n    };\n    return RxSession;\n}());\nexports.default = RxSession;\nfunction _createRetryLogic(config) {\n    var maxRetryTimeout = config && config.maxTransactionRetryTime\n        ? config.maxTransactionRetryTime\n        : null;\n    return new retry_logic_rx_1.default({ maxRetryTimeout: maxRetryTimeout });\n}"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIE,WAAW,GAAGV,eAAe,CAACQ,OAAO,CAAC,aAAD,CAAR,CAAjC,C,CACA;;;AACA,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,mBAAD,CAAjC;;AACA,IAAII,gBAAgB,GAAGZ,eAAe,CAACQ,OAAO,CAAC,kBAAD,CAAR,CAAtC;;AACA,IAAIK,wBAAwB,GAAGb,eAAe,CAACQ,OAAO,CAAC,0BAAD,CAAR,CAA9C;;AACA,IAAIM,gBAAgB,GAAGd,eAAe,CAACQ,OAAO,CAAC,2BAAD,CAAR,CAAtC;;AACA,IAAIO,EAAE,GAAGJ,mBAAmB,CAACK,QAApB,CAA6BC,SAAtC;AAAA,IAAiDC,gBAAgB,GAAGH,EAAE,CAACG,gBAAvE;AAAA,IAAyFC,iBAAiB,GAAGJ,EAAE,CAACI,iBAAhH;AAAA,IAAmIC,cAAc,GAAGL,EAAE,CAACK,cAAvJ;AAAA,IAAuKC,QAAQ,GAAGV,mBAAmB,CAACK,QAApB,CAA6BM,QAA7B,CAAsCD,QAAxN;AACA;AACA;AACA;;AACA,IAAIE,SAAS;AAAG;AAAe,YAAY;EACvC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,SAAT,CAAmBR,EAAnB,EAAuB;IACnB,IAAIS,EAAE,GAAGT,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9B;IAAA,IAAkCU,OAAO,GAAGD,EAAE,CAACC,OAA/C;IAAA,IAAwDC,MAAM,GAAGF,EAAE,CAACE,MAApE;IAAA,IAA4EC,GAAG,GAAGH,EAAE,CAACG,GAArF;;IACA,KAAKC,QAAL,GAAgBH,OAAhB;IACA,KAAKI,WAAL,GAAmBC,iBAAiB,CAACJ,MAAD,CAApC;IACA,KAAKK,IAAL,GAAYJ,GAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIJ,SAAS,CAACS,SAAV,CAAoBC,GAApB,GAA0B,UAAUC,KAAV,EAAiBC,UAAjB,EAA6BC,iBAA7B,EAAgD;IACtE,IAAIC,KAAK,GAAG,IAAZ;;IACA,OAAO,IAAI3B,WAAW,CAAC4B,OAAhB,CAAwB,IAAI/B,MAAM,CAACgC,UAAX,CAAsB,UAAUC,QAAV,EAAoB;MACrE,IAAI;QACAA,QAAQ,CAACC,IAAT,CAAcJ,KAAK,CAACT,QAAN,CAAeK,GAAf,CAAmBC,KAAnB,EAA0BC,UAA1B,EAAsCC,iBAAtC,CAAd;QACAI,QAAQ,CAACE,QAAT;MACH,CAHD,CAIA,OAAOC,GAAP,EAAY;QACRH,QAAQ,CAACI,KAAT,CAAeD,GAAf;MACH;;MACD,OAAO,YAAY,CAAG,CAAtB;IACH,CAT8B,CAAxB,CAAP;EAUH,CAZD;EAaA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIpB,SAAS,CAACS,SAAV,CAAoBa,gBAApB,GAAuC,UAAUT,iBAAV,EAA6B;IAChE,OAAO,KAAKU,iBAAL,CAAuB,KAAKlB,QAAL,CAAcmB,KAArC,EAA4CX,iBAA5C,EAA+D;MAAEY,GAAG,EAAE5B,cAAc,CAAC6B;IAAtB,CAA/D,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI1B,SAAS,CAACS,SAAV,CAAoBkB,eAApB,GAAsC,UAAUC,IAAV,EAAgBf,iBAAhB,EAAmC;IACrE,OAAO,KAAKgB,eAAL,CAAqBlC,gBAArB,EAAuCiC,IAAvC,EAA6Cf,iBAA7C,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIb,SAAS,CAACS,SAAV,CAAoBqB,gBAApB,GAAuC,UAAUF,IAAV,EAAgBf,iBAAhB,EAAmC;IACtE,OAAO,KAAKgB,eAAL,CAAqBjC,iBAArB,EAAwCgC,IAAxC,EAA8Cf,iBAA9C,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIb,SAAS,CAACS,SAAV,CAAoBsB,WAApB,GAAkC,UAAUH,IAAV,EAAgBf,iBAAhB,EAAmC;IACjE,OAAO,KAAKmB,qBAAL,CAA2BrC,gBAA3B,EAA6CiC,IAA7C,EAAmDf,iBAAnD,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIb,SAAS,CAACS,SAAV,CAAoBwB,YAApB,GAAmC,UAAUL,IAAV,EAAgBf,iBAAhB,EAAmC;IAClE,OAAO,KAAKmB,qBAAL,CAA2BpC,iBAA3B,EAA8CgC,IAA9C,EAAoDf,iBAApD,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIb,SAAS,CAACS,SAAV,CAAoBuB,qBAApB,GAA4C,UAAUE,UAAV,EAAsBN,IAAtB,EAA4Bf,iBAA5B,EAA+C;IACvF,IAAIsB,OAAO,GAAG,UAAUC,GAAV,EAAe;MAAE,OAAO,IAAI9C,wBAAwB,CAACyB,OAA7B,CAAqC;QACvEL,GAAG,EAAE0B,GAAG,CAAC1B,GAAJ,CAAQ2B,IAAR,CAAaD,GAAb;MADkE,CAArC,CAAP;IAE1B,CAFL;;IAGA,OAAO,KAAKP,eAAL,CAAqBK,UAArB,EAAiCN,IAAjC,EAAuCf,iBAAvC,EAA0DsB,OAA1D,CAAP;EACH,CALD;EAMA;AACJ;AACA;AACA;AACA;AACA;;;EACInC,SAAS,CAACS,SAAV,CAAoB6B,KAApB,GAA4B,YAAY;IACpC,IAAIxB,KAAK,GAAG,IAAZ;;IACA,OAAO,IAAI9B,MAAM,CAACgC,UAAX,CAAsB,UAAUC,QAAV,EAAoB;MAC7CH,KAAK,CAACT,QAAN,CACKiC,KADL,GAEKC,IAFL,CAEU,YAAY;QAClBtB,QAAQ,CAACE,QAAT;MACH,CAJD,EAKKqB,KALL,CAKW,UAAUpB,GAAV,EAAe;QAAE,OAAOH,QAAQ,CAACI,KAAT,CAAeD,GAAf,CAAP;MAA6B,CALzD;IAMH,CAPM,CAAP;EAQH,CAVD;;EAWApB,SAAS,CAACS,SAAV,CAAoBgC,MAAM,CAACC,YAA3B,IAA2C,YAAY;IACnD,OAAO,KAAKJ,KAAL,EAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACItC,SAAS,CAACS,SAAV,CAAoBkC,YAApB,GAAmC,YAAY;IAC3C,OAAO,KAAKC,aAAL,EAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI5C,SAAS,CAACS,SAAV,CAAoBmC,aAApB,GAAoC,YAAY;IAC5C,OAAO,KAAKvC,QAAL,CAAcuC,aAAd,EAAP;EACH,CAFD;EAGA;AACJ;AACA;;;EACI5C,SAAS,CAACS,SAAV,CAAoBc,iBAApB,GAAwC,UAAUW,UAAV,EAAsBrB,iBAAtB,EAAyCgC,kBAAzC,EAA6D;IACjG,IAAI/B,KAAK,GAAG,IAAZ;;IACA,IAAIf,QAAQ,GAAGD,QAAQ,CAACgD,KAAT,EAAf;;IACA,IAAIjC,iBAAJ,EAAuB;MACnBd,QAAQ,GAAG,IAAID,QAAJ,CAAae,iBAAb,EAAgC,KAAKL,IAArC,CAAX;IACH;;IACD,OAAO,IAAIxB,MAAM,CAACgC,UAAX,CAAsB,UAAUC,QAAV,EAAoB;MAC7C,IAAI;QACAH,KAAK,CAACT,QAAN,CAAekB,iBAAf,CAAiCW,UAAjC,EAA6CnC,QAA7C,EAAuD8C,kBAAvD,EACKN,IADL,CACU,UAAUQ,EAAV,EAAc;UACpB9B,QAAQ,CAACC,IAAT,CAAc,IAAI7B,gBAAgB,CAAC0B,OAArB,CAA6BgC,EAA7B,CAAd;UACA9B,QAAQ,CAACE,QAAT;QACH,CAJD,EAKKqB,KALL,CAKW,UAAUpB,GAAV,EAAe;UAAE,OAAOH,QAAQ,CAACI,KAAT,CAAeD,GAAf,CAAP;QAA6B,CALzD;MAMH,CAPD,CAQA,OAAOA,GAAP,EAAY;QACRH,QAAQ,CAACI,KAAT,CAAeD,GAAf;MACH;;MACD,OAAO,YAAY,CAAG,CAAtB;IACH,CAbM,CAAP;EAcH,CApBD;EAqBA;AACJ;AACA;;;EACIpB,SAAS,CAACS,SAAV,CAAoBoB,eAApB,GAAsC,UAAUK,UAAV,EAAsBN,IAAtB,EAA4Bf,iBAA5B,EAA+CmC,kBAA/C,EAAmE;IACrG,IAAIlC,KAAK,GAAG,IAAZ;;IACA,IAAIkC,kBAAkB,KAAK,KAAK,CAAhC,EAAmC;MAAEA,kBAAkB,GAAG,UAAUD,EAAV,EAAc;QAAE,OAAOA,EAAP;MAAY,CAAjD;IAAoD;;IACzF,IAAIhD,QAAQ,GAAGD,QAAQ,CAACgD,KAAT,EAAf;;IACA,IAAIjC,iBAAJ,EAAuB;MACnBd,QAAQ,GAAG,IAAID,QAAJ,CAAae,iBAAb,CAAX;IACH;;IACD,IAAIoC,OAAO,GAAG;MACVJ,kBAAkB,EAAE;QAChBpB,GAAG,EAAE5B,cAAc,CAACqD,mBADJ;QAEhBC,kBAAkB,EAAE,YAAY;UAC5BF,OAAO,CAACJ,kBAAR,GAA6BO,SAA7B;QACH;MAJe;IADV,CAAd;IAQA,OAAO,KAAK9C,WAAL,CAAiB+C,KAAjB,CAAuB,CAAC,GAAGrE,MAAM,CAACsE,EAAX,EAAe,CAAf,EAAkBC,IAAlB,CAAuB,CAAC,GAAGrE,WAAW,CAACsE,QAAhB,EAA0B,YAAY;MAAE,OAAO1C,KAAK,CAACS,iBAAN,CAAwBW,UAAxB,EAAoCnC,QAApC,EAA8CkD,OAAO,CAACJ,kBAAtD,CAAP;IAAmF,CAA3H,CAAvB,EAAqJ,CAAC,GAAG3D,WAAW,CAACsE,QAAhB,EAA0B,UAAUpB,GAAV,EAAe;MACxN,OAAO,CAAC,GAAGpD,MAAM,CAACyE,KAAX,EAAkB,YAAY;QACjC,IAAI;UACA,OAAO7B,IAAI,CAACoB,kBAAkB,CAACZ,GAAD,CAAnB,CAAX;QACH,CAFD,CAGA,OAAOhB,GAAP,EAAY;UACR,OAAO,CAAC,GAAGpC,MAAM,CAAC0E,UAAX,EAAuB,YAAY;YAAE,OAAOtC,GAAP;UAAa,CAAlD,CAAP;QACH;MACJ,CAPM,EAOJmC,IAPI,CAOC,CAAC,GAAGrE,WAAW,CAACyE,UAAhB,EAA4B,UAAUvC,GAAV,EAAe;QAAE,OAAOgB,GAAG,CAACwB,QAAJ,GAAeL,IAAf,CAAoB,CAAC,GAAGrE,WAAW,CAAC2E,UAAhB,EAA4B,CAAC,GAAG7E,MAAM,CAAC0E,UAAX,EAAuB,YAAY;UAAE,OAAOtC,GAAP;QAAa,CAAlD,CAA5B,CAApB,CAAP;MAA+G,CAA5J,CAPD,EAOgK,CAAC,GAAGlC,WAAW,CAAC2E,UAAhB,EAA4BzB,GAAG,CAAC0B,MAAJ,EAA5B,CAPhK,CAAP;IAQH,CATkL,CAArJ,CAAvB,CAAP;EAUH,CAzBD;;EA0BA,OAAO9D,SAAP;AACH,CAjN8B,EAA/B;;AAkNAlB,OAAO,CAACiC,OAAR,GAAkBf,SAAlB;;AACA,SAASO,iBAAT,CAA2BJ,MAA3B,EAAmC;EAC/B,IAAI4D,eAAe,GAAG5D,MAAM,IAAIA,MAAM,CAAC6D,uBAAjB,GAChB7D,MAAM,CAAC6D,uBADS,GAEhB,IAFN;EAGA,OAAO,IAAIzE,gBAAgB,CAACwB,OAArB,CAA6B;IAAEgD,eAAe,EAAEA;EAAnB,CAA7B,CAAP;AACH"},"metadata":{},"sourceType":"script"}