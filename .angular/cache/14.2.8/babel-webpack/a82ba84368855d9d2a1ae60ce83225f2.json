{"ast":null,"code":"import _asyncToGenerator from \"C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport neo4j from 'neo4j-driver';\nimport { BehaviorSubject } from 'rxjs';\nimport { Neo4jModel } from '../models/neo4j-models';\nimport * as i0 from \"@angular/core\";\nexport class Neo4jServiceService {\n  constructor() {\n    this.NEO4J_URI = 'neo4j+s://55354b5d.databases.neo4j.io';\n    this.NEO4J_USERNAME = 'neo4j';\n    this.NEO4J_PASSWORD = 'So38f1CMcyWRKqYR8bP4KR6QkohPRHXa9pINY78uCFI';\n    this.gamesSource = new BehaviorSubject([]);\n    this.currentGames = this.gamesSource.asObservable();\n  }\n\n  getCommonNodes(userLikedGames, userDislikedGames) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var gameList = new Array(); // var likedGames = [43050, 542349, 25023]\n      // var avoidGames = [43050, 542349, 25023]\n\n      var likedGames = userLikedGames;\n      var avoidGames = likedGames.concat(userDislikedGames); // Create a Driver Instance\n\n      const driver = neo4j.driver(_this.NEO4J_URI, neo4j.auth.basic(_this.NEO4J_USERNAME, _this.NEO4J_PASSWORD)); // Open a new Session\n\n      const session = driver.session();\n\n      try {\n        // Run this Cypher statement using session.run()\n        const cypher = `WITH [` + likedGames.toString() + `] AS LikedGames, ` + ` [` + avoidGames.toString() + `] AS avoidGames ` + `MATCH (n1:Game)-[r1]->(b)<-[r2]-(n2:Game)` + `WHERE n1.gameId IN LikedGames AND n2.gameId IN LikedGames ` + `WITH DISTINCT collect(b) AS commonNodes, avoidGames ` + `MATCH (n:Game)-[r]->(m) ` + `WHERE m IN commonNodes AND NOT n.gameId IN avoidGames ` + `RETURN n AS GAME LIMIT 100 `;\n        const res = yield session.run(cypher);\n\n        for (const record of res.records) {\n          const gameNode = record.get('GAME');\n\n          if (gameNode) {\n            const elementId = String(gameNode.elementId).split(':')[2];\n            const label = gameNode.labels[0];\n            var currentNode = new Neo4jModel(elementId, label);\n            gameList.push(currentNode);\n          }\n        }\n      } finally {\n        // Close the session\n        yield session.close();\n      }\n\n      return gameList;\n    })();\n  }\n\n}\n\nNeo4jServiceService.ɵfac = function Neo4jServiceService_Factory(t) {\n  return new (t || Neo4jServiceService)();\n};\n\nNeo4jServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Neo4jServiceService,\n  factory: Neo4jServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,OAAOA,KAAP,MAAkB,cAAlB;AACA,SAASC,eAAT,QAAgC,MAAhC;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAKA,OAAM,MAAOC,mBAAP,CAA0B;EAO9BC;IANQ,iBAAoB,uCAApB;IACA,sBAAiB,OAAjB;IACA,sBAAiB,6CAAjB;IACA,mBAAc,IAAIH,eAAJ,CAA2B,EAA3B,CAAd;IACR,oBAAe,KAAKI,WAAL,CAAiBC,YAAjB,EAAf;EAEgB;;EAEVC,cAAc,CAACC,cAAD,EAA2BC,iBAA3B,EAAsD;IAAA;;IAAA;MACxE,IAAIC,QAAQ,GAAiB,IAAIC,KAAJ,EAA7B,CADwE,CAExE;MACA;;MACA,IAAIC,UAAU,GAAGJ,cAAjB;MACA,IAAIK,UAAU,GAAGD,UAAU,CAACE,MAAX,CAAkBL,iBAAlB,CAAjB,CALwE,CAOxE;;MACA,MAAMM,MAAM,GAAGf,KAAK,CAACe,MAAN,CACb,KAAI,CAACC,SADQ,EAEbhB,KAAK,CAACiB,IAAN,CAAWC,KAAX,CAAiB,KAAI,CAACC,cAAtB,EAAsC,KAAI,CAACC,cAA3C,CAFa,CAAf,CARwE,CAaxE;;MACA,MAAMC,OAAO,GAAGN,MAAM,CAACM,OAAP,EAAhB;;MAEA,IAAI;QACF;QACA,MAAMC,MAAM,GACV,WACAV,UAAU,CAACW,QAAX,EADA,GAEA,mBAFA,GAGA,IAHA,GAIAV,UAAU,CAACU,QAAX,EAJA,GAKA,kBALA,GAMA,2CANA,GAOA,4DAPA,GAQA,sDARA,GASA,0BATA,GAUA,wDAVA,GAWA,6BAZF;QAcA,MAAMC,GAAG,SAASH,OAAO,CAACI,GAAR,CAAYH,MAAZ,CAAlB;;QAEA,KAAK,MAAMI,MAAX,IAAqBF,GAAG,CAACG,OAAzB,EAAkC;UAChC,MAAMC,QAAQ,GAAGF,MAAM,CAACG,GAAP,CAAW,MAAX,CAAjB;;UACA,IAAID,QAAJ,EAAc;YACZ,MAAME,SAAS,GAAGC,MAAM,CAACH,QAAQ,CAACE,SAAV,CAAN,CAA2BE,KAA3B,CAAiC,GAAjC,EAAsC,CAAtC,CAAlB;YACA,MAAMC,KAAK,GAAGL,QAAQ,CAACM,MAAT,CAAgB,CAAhB,CAAd;YACA,IAAIC,WAAW,GAAG,IAAIjC,UAAJ,CAAe4B,SAAf,EAA0BG,KAA1B,CAAlB;YACAvB,QAAQ,CAAC0B,IAAT,CAAcD,WAAd;UACD;QACF;MACF,CA3BD,SA2BU;QACR;QACA,MAAMd,OAAO,CAACgB,KAAR,EAAN;MACD;;MAED,OAAO3B,QAAP;IAhDwE;EAiDzE;;AA1D6B;;;mBAAnBP;AAAmB;;;SAAnBA;EAAmBmC,SAAnBnC,mBAAmB;EAAAoC,YAFlB","names":["neo4j","BehaviorSubject","Neo4jModel","Neo4jServiceService","constructor","gamesSource","asObservable","getCommonNodes","userLikedGames","userDislikedGames","gameList","Array","likedGames","avoidGames","concat","driver","NEO4J_URI","auth","basic","NEO4J_USERNAME","NEO4J_PASSWORD","session","cypher","toString","res","run","record","records","gameNode","get","elementId","String","split","label","labels","currentNode","push","close","factory","providedIn"],"sourceRoot":"","sources":["C:\\projects\\levelUp_v1\\Level-Up-FN\\Level-Up-Fronten-master\\src\\app\\services\\neo4j.service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport neo4j from 'neo4j-driver';\nimport { BehaviorSubject } from 'rxjs';\nimport { Neo4jModel } from '../models/neo4j-models';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class Neo4jServiceService {\n  private NEO4J_URI: string = 'neo4j+s://55354b5d.databases.neo4j.io';\n  private NEO4J_USERNAME = 'neo4j';\n  private NEO4J_PASSWORD = 'So38f1CMcyWRKqYR8bP4KR6QkohPRHXa9pINY78uCFI';\n  private gamesSource = new BehaviorSubject<any[]>([]);\n  currentGames = this.gamesSource.asObservable();\n\n  constructor() {}\n\n  async getCommonNodes(userLikedGames: string[], userDislikedGames: string[]) {\n    var gameList: Neo4jModel[] = new Array();\n    // var likedGames = [43050, 542349, 25023]\n    // var avoidGames = [43050, 542349, 25023]\n    var likedGames = userLikedGames;\n    var avoidGames = likedGames.concat(userDislikedGames);\n\n    // Create a Driver Instance\n    const driver = neo4j.driver(\n      this.NEO4J_URI,\n      neo4j.auth.basic(this.NEO4J_USERNAME, this.NEO4J_PASSWORD)\n    );\n\n    // Open a new Session\n    const session = driver.session();\n\n    try {\n      // Run this Cypher statement using session.run()\n      const cypher =\n        `WITH [` +\n        likedGames.toString() +\n        `] AS LikedGames, ` +\n        ` [` +\n        avoidGames.toString() +\n        `] AS avoidGames ` +\n        `MATCH (n1:Game)-[r1]->(b)<-[r2]-(n2:Game)` +\n        `WHERE n1.gameId IN LikedGames AND n2.gameId IN LikedGames ` +\n        `WITH DISTINCT collect(b) AS commonNodes, avoidGames ` +\n        `MATCH (n:Game)-[r]->(m) ` +\n        `WHERE m IN commonNodes AND NOT n.gameId IN avoidGames ` +\n        `RETURN n AS GAME LIMIT 100 `;\n\n      const res = await session.run(cypher);\n\n      for (const record of res.records) {\n        const gameNode = record.get('GAME');\n        if (gameNode) {\n          const elementId = String(gameNode.elementId).split(':')[2];\n          const label = gameNode.labels[0];\n          var currentNode = new Neo4jModel(elementId, label);\n          gameList.push(currentNode);\n        }\n      }\n    } finally {\n      // Close the session\n      await session.close();\n    }\n\n    return gameList;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}