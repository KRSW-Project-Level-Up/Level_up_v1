{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryConfig = exports.SessionConfig = exports.routing = exports.WRITE = exports.READ = exports.Driver = void 0;\n\nvar bookmarks_1 = require(\"./internal/bookmarks\");\n\nvar configured_custom_resolver_1 = __importDefault(require(\"./internal/resolver/configured-custom-resolver\"));\n\nvar constants_1 = require(\"./internal/constants\");\n\nvar logger_1 = require(\"./internal/logger\");\n\nvar session_1 = __importDefault(require(\"./session\"));\n\nvar util_1 = require(\"./internal/util\");\n\nvar bookmark_manager_1 = require(\"./bookmark-manager\");\n\nvar result_transformers_1 = __importDefault(require(\"./result-transformers\"));\n\nvar query_executor_1 = __importDefault(require(\"./internal/query-executor\"));\n\nvar error_1 = require(\"./error\");\n\nvar DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1000; // 1 hour\n\n/**\n * The default record fetch size. This is used in Bolt V4 protocol to pull query execution result in batches.\n * @type {number}\n */\n\nvar DEFAULT_FETCH_SIZE = 1000;\n/**\n * Constant that represents read session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.READ })`.\n * @type {string}\n */\n\nvar READ = constants_1.ACCESS_MODE_READ;\nexports.READ = READ;\n/**\n * Constant that represents write session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.WRITE })`.\n * @type {string}\n */\n\nvar WRITE = constants_1.ACCESS_MODE_WRITE;\nexports.WRITE = WRITE;\nvar idGenerator = 0;\n/**\n * The session configuration\n *\n * @interface\n */\n\nvar SessionConfig =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @private\n   */\n  function SessionConfig() {\n    /**\n     * The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n     * **Default**: {@link WRITE}\n     * @type {string}\n     */\n    this.defaultAccessMode = WRITE;\n    /**\n     * The initial reference or references to some previous\n     * transactions. Value is optional and absence indicates that that the bookmarks do not exist or are unknown.\n     * @type {string|string[]|undefined}\n     */\n\n    this.bookmarks = [];\n    /**\n     * The database this session will operate on.\n     *\n     * This option has no explicit value by default, but it is recommended to set\n     * one if the target database is known in advance. This has the benefit of\n     * ensuring a consistent target database name throughout the session in a\n     * straightforward way and potentially simplifies driver logic as well as\n     * reduces network communication resulting in better performance.\n     *\n     * Usage of Cypher clauses like USE is not a replacement for this option.\n     * The driver does not parse any Cypher.\n     *\n     * When no explicit name is set, the driver behavior depends on the connection\n     * URI scheme supplied to the driver on instantiation and Bolt protocol\n     * version.\n     *\n     * Specifically, the following applies:\n     *\n     * - **bolt schemes** - queries are dispatched to the server for execution\n     *   without explicit database name supplied, meaning that the target database\n     *   name for query execution is determined by the server. It is important to\n     *   note that the target database may change (even within the same session),\n     *   for instance if the user's home database is changed on the server.\n     *\n     * - **neo4j schemes** - providing that Bolt protocol version 4.4, which was\n     *   introduced with Neo4j server 4.4, or above is available, the driver\n     *   fetches the user's home database name from the server on first query\n     *   execution within the session and uses the fetched database name\n     *   explicitly for all queries executed within the session. This ensures that\n     *   the database name remains consistent within the given session. For\n     *   instance, if the user's home database name is 'movies' and the server\n     *   supplies it to the driver upon database name fetching for the session,\n     *   all queries within that session are executed with the explicit database\n     *   name 'movies' supplied. Any change to the userâ€™s home database is\n     *   reflected only in sessions created after such change takes effect. This\n     *   behavior requires additional network communication. In clustered\n     *   environments, it is strongly recommended to avoid a single point of\n     *   failure. For instance, by ensuring that the connection URI resolves to\n     *   multiple endpoints. For older Bolt protocol versions the behavior is the\n     *   same as described for the **bolt schemes** above.\n     *\n     * @type {string|undefined}\n     */\n\n    this.database = '';\n    /**\n     * The username which the user wants to impersonate for the duration of the session.\n     *\n     * @type {string|undefined}\n     */\n\n    this.impersonatedUser = undefined;\n    /**\n     * The {@link AuthToken} which will be used for the duration of the session.\n     *\n     * By default, the session will use connections authenticated with {@link AuthToken} configured in the\n     * driver creation. This configuration allows switch user and/or authorization information for the\n     * session lifetime.\n     *\n     * **Warning**: This option is only enable when the driver is connected with Neo4j Database servers\n     * which supports Bolt 5.1 and onwards.\n     *\n     * @type {AuthToken|undefined}\n     * @see {@link driver}\n     */\n\n    this.auth = undefined;\n    /**\n     * The record fetch size of each batch of this session.\n     *\n     * Use {@link FETCH_ALL} to always pull all records in one batch. This will override the config value set on driver config.\n     *\n     * @type {number|undefined}\n     */\n\n    this.fetchSize = undefined;\n    /**\n     * Configure a BookmarkManager for the session to use\n     *\n     * A BookmarkManager is a piece of software responsible for keeping casual consistency between different sessions by sharing bookmarks\n     * between the them.\n     * Enabling it is done by supplying an BookmarkManager implementation instance to this param.\n     * A default implementation could be acquired by calling the factory function {@link bookmarkManager}.\n     *\n     * **Warning**: Sharing the same BookmarkManager instance across multiple sessions can have a negative impact\n     * on performance since all the queries will wait for the latest changes being propagated across the cluster.\n     * For keeping consistency between a group of queries, use {@link Session} for grouping them.\n     * For keeping consistency between a group of sessions, use {@link BookmarkManager} instance for grouping them.\n     *\n     * @example\n     * const bookmarkManager = neo4j.bookmarkManager()\n     * const linkedSession1 = driver.session({ database:'neo4j', bookmarkManager })\n     * const linkedSession2 = driver.session({ database:'neo4j', bookmarkManager })\n     * const unlinkedSession = driver.session({ database:'neo4j' })\n     *\n     * // Creating Driver User\n     * const createUserQueryResult = await linkedSession1.run('CREATE (p:Person {name: $name})', { name: 'Driver User'})\n     *\n     * // Reading Driver User will *NOT* wait of the changes being propagated to the server before RUN the query\n     * // So the 'Driver User' person might not exist in the Result\n     * const unlinkedReadResult = await unlinkedSession.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})\n     *\n     * // Reading Driver User will wait of the changes being propagated to the server before RUN the query\n     * // So the 'Driver User' person should exist in the Result, unless deleted.\n     * const linkedResult = await linkedSession2.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})\n     *\n     * await linkedSession1.close()\n     * await linkedSession2.close()\n     * await unlinkedSession.close()\n     *\n     * @type {BookmarkManager|undefined}\n     * @since 5.0\n     */\n\n    this.bookmarkManager = undefined;\n    /**\n     * Configure filter for {@link Notification} objects returned in {@link ResultSummary#notifications}.\n     *\n     * This configuration enables filter notifications by:\n     *\n     * * the minimum severity level ({@link NotificationFilterMinimumSeverityLevel})\n     * * disabling notification categories ({@link NotificationFilterDisabledCategory})\n     *\n     *\n     * Disabling notifications can be done by defining the minimum severity level to 'OFF'.\n     * At driver level, when omitted, uses the server's default.\n     * At session level, when omitted, defaults to what filters have been configured at driver level.\n     *\n     * Disabling categories or severities allows the server to skip analysis for those, which can speed up query\n     * execution.\n     *\n     * @example\n     * // enabling warning notification, but disabling `HINT` and `DEPRECATION` notifications.\n     * const session = driver.session({\n     *     database: 'neo4j',\n     *     notificationFilter: {\n     *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.WARNING, // or 'WARNING\n     *         disabledCategories: [\n     *             neo4j.notificationFilterDisabledCategory.HINT, // or 'HINT'\n     *             neo4j.notificationFilterDisabledCategory.DEPRECATION // or 'DEPRECATION'\n     *        ]\n     *     }\n     * })\n     *\n     * @example\n     * // disabling notifications for a session\n     * const session = driver.session({\n     *     database: 'neo4j',\n     *     notificationFilter: {\n     *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.OFF // or 'OFF'\n     *     }\n     * })\n     *\n     * @example\n     * // using default values configured in the driver\n     * const sessionWithDefaultValues = driver.session({ database: 'neo4j' })\n     * // or driver.session({ database: 'neo4j', notificationFilter: undefined })\n     *\n     * // using default minimum severity level, but disabling 'HINT' and 'UNRECOGNIZED'\n     * // notification categories\n     * const sessionWithDefaultSeverityLevel = driver.session({\n     *     database: 'neo4j',\n     *     notificationFilter: {\n     *         disabledCategories: [\n     *             neo4j.notificationFilterDisabledCategory.HINT, // or 'HINT'\n     *             neo4j.notificationFilterDisabledCategory.UNRECOGNIZED // or 'UNRECOGNIZED'\n     *        ]\n     *     }\n     * })\n     *\n     * // using default disabled categories, but configuring minimum severity level to 'WARNING'\n     * const sessionWithDefaultSeverityLevel = driver.session({\n     *     database: 'neo4j',\n     *     notificationFilter: {\n     *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.WARNING // or 'WARNING'\n     *     }\n     * })\n     *\n     * @type {NotificationFilter|undefined}\n     * @since 5.7\n     */\n\n    this.notificationFilter = undefined;\n  }\n\n  return SessionConfig;\n}();\n\nexports.SessionConfig = SessionConfig;\nvar ROUTING_WRITE = 'WRITE';\nvar ROUTING_READ = 'READ';\n/**\n * @typedef {'WRITE'|'READ'} RoutingControl\n */\n\n/**\n * Constants that represents routing modes.\n *\n * @example\n * driver.executeQuery(\"<QUERY>\", <PARAMETERS>, { routing: neo4j.routing.WRITE })\n */\n\nvar routing = {\n  WRITE: ROUTING_WRITE,\n  READ: ROUTING_READ\n};\nexports.routing = routing;\nObject.freeze(routing);\n/**\n * The query configuration\n * @interface\n */\n\nvar QueryConfig =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @private\n   */\n  function QueryConfig() {\n    /**\n     * Define the type of cluster member the query will be routed to.\n     *\n     * @type {RoutingControl}\n     */\n    this.routing = routing.WRITE;\n    /**\n     * Define the transformation will be applied to the Result before return from the\n     * query method.\n     *\n     * @type {ResultTransformer}\n     * @see {@link resultTransformers} for provided implementations.\n     */\n\n    this.resultTransformer = undefined;\n    /**\n     * The database this session will operate on.\n     *\n     * @type {string|undefined}\n     */\n\n    this.database = '';\n    /**\n     * The username which the user wants to impersonate for the duration of the query.\n     *\n     * @type {string|undefined}\n     */\n\n    this.impersonatedUser = undefined;\n    /**\n     * Configure a BookmarkManager for the session to use\n     *\n     * A BookmarkManager is a piece of software responsible for keeping casual consistency between different pieces of work by sharing bookmarks\n     * between the them.\n     *\n     * By default, it uses the driver's non mutable driver level bookmark manager. See, {@link Driver.executeQueryBookmarkManager}\n     *\n     * Can be set to null to disable causal chaining.\n     * @type {BookmarkManager|undefined|null}\n     */\n\n    this.bookmarkManager = undefined;\n    /**\n     * Configuration for all transactions started to execute the query.\n     *\n     * @type {TransactionConfig|undefined}\n     *\n     */\n\n    this.transactionConfig = undefined;\n  }\n\n  return QueryConfig;\n}();\n\nexports.QueryConfig = QueryConfig;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\n\nvar Driver =\n/** @class */\nfunction () {\n  /**\n   * You should not be calling this directly, instead use {@link driver}.\n   * @constructor\n   * @protected\n   * @param {Object} meta Metainformation about the driver\n   * @param {Object} config\n   * @param {function(id: number, config:Object, log:Logger, hostNameResolver: ConfiguredCustomResolver): ConnectionProvider } createConnectionProvider Creates the connection provider\n   * @param {function(args): Session } createSession Creates the a session\n  */\n  function Driver(meta, config, createConnectionProvider, createSession, createQueryExecutor) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    if (createSession === void 0) {\n      createSession = function (args) {\n        return new session_1.default(args);\n      };\n    }\n\n    if (createQueryExecutor === void 0) {\n      createQueryExecutor = function (createSession) {\n        return new query_executor_1.default(createSession);\n      };\n    }\n\n    sanitizeConfig(config);\n    var log = logger_1.Logger.create(config);\n    validateConfig(config, log);\n    this._id = idGenerator++;\n    this._meta = meta;\n    this._config = config;\n    this._log = log;\n    this._createConnectionProvider = createConnectionProvider;\n    this._createSession = createSession;\n    this._defaultExecuteQueryBookmarkManager = (0, bookmark_manager_1.bookmarkManager)();\n    this._queryExecutor = createQueryExecutor(this.session.bind(this));\n    /**\n     * Reference to the connection provider. Initialized lazily by {@link _getOrCreateConnectionProvider}.\n     * @type {ConnectionProvider}\n     * @protected\n     */\n\n    this._connectionProvider = null;\n\n    this._afterConstruction();\n  }\n\n  Object.defineProperty(Driver.prototype, \"executeQueryBookmarkManager\", {\n    /**\n     * The bookmark managed used by {@link Driver.executeQuery}\n     *\n     * @type {BookmarkManager}\n     */\n    get: function () {\n      return this._defaultExecuteQueryBookmarkManager;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Executes a query in a retriable context and returns a {@link EagerResult}.\n   *\n   * This method is a shortcut for a {@link Session#executeRead} and {@link Session#executeWrite}.\n   *\n   * NOTE: Because it is an explicit transaction from the server point of view, Cypher queries using\n   * \"CALL {} IN TRANSACTIONS\" or the older \"USING PERIODIC COMMIT\" construct will not work (call\n   * {@link Session#run} for these).\n   *\n   * @example\n   * // Run a simple write query\n   * const { keys, records, summary } = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'})\n   *\n   * @example\n   * // Run a read query\n   * const { keys, records, summary } = await driver.executeQuery(\n   *    'MATCH (p:Person{ name: $name }) RETURN p',\n   *    { name: 'Person1'},\n   *    { routing: neo4j.routing.READ})\n   *\n   * @example\n   * // Run a read query returning a Person Nodes per elementId\n   * const peopleMappedById = await driver.executeQuery(\n   *    'MATCH (p:Person{ name: $name }) RETURN p',\n   *    { name: 'Person1'},\n   *    {\n   *      resultTransformer: neo4j.resultTransformers.mappedResultTransformer({\n   *        map(record) {\n   *          const p = record.get('p')\n   *          return [p.elementId, p]\n   *        },\n   *        collect(elementIdPersonPairArray) {\n   *          return new Map(elementIdPersonPairArray)\n   *        }\n   *      })\n   *    }\n   * )\n   *\n   * const person = peopleMappedById.get(\"<ELEMENT_ID>\")\n   *\n   * @example\n   * // these lines\n   * const transformedResult = await driver.executeQuery(\n   *    \"<QUERY>\",\n   *    <PARAMETERS>,\n   *    {\n   *       routing: neo4j.routing.WRITE,\n   *       resultTransformer: transformer,\n   *       database: \"<DATABASE>\",\n   *       impersonatedUser: \"<USER>\",\n   *       bookmarkManager: bookmarkManager\n   *    })\n   * // are equivalent to those\n   * const session = driver.session({\n   *    database: \"<DATABASE>\",\n   *    impersonatedUser: \"<USER>\",\n   *    bookmarkManager: bookmarkManager\n   * })\n   *\n   * try {\n   *    const transformedResult = await session.executeWrite(tx => {\n   *        const result = tx.run(\"<QUERY>\", <PARAMETERS>)\n   *        return transformer(result)\n   *    })\n   * } finally {\n   *    await session.close()\n   * }\n   *\n   * @public\n   * @param {string | {text: string, parameters?: object}} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in the query\n   * @param {QueryConfig<T>} config - The query configuration\n   * @returns {Promise<T>}\n   *\n   * @see {@link resultTransformers} for provided result transformers.\n   */\n\n  Driver.prototype.executeQuery = function (query, parameters, config) {\n    var _a, _b, _c;\n\n    if (config === void 0) {\n      config = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var bookmarkManager, resultTransformer, routingConfig;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            bookmarkManager = config.bookmarkManager === null ? undefined : (_a = config.bookmarkManager) !== null && _a !== void 0 ? _a : this.executeQueryBookmarkManager;\n            resultTransformer = (_b = config.resultTransformer) !== null && _b !== void 0 ? _b : result_transformers_1.default.eagerResultTransformer();\n            routingConfig = (_c = config.routing) !== null && _c !== void 0 ? _c : routing.WRITE;\n\n            if (routingConfig !== routing.READ && routingConfig !== routing.WRITE) {\n              throw (0, error_1.newError)(\"Illegal query routing config: \\\"\".concat(routingConfig, \"\\\"\"));\n            }\n\n            return [4\n            /*yield*/\n            , this._queryExecutor.execute({\n              resultTransformer: resultTransformer,\n              bookmarkManager: bookmarkManager,\n              routing: routingConfig,\n              database: config.database,\n              impersonatedUser: config.impersonatedUser,\n              transactionConfig: config.transactionConfig\n            }, query, parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _d.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Verifies connectivity of this driver by trying to open a connection with the provided driver options.\n   *\n   * @deprecated This return of this method will change in 6.0.0 to not async return the {@link ServerInfo} and\n   * async return {@link void} instead. If you need to use the server info, use {@link getServerInfo} instead.\n   *\n   * @public\n   * @param {Object} param - The object parameter\n   * @param {string} param.database - The target database to verify connectivity for.\n   * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n   */\n\n\n  Driver.prototype.verifyConnectivity = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.database,\n        database = _c === void 0 ? '' : _c;\n\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.verifyConnectivityAndGetServerInfo({\n      database: database,\n      accessMode: READ\n    });\n  };\n  /**\n   * This method verifies the authorization credentials work by trying to acquire a connection\n   * to one of the servers with the given credentials.\n   *\n   * @param {object} param - object parameter\n   * @property {AuthToken} param.auth - the target auth for the to-be-acquired connection\n   * @property {string} param.database - the target database for the to-be-acquired connection\n   *\n   * @returns {Promise<boolean>} promise resolved with true if succeed, false if failed with\n   *  authentication issue and rejected with error if non-authentication error happens.\n   */\n\n\n  Driver.prototype.verifyAuthentication = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        database = _b.database,\n        auth = _b.auth;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var connectionProvider;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            connectionProvider = this._getOrCreateConnectionProvider();\n            return [4\n            /*yield*/\n            , connectionProvider.verifyAuthentication({\n              database: database !== null && database !== void 0 ? database : 'system',\n              auth: auth,\n              accessMode: READ\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _c.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Get ServerInfo for the giver database.\n   *\n   * @param {Object} param - The object parameter\n   * @param {string} param.database - The target database to verify connectivity for.\n   * @returns {Promise<ServerInfo>} promise resolved with the ServerInfo or rejected with error.\n   */\n\n\n  Driver.prototype.getServerInfo = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.database,\n        database = _c === void 0 ? '' : _c;\n\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.verifyConnectivityAndGetServerInfo({\n      database: database,\n      accessMode: READ\n    });\n  };\n  /**\n   * Returns whether the server supports multi database capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n\n\n  Driver.prototype.supportsMultiDb = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.supportsMultiDb();\n  };\n  /**\n   * Returns whether the server supports transaction config capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n\n\n  Driver.prototype.supportsTransactionConfig = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.supportsTransactionConfig();\n  };\n  /**\n   * Returns whether the server supports user impersonation capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n\n\n  Driver.prototype.supportsUserImpersonation = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.supportsUserImpersonation();\n  };\n  /**\n   * Returns whether the driver session re-auth functionality capabilities based on the protocol\n   * version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n   */\n\n\n  Driver.prototype.supportsSessionAuth = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.supportsSessionAuth();\n  };\n  /**\n   * Returns the protocol version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<number>} the protocol version negotiated via handshake.\n   * @throws {Error} When protocol negotiation fails\n   */\n\n\n  Driver.prototype.getNegotiatedProtocolVersion = function () {\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    return connectionProvider.getNegotiatedProtocolVersion();\n  };\n  /**\n   * Returns boolean to indicate if driver has been configured with encryption enabled.\n   *\n   * @returns {boolean}\n   */\n\n\n  Driver.prototype.isEncrypted = function () {\n    return this._isEncrypted();\n  };\n  /**\n   * @protected\n   * @returns {boolean}\n   */\n\n\n  Driver.prototype._supportsRouting = function () {\n    return this._meta.routing;\n  };\n  /**\n   * Returns boolean to indicate if driver has been configured with encryption enabled.\n   *\n   * @protected\n   * @returns {boolean}\n   */\n\n\n  Driver.prototype._isEncrypted = function () {\n    return this._config.encrypted === util_1.ENCRYPTION_ON || this._config.encrypted === true;\n  };\n  /**\n   * Returns the configured trust strategy that the driver has been configured with.\n   *\n   * @protected\n   * @returns {TrustStrategy}\n   */\n\n\n  Driver.prototype._getTrust = function () {\n    return this._config.trust;\n  };\n  /**\n   * Acquire a session to communicate with the database. The session will\n   * borrow connections from the underlying connection pool as required and\n   * should be considered lightweight and disposable.\n   *\n   * This comes with some responsibility - make sure you always call\n   * {@link close} when you are done using a session, and likewise,\n   * make sure you don't close your session before you are done using it. Once\n   * it is closed, the underlying connection will be released to the connection\n   * pool and made available for others to use.\n   *\n   * @public\n   * @param {SessionConfig} param - The session configuration\n   * @return {Session} new session.\n   */\n\n\n  Driver.prototype.session = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.defaultAccessMode,\n        defaultAccessMode = _c === void 0 ? WRITE : _c,\n        bookmarkOrBookmarks = _b.bookmarks,\n        _d = _b.database,\n        database = _d === void 0 ? '' : _d,\n        impersonatedUser = _b.impersonatedUser,\n        fetchSize = _b.fetchSize,\n        bookmarkManager = _b.bookmarkManager,\n        notificationFilter = _b.notificationFilter,\n        auth = _b.auth;\n\n    return this._newSession({\n      defaultAccessMode: defaultAccessMode,\n      bookmarkOrBookmarks: bookmarkOrBookmarks,\n      database: database,\n      reactive: false,\n      impersonatedUser: impersonatedUser,\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize),\n      bookmarkManager: bookmarkManager,\n      notificationFilter: notificationFilter,\n      auth: auth\n    });\n  };\n  /**\n   * Close all open sessions and other associated resources. You should\n   * make sure to use this when you are done with this driver instance.\n   * @public\n   * @return {Promise<void>} promise resolved when the driver is closed.\n   */\n\n\n  Driver.prototype.close = function () {\n    this._log.info(\"Driver \".concat(this._id, \" closing\"));\n\n    if (this._connectionProvider != null) {\n      return this._connectionProvider.close();\n    }\n\n    return Promise.resolve();\n  }; // eslint-disable-next-line\n  // @ts-ignore\n\n\n  Driver.prototype[Symbol.asyncDispose] = function () {\n    return this.close();\n  };\n  /**\n   * @protected\n   * @returns {void}\n   */\n\n\n  Driver.prototype._afterConstruction = function () {\n    this._log.info(\"\".concat(this._meta.typename, \" driver \").concat(this._id, \" created for server address \").concat(this._meta.address.toString()));\n  };\n  /**\n   * @private\n   */\n\n\n  Driver.prototype._newSession = function (_a) {\n    var defaultAccessMode = _a.defaultAccessMode,\n        bookmarkOrBookmarks = _a.bookmarkOrBookmarks,\n        database = _a.database,\n        reactive = _a.reactive,\n        impersonatedUser = _a.impersonatedUser,\n        fetchSize = _a.fetchSize,\n        bookmarkManager = _a.bookmarkManager,\n        notificationFilter = _a.notificationFilter,\n        auth = _a.auth;\n\n    var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);\n\n    var connectionProvider = this._getOrCreateConnectionProvider();\n\n    var bookmarks = bookmarkOrBookmarks != null ? new bookmarks_1.Bookmarks(bookmarkOrBookmarks) : bookmarks_1.Bookmarks.empty();\n    return this._createSession({\n      mode: sessionMode,\n      database: database !== null && database !== void 0 ? database : '',\n      connectionProvider: connectionProvider,\n      bookmarks: bookmarks,\n      config: this._config,\n      reactive: reactive,\n      impersonatedUser: impersonatedUser,\n      fetchSize: fetchSize,\n      bookmarkManager: bookmarkManager,\n      notificationFilter: notificationFilter,\n      auth: auth,\n      log: this._log\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  Driver.prototype._getOrCreateConnectionProvider = function () {\n    if (this._connectionProvider == null) {\n      this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));\n    }\n\n    return this._connectionProvider;\n  };\n\n  return Driver;\n}();\n\nexports.Driver = Driver;\n/**\n * @private\n * @returns {Object} the given config.\n */\n\nfunction validateConfig(config, log) {\n  var resolver = config.resolver;\n\n  if (resolver !== null && resolver !== undefined && typeof resolver !== 'function') {\n    throw new TypeError(\"Configured resolver should be a function. Got: \".concat(typeof resolver));\n  }\n\n  if (config.connectionAcquisitionTimeout < config.connectionTimeout) {\n    log.warn('Configuration for \"connectionAcquisitionTimeout\" should be greater than ' + 'or equal to \"connectionTimeout\". Otherwise, the connection acquisition ' + 'timeout will take precedence for over the connection timeout in scenarios ' + 'where a new connection is created while it is acquired');\n  }\n\n  return config;\n}\n/**\n * @private\n */\n\n\nfunction sanitizeConfig(config) {\n  config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);\n  config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);\n  config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);\n  config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);\n  config.connectionTimeout = extractConnectionTimeout(config);\n  config.connectionLivenessCheckTimeout = validateConnectionLivenessCheckTimeoutSizeValue(config.connectionLivenessCheckTimeout);\n}\n/**\n * @private\n */\n\n\nfunction sanitizeIntValue(rawValue, defaultWhenAbsent) {\n  var sanitizedValue = parseInt(rawValue, 10);\n\n  if (sanitizedValue > 0 || sanitizedValue === 0) {\n    return sanitizedValue;\n  } else if (sanitizedValue < 0) {\n    return Number.MAX_SAFE_INTEGER;\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n/**\n * @private\n */\n\n\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n  var fetchSize = parseInt(rawValue, 10);\n\n  if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {\n    return fetchSize;\n  } else if (fetchSize === 0 || fetchSize < 0) {\n    throw new Error(\"The fetch size can only be a positive value or \".concat(constants_1.FETCH_ALL, \" for ALL. However fetchSize = \").concat(fetchSize));\n  } else {\n    return defaultWhenAbsent;\n  }\n}\n/**\n * @private\n */\n\n\nfunction extractConnectionTimeout(config) {\n  var configuredTimeout = parseInt(config.connectionTimeout, 10);\n\n  if (configuredTimeout === 0) {\n    // timeout explicitly configured to 0\n    return null;\n  } else if (!isNaN(configuredTimeout) && configuredTimeout < 0) {\n    // timeout explicitly configured to a negative value\n    return null;\n  } else if (isNaN(configuredTimeout)) {\n    // timeout not configured, use default value\n    return constants_1.DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n  } else {\n    // timeout configured, use the provided value\n    return configuredTimeout;\n  }\n}\n/**\n * @private\n */\n\n\nfunction validateConnectionLivenessCheckTimeoutSizeValue(rawValue) {\n  if (rawValue == null) {\n    return undefined;\n  }\n\n  var connectionLivenessCheckTimeout = parseInt(rawValue, 10);\n\n  if (connectionLivenessCheckTimeout < 0 || Number.isNaN(connectionLivenessCheckTimeout)) {\n    throw new Error(\"The connectionLivenessCheckTimeout can only be a positive value or 0 for always. However connectionLivenessCheckTimeout = \".concat(connectionLivenessCheckTimeout));\n  }\n\n  return connectionLivenessCheckTimeout;\n}\n/**\n * @private\n * @returns {ConfiguredCustomResolver} new custom resolver that wraps the passed-in resolver function.\n *              If resolved function is not specified, it defaults to an identity resolver.\n */\n\n\nfunction createHostNameResolver(config) {\n  return new configured_custom_resolver_1.default(config.resolver);\n}\n\nexports.default = Driver;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__importDefault","mod","__esModule","Object","defineProperty","exports","QueryConfig","SessionConfig","routing","WRITE","READ","Driver","bookmarks_1","require","configured_custom_resolver_1","constants_1","logger_1","session_1","util_1","bookmark_manager_1","result_transformers_1","query_executor_1","error_1","DEFAULT_MAX_CONNECTION_LIFETIME","DEFAULT_FETCH_SIZE","ACCESS_MODE_READ","ACCESS_MODE_WRITE","idGenerator","defaultAccessMode","bookmarks","database","impersonatedUser","undefined","auth","fetchSize","bookmarkManager","notificationFilter","ROUTING_WRITE","ROUTING_READ","freeze","resultTransformer","transactionConfig","meta","config","createConnectionProvider","createSession","createQueryExecutor","args","default","sanitizeConfig","log","Logger","create","validateConfig","_id","_meta","_config","_log","_createConnectionProvider","_createSession","_defaultExecuteQueryBookmarkManager","_queryExecutor","session","bind","_connectionProvider","_afterConstruction","prototype","get","enumerable","configurable","executeQuery","query","parameters","_a","_b","_c","routingConfig","_d","executeQueryBookmarkManager","eagerResultTransformer","newError","concat","execute","verifyConnectivity","connectionProvider","_getOrCreateConnectionProvider","verifyConnectivityAndGetServerInfo","accessMode","verifyAuthentication","getServerInfo","supportsMultiDb","supportsTransactionConfig","supportsUserImpersonation","supportsSessionAuth","getNegotiatedProtocolVersion","isEncrypted","_isEncrypted","_supportsRouting","encrypted","ENCRYPTION_ON","_getTrust","trust","bookmarkOrBookmarks","_newSession","reactive","validateFetchSizeValue","close","info","asyncDispose","typename","address","toString","sessionMode","_validateSessionMode","Bookmarks","empty","mode","createHostNameResolver","resolver","connectionAcquisitionTimeout","connectionTimeout","warn","maxConnectionLifetime","sanitizeIntValue","maxConnectionPoolSize","DEFAULT_POOL_MAX_SIZE","DEFAULT_POOL_ACQUISITION_TIMEOUT","extractConnectionTimeout","connectionLivenessCheckTimeout","validateConnectionLivenessCheckTimeoutSizeValue","rawValue","defaultWhenAbsent","sanitizedValue","parseInt","Number","MAX_SAFE_INTEGER","FETCH_ALL","Error","configuredTimeout","isNaN","DEFAULT_CONNECTION_TIMEOUT_MILLIS"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-core/lib/driver.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.QueryConfig = exports.SessionConfig = exports.routing = exports.WRITE = exports.READ = exports.Driver = void 0;\nvar bookmarks_1 = require(\"./internal/bookmarks\");\nvar configured_custom_resolver_1 = __importDefault(require(\"./internal/resolver/configured-custom-resolver\"));\nvar constants_1 = require(\"./internal/constants\");\nvar logger_1 = require(\"./internal/logger\");\nvar session_1 = __importDefault(require(\"./session\"));\nvar util_1 = require(\"./internal/util\");\nvar bookmark_manager_1 = require(\"./bookmark-manager\");\nvar result_transformers_1 = __importDefault(require(\"./result-transformers\"));\nvar query_executor_1 = __importDefault(require(\"./internal/query-executor\"));\nvar error_1 = require(\"./error\");\nvar DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1000; // 1 hour\n/**\n * The default record fetch size. This is used in Bolt V4 protocol to pull query execution result in batches.\n * @type {number}\n */\nvar DEFAULT_FETCH_SIZE = 1000;\n/**\n * Constant that represents read session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.READ })`.\n * @type {string}\n */\nvar READ = constants_1.ACCESS_MODE_READ;\nexports.READ = READ;\n/**\n * Constant that represents write session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.WRITE })`.\n * @type {string}\n */\nvar WRITE = constants_1.ACCESS_MODE_WRITE;\nexports.WRITE = WRITE;\nvar idGenerator = 0;\n/**\n * The session configuration\n *\n * @interface\n */\nvar SessionConfig = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function SessionConfig() {\n        /**\n         * The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n         * **Default**: {@link WRITE}\n         * @type {string}\n         */\n        this.defaultAccessMode = WRITE;\n        /**\n         * The initial reference or references to some previous\n         * transactions. Value is optional and absence indicates that that the bookmarks do not exist or are unknown.\n         * @type {string|string[]|undefined}\n         */\n        this.bookmarks = [];\n        /**\n         * The database this session will operate on.\n         *\n         * This option has no explicit value by default, but it is recommended to set\n         * one if the target database is known in advance. This has the benefit of\n         * ensuring a consistent target database name throughout the session in a\n         * straightforward way and potentially simplifies driver logic as well as\n         * reduces network communication resulting in better performance.\n         *\n         * Usage of Cypher clauses like USE is not a replacement for this option.\n         * The driver does not parse any Cypher.\n         *\n         * When no explicit name is set, the driver behavior depends on the connection\n         * URI scheme supplied to the driver on instantiation and Bolt protocol\n         * version.\n         *\n         * Specifically, the following applies:\n         *\n         * - **bolt schemes** - queries are dispatched to the server for execution\n         *   without explicit database name supplied, meaning that the target database\n         *   name for query execution is determined by the server. It is important to\n         *   note that the target database may change (even within the same session),\n         *   for instance if the user's home database is changed on the server.\n         *\n         * - **neo4j schemes** - providing that Bolt protocol version 4.4, which was\n         *   introduced with Neo4j server 4.4, or above is available, the driver\n         *   fetches the user's home database name from the server on first query\n         *   execution within the session and uses the fetched database name\n         *   explicitly for all queries executed within the session. This ensures that\n         *   the database name remains consistent within the given session. For\n         *   instance, if the user's home database name is 'movies' and the server\n         *   supplies it to the driver upon database name fetching for the session,\n         *   all queries within that session are executed with the explicit database\n         *   name 'movies' supplied. Any change to the userâ€™s home database is\n         *   reflected only in sessions created after such change takes effect. This\n         *   behavior requires additional network communication. In clustered\n         *   environments, it is strongly recommended to avoid a single point of\n         *   failure. For instance, by ensuring that the connection URI resolves to\n         *   multiple endpoints. For older Bolt protocol versions the behavior is the\n         *   same as described for the **bolt schemes** above.\n         *\n         * @type {string|undefined}\n         */\n        this.database = '';\n        /**\n         * The username which the user wants to impersonate for the duration of the session.\n         *\n         * @type {string|undefined}\n         */\n        this.impersonatedUser = undefined;\n        /**\n         * The {@link AuthToken} which will be used for the duration of the session.\n         *\n         * By default, the session will use connections authenticated with {@link AuthToken} configured in the\n         * driver creation. This configuration allows switch user and/or authorization information for the\n         * session lifetime.\n         *\n         * **Warning**: This option is only enable when the driver is connected with Neo4j Database servers\n         * which supports Bolt 5.1 and onwards.\n         *\n         * @type {AuthToken|undefined}\n         * @see {@link driver}\n         */\n        this.auth = undefined;\n        /**\n         * The record fetch size of each batch of this session.\n         *\n         * Use {@link FETCH_ALL} to always pull all records in one batch. This will override the config value set on driver config.\n         *\n         * @type {number|undefined}\n         */\n        this.fetchSize = undefined;\n        /**\n         * Configure a BookmarkManager for the session to use\n         *\n         * A BookmarkManager is a piece of software responsible for keeping casual consistency between different sessions by sharing bookmarks\n         * between the them.\n         * Enabling it is done by supplying an BookmarkManager implementation instance to this param.\n         * A default implementation could be acquired by calling the factory function {@link bookmarkManager}.\n         *\n         * **Warning**: Sharing the same BookmarkManager instance across multiple sessions can have a negative impact\n         * on performance since all the queries will wait for the latest changes being propagated across the cluster.\n         * For keeping consistency between a group of queries, use {@link Session} for grouping them.\n         * For keeping consistency between a group of sessions, use {@link BookmarkManager} instance for grouping them.\n         *\n         * @example\n         * const bookmarkManager = neo4j.bookmarkManager()\n         * const linkedSession1 = driver.session({ database:'neo4j', bookmarkManager })\n         * const linkedSession2 = driver.session({ database:'neo4j', bookmarkManager })\n         * const unlinkedSession = driver.session({ database:'neo4j' })\n         *\n         * // Creating Driver User\n         * const createUserQueryResult = await linkedSession1.run('CREATE (p:Person {name: $name})', { name: 'Driver User'})\n         *\n         * // Reading Driver User will *NOT* wait of the changes being propagated to the server before RUN the query\n         * // So the 'Driver User' person might not exist in the Result\n         * const unlinkedReadResult = await unlinkedSession.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})\n         *\n         * // Reading Driver User will wait of the changes being propagated to the server before RUN the query\n         * // So the 'Driver User' person should exist in the Result, unless deleted.\n         * const linkedResult = await linkedSession2.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})\n         *\n         * await linkedSession1.close()\n         * await linkedSession2.close()\n         * await unlinkedSession.close()\n         *\n         * @type {BookmarkManager|undefined}\n         * @since 5.0\n         */\n        this.bookmarkManager = undefined;\n        /**\n         * Configure filter for {@link Notification} objects returned in {@link ResultSummary#notifications}.\n         *\n         * This configuration enables filter notifications by:\n         *\n         * * the minimum severity level ({@link NotificationFilterMinimumSeverityLevel})\n         * * disabling notification categories ({@link NotificationFilterDisabledCategory})\n         *\n         *\n         * Disabling notifications can be done by defining the minimum severity level to 'OFF'.\n         * At driver level, when omitted, uses the server's default.\n         * At session level, when omitted, defaults to what filters have been configured at driver level.\n         *\n         * Disabling categories or severities allows the server to skip analysis for those, which can speed up query\n         * execution.\n         *\n         * @example\n         * // enabling warning notification, but disabling `HINT` and `DEPRECATION` notifications.\n         * const session = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.WARNING, // or 'WARNING\n         *         disabledCategories: [\n         *             neo4j.notificationFilterDisabledCategory.HINT, // or 'HINT'\n         *             neo4j.notificationFilterDisabledCategory.DEPRECATION // or 'DEPRECATION'\n         *        ]\n         *     }\n         * })\n         *\n         * @example\n         * // disabling notifications for a session\n         * const session = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.OFF // or 'OFF'\n         *     }\n         * })\n         *\n         * @example\n         * // using default values configured in the driver\n         * const sessionWithDefaultValues = driver.session({ database: 'neo4j' })\n         * // or driver.session({ database: 'neo4j', notificationFilter: undefined })\n         *\n         * // using default minimum severity level, but disabling 'HINT' and 'UNRECOGNIZED'\n         * // notification categories\n         * const sessionWithDefaultSeverityLevel = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         disabledCategories: [\n         *             neo4j.notificationFilterDisabledCategory.HINT, // or 'HINT'\n         *             neo4j.notificationFilterDisabledCategory.UNRECOGNIZED // or 'UNRECOGNIZED'\n         *        ]\n         *     }\n         * })\n         *\n         * // using default disabled categories, but configuring minimum severity level to 'WARNING'\n         * const sessionWithDefaultSeverityLevel = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.WARNING // or 'WARNING'\n         *     }\n         * })\n         *\n         * @type {NotificationFilter|undefined}\n         * @since 5.7\n         */\n        this.notificationFilter = undefined;\n    }\n    return SessionConfig;\n}());\nexports.SessionConfig = SessionConfig;\nvar ROUTING_WRITE = 'WRITE';\nvar ROUTING_READ = 'READ';\n/**\n * @typedef {'WRITE'|'READ'} RoutingControl\n */\n/**\n * Constants that represents routing modes.\n *\n * @example\n * driver.executeQuery(\"<QUERY>\", <PARAMETERS>, { routing: neo4j.routing.WRITE })\n */\nvar routing = {\n    WRITE: ROUTING_WRITE,\n    READ: ROUTING_READ\n};\nexports.routing = routing;\nObject.freeze(routing);\n/**\n * The query configuration\n * @interface\n */\nvar QueryConfig = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function QueryConfig() {\n        /**\n         * Define the type of cluster member the query will be routed to.\n         *\n         * @type {RoutingControl}\n         */\n        this.routing = routing.WRITE;\n        /**\n         * Define the transformation will be applied to the Result before return from the\n         * query method.\n         *\n         * @type {ResultTransformer}\n         * @see {@link resultTransformers} for provided implementations.\n         */\n        this.resultTransformer = undefined;\n        /**\n         * The database this session will operate on.\n         *\n         * @type {string|undefined}\n         */\n        this.database = '';\n        /**\n         * The username which the user wants to impersonate for the duration of the query.\n         *\n         * @type {string|undefined}\n         */\n        this.impersonatedUser = undefined;\n        /**\n         * Configure a BookmarkManager for the session to use\n         *\n         * A BookmarkManager is a piece of software responsible for keeping casual consistency between different pieces of work by sharing bookmarks\n         * between the them.\n         *\n         * By default, it uses the driver's non mutable driver level bookmark manager. See, {@link Driver.executeQueryBookmarkManager}\n         *\n         * Can be set to null to disable causal chaining.\n         * @type {BookmarkManager|undefined|null}\n         */\n        this.bookmarkManager = undefined;\n        /**\n         * Configuration for all transactions started to execute the query.\n         *\n         * @type {TransactionConfig|undefined}\n         *\n         */\n        this.transactionConfig = undefined;\n    }\n    return QueryConfig;\n}());\nexports.QueryConfig = QueryConfig;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\nvar Driver = /** @class */ (function () {\n    /**\n     * You should not be calling this directly, instead use {@link driver}.\n     * @constructor\n     * @protected\n     * @param {Object} meta Metainformation about the driver\n     * @param {Object} config\n     * @param {function(id: number, config:Object, log:Logger, hostNameResolver: ConfiguredCustomResolver): ConnectionProvider } createConnectionProvider Creates the connection provider\n     * @param {function(args): Session } createSession Creates the a session\n    */\n    function Driver(meta, config, createConnectionProvider, createSession, createQueryExecutor) {\n        if (config === void 0) { config = {}; }\n        if (createSession === void 0) { createSession = function (args) { return new session_1.default(args); }; }\n        if (createQueryExecutor === void 0) { createQueryExecutor = function (createSession) { return new query_executor_1.default(createSession); }; }\n        sanitizeConfig(config);\n        var log = logger_1.Logger.create(config);\n        validateConfig(config, log);\n        this._id = idGenerator++;\n        this._meta = meta;\n        this._config = config;\n        this._log = log;\n        this._createConnectionProvider = createConnectionProvider;\n        this._createSession = createSession;\n        this._defaultExecuteQueryBookmarkManager = (0, bookmark_manager_1.bookmarkManager)();\n        this._queryExecutor = createQueryExecutor(this.session.bind(this));\n        /**\n         * Reference to the connection provider. Initialized lazily by {@link _getOrCreateConnectionProvider}.\n         * @type {ConnectionProvider}\n         * @protected\n         */\n        this._connectionProvider = null;\n        this._afterConstruction();\n    }\n    Object.defineProperty(Driver.prototype, \"executeQueryBookmarkManager\", {\n        /**\n         * The bookmark managed used by {@link Driver.executeQuery}\n         *\n         * @type {BookmarkManager}\n         */\n        get: function () {\n            return this._defaultExecuteQueryBookmarkManager;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Executes a query in a retriable context and returns a {@link EagerResult}.\n     *\n     * This method is a shortcut for a {@link Session#executeRead} and {@link Session#executeWrite}.\n     *\n     * NOTE: Because it is an explicit transaction from the server point of view, Cypher queries using\n     * \"CALL {} IN TRANSACTIONS\" or the older \"USING PERIODIC COMMIT\" construct will not work (call\n     * {@link Session#run} for these).\n     *\n     * @example\n     * // Run a simple write query\n     * const { keys, records, summary } = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'})\n     *\n     * @example\n     * // Run a read query\n     * const { keys, records, summary } = await driver.executeQuery(\n     *    'MATCH (p:Person{ name: $name }) RETURN p',\n     *    { name: 'Person1'},\n     *    { routing: neo4j.routing.READ})\n     *\n     * @example\n     * // Run a read query returning a Person Nodes per elementId\n     * const peopleMappedById = await driver.executeQuery(\n     *    'MATCH (p:Person{ name: $name }) RETURN p',\n     *    { name: 'Person1'},\n     *    {\n     *      resultTransformer: neo4j.resultTransformers.mappedResultTransformer({\n     *        map(record) {\n     *          const p = record.get('p')\n     *          return [p.elementId, p]\n     *        },\n     *        collect(elementIdPersonPairArray) {\n     *          return new Map(elementIdPersonPairArray)\n     *        }\n     *      })\n     *    }\n     * )\n     *\n     * const person = peopleMappedById.get(\"<ELEMENT_ID>\")\n     *\n     * @example\n     * // these lines\n     * const transformedResult = await driver.executeQuery(\n     *    \"<QUERY>\",\n     *    <PARAMETERS>,\n     *    {\n     *       routing: neo4j.routing.WRITE,\n     *       resultTransformer: transformer,\n     *       database: \"<DATABASE>\",\n     *       impersonatedUser: \"<USER>\",\n     *       bookmarkManager: bookmarkManager\n     *    })\n     * // are equivalent to those\n     * const session = driver.session({\n     *    database: \"<DATABASE>\",\n     *    impersonatedUser: \"<USER>\",\n     *    bookmarkManager: bookmarkManager\n     * })\n     *\n     * try {\n     *    const transformedResult = await session.executeWrite(tx => {\n     *        const result = tx.run(\"<QUERY>\", <PARAMETERS>)\n     *        return transformer(result)\n     *    })\n     * } finally {\n     *    await session.close()\n     * }\n     *\n     * @public\n     * @param {string | {text: string, parameters?: object}} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in the query\n     * @param {QueryConfig<T>} config - The query configuration\n     * @returns {Promise<T>}\n     *\n     * @see {@link resultTransformers} for provided result transformers.\n     */\n    Driver.prototype.executeQuery = function (query, parameters, config) {\n        var _a, _b, _c;\n        if (config === void 0) { config = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var bookmarkManager, resultTransformer, routingConfig;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        bookmarkManager = config.bookmarkManager === null ? undefined : ((_a = config.bookmarkManager) !== null && _a !== void 0 ? _a : this.executeQueryBookmarkManager);\n                        resultTransformer = ((_b = config.resultTransformer) !== null && _b !== void 0 ? _b : result_transformers_1.default.eagerResultTransformer());\n                        routingConfig = (_c = config.routing) !== null && _c !== void 0 ? _c : routing.WRITE;\n                        if (routingConfig !== routing.READ && routingConfig !== routing.WRITE) {\n                            throw (0, error_1.newError)(\"Illegal query routing config: \\\"\".concat(routingConfig, \"\\\"\"));\n                        }\n                        return [4 /*yield*/, this._queryExecutor.execute({\n                                resultTransformer: resultTransformer,\n                                bookmarkManager: bookmarkManager,\n                                routing: routingConfig,\n                                database: config.database,\n                                impersonatedUser: config.impersonatedUser,\n                                transactionConfig: config.transactionConfig\n                            }, query, parameters)];\n                    case 1: return [2 /*return*/, _d.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Verifies connectivity of this driver by trying to open a connection with the provided driver options.\n     *\n     * @deprecated This return of this method will change in 6.0.0 to not async return the {@link ServerInfo} and\n     * async return {@link void} instead. If you need to use the server info, use {@link getServerInfo} instead.\n     *\n     * @public\n     * @param {Object} param - The object parameter\n     * @param {string} param.database - The target database to verify connectivity for.\n     * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n     */\n    Driver.prototype.verifyConnectivity = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.verifyConnectivityAndGetServerInfo({ database: database, accessMode: READ });\n    };\n    /**\n     * This method verifies the authorization credentials work by trying to acquire a connection\n     * to one of the servers with the given credentials.\n     *\n     * @param {object} param - object parameter\n     * @property {AuthToken} param.auth - the target auth for the to-be-acquired connection\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     *\n     * @returns {Promise<boolean>} promise resolved with true if succeed, false if failed with\n     *  authentication issue and rejected with error if non-authentication error happens.\n     */\n    Driver.prototype.verifyAuthentication = function (_a) {\n        var _b = _a === void 0 ? {} : _a, database = _b.database, auth = _b.auth;\n        return __awaiter(this, void 0, void 0, function () {\n            var connectionProvider;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        connectionProvider = this._getOrCreateConnectionProvider();\n                        return [4 /*yield*/, connectionProvider.verifyAuthentication({\n                                database: database !== null && database !== void 0 ? database : 'system',\n                                auth: auth,\n                                accessMode: READ\n                            })];\n                    case 1: return [2 /*return*/, _c.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Get ServerInfo for the giver database.\n     *\n     * @param {Object} param - The object parameter\n     * @param {string} param.database - The target database to verify connectivity for.\n     * @returns {Promise<ServerInfo>} promise resolved with the ServerInfo or rejected with error.\n     */\n    Driver.prototype.getServerInfo = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.verifyConnectivityAndGetServerInfo({ database: database, accessMode: READ });\n    };\n    /**\n     * Returns whether the server supports multi database capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsMultiDb = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsMultiDb();\n    };\n    /**\n     * Returns whether the server supports transaction config capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsTransactionConfig = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsTransactionConfig();\n    };\n    /**\n     * Returns whether the server supports user impersonation capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsUserImpersonation = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsUserImpersonation();\n    };\n    /**\n     * Returns whether the driver session re-auth functionality capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsSessionAuth = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsSessionAuth();\n    };\n    /**\n     * Returns the protocol version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<number>} the protocol version negotiated via handshake.\n     * @throws {Error} When protocol negotiation fails\n     */\n    Driver.prototype.getNegotiatedProtocolVersion = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.getNegotiatedProtocolVersion();\n    };\n    /**\n     * Returns boolean to indicate if driver has been configured with encryption enabled.\n     *\n     * @returns {boolean}\n     */\n    Driver.prototype.isEncrypted = function () {\n        return this._isEncrypted();\n    };\n    /**\n     * @protected\n     * @returns {boolean}\n     */\n    Driver.prototype._supportsRouting = function () {\n        return this._meta.routing;\n    };\n    /**\n     * Returns boolean to indicate if driver has been configured with encryption enabled.\n     *\n     * @protected\n     * @returns {boolean}\n     */\n    Driver.prototype._isEncrypted = function () {\n        return this._config.encrypted === util_1.ENCRYPTION_ON || this._config.encrypted === true;\n    };\n    /**\n     * Returns the configured trust strategy that the driver has been configured with.\n     *\n     * @protected\n     * @returns {TrustStrategy}\n     */\n    Driver.prototype._getTrust = function () {\n        return this._config.trust;\n    };\n    /**\n     * Acquire a session to communicate with the database. The session will\n     * borrow connections from the underlying connection pool as required and\n     * should be considered lightweight and disposable.\n     *\n     * This comes with some responsibility - make sure you always call\n     * {@link close} when you are done using a session, and likewise,\n     * make sure you don't close your session before you are done using it. Once\n     * it is closed, the underlying connection will be released to the connection\n     * pool and made available for others to use.\n     *\n     * @public\n     * @param {SessionConfig} param - The session configuration\n     * @return {Session} new session.\n     */\n    Driver.prototype.session = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.defaultAccessMode, defaultAccessMode = _c === void 0 ? WRITE : _c, bookmarkOrBookmarks = _b.bookmarks, _d = _b.database, database = _d === void 0 ? '' : _d, impersonatedUser = _b.impersonatedUser, fetchSize = _b.fetchSize, bookmarkManager = _b.bookmarkManager, notificationFilter = _b.notificationFilter, auth = _b.auth;\n        return this._newSession({\n            defaultAccessMode: defaultAccessMode,\n            bookmarkOrBookmarks: bookmarkOrBookmarks,\n            database: database,\n            reactive: false,\n            impersonatedUser: impersonatedUser,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize),\n            bookmarkManager: bookmarkManager,\n            notificationFilter: notificationFilter,\n            auth: auth\n        });\n    };\n    /**\n     * Close all open sessions and other associated resources. You should\n     * make sure to use this when you are done with this driver instance.\n     * @public\n     * @return {Promise<void>} promise resolved when the driver is closed.\n     */\n    Driver.prototype.close = function () {\n        this._log.info(\"Driver \".concat(this._id, \" closing\"));\n        if (this._connectionProvider != null) {\n            return this._connectionProvider.close();\n        }\n        return Promise.resolve();\n    };\n    // eslint-disable-next-line\n    // @ts-ignore\n    Driver.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    /**\n     * @protected\n     * @returns {void}\n     */\n    Driver.prototype._afterConstruction = function () {\n        this._log.info(\"\".concat(this._meta.typename, \" driver \").concat(this._id, \" created for server address \").concat(this._meta.address.toString()));\n    };\n    /**\n     * @private\n     */\n    Driver.prototype._newSession = function (_a) {\n        var defaultAccessMode = _a.defaultAccessMode, bookmarkOrBookmarks = _a.bookmarkOrBookmarks, database = _a.database, reactive = _a.reactive, impersonatedUser = _a.impersonatedUser, fetchSize = _a.fetchSize, bookmarkManager = _a.bookmarkManager, notificationFilter = _a.notificationFilter, auth = _a.auth;\n        var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        var bookmarks = bookmarkOrBookmarks != null\n            ? new bookmarks_1.Bookmarks(bookmarkOrBookmarks)\n            : bookmarks_1.Bookmarks.empty();\n        return this._createSession({\n            mode: sessionMode,\n            database: database !== null && database !== void 0 ? database : '',\n            connectionProvider: connectionProvider,\n            bookmarks: bookmarks,\n            config: this._config,\n            reactive: reactive,\n            impersonatedUser: impersonatedUser,\n            fetchSize: fetchSize,\n            bookmarkManager: bookmarkManager,\n            notificationFilter: notificationFilter,\n            auth: auth,\n            log: this._log\n        });\n    };\n    /**\n     * @private\n     */\n    Driver.prototype._getOrCreateConnectionProvider = function () {\n        if (this._connectionProvider == null) {\n            this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));\n        }\n        return this._connectionProvider;\n    };\n    return Driver;\n}());\nexports.Driver = Driver;\n/**\n * @private\n * @returns {Object} the given config.\n */\nfunction validateConfig(config, log) {\n    var resolver = config.resolver;\n    if (resolver !== null && resolver !== undefined && typeof resolver !== 'function') {\n        throw new TypeError(\"Configured resolver should be a function. Got: \".concat(typeof resolver));\n    }\n    if (config.connectionAcquisitionTimeout < config.connectionTimeout) {\n        log.warn('Configuration for \"connectionAcquisitionTimeout\" should be greater than ' +\n            'or equal to \"connectionTimeout\". Otherwise, the connection acquisition ' +\n            'timeout will take precedence for over the connection timeout in scenarios ' +\n            'where a new connection is created while it is acquired');\n    }\n    return config;\n}\n/**\n * @private\n */\nfunction sanitizeConfig(config) {\n    config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);\n    config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);\n    config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);\n    config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);\n    config.connectionTimeout = extractConnectionTimeout(config);\n    config.connectionLivenessCheckTimeout =\n        validateConnectionLivenessCheckTimeoutSizeValue(config.connectionLivenessCheckTimeout);\n}\n/**\n * @private\n */\nfunction sanitizeIntValue(rawValue, defaultWhenAbsent) {\n    var sanitizedValue = parseInt(rawValue, 10);\n    if (sanitizedValue > 0 || sanitizedValue === 0) {\n        return sanitizedValue;\n    }\n    else if (sanitizedValue < 0) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n    else {\n        return defaultWhenAbsent;\n    }\n}\n/**\n * @private\n */\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n    var fetchSize = parseInt(rawValue, 10);\n    if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {\n        return fetchSize;\n    }\n    else if (fetchSize === 0 || fetchSize < 0) {\n        throw new Error(\"The fetch size can only be a positive value or \".concat(constants_1.FETCH_ALL, \" for ALL. However fetchSize = \").concat(fetchSize));\n    }\n    else {\n        return defaultWhenAbsent;\n    }\n}\n/**\n * @private\n */\nfunction extractConnectionTimeout(config) {\n    var configuredTimeout = parseInt(config.connectionTimeout, 10);\n    if (configuredTimeout === 0) {\n        // timeout explicitly configured to 0\n        return null;\n    }\n    else if (!isNaN(configuredTimeout) && configuredTimeout < 0) {\n        // timeout explicitly configured to a negative value\n        return null;\n    }\n    else if (isNaN(configuredTimeout)) {\n        // timeout not configured, use default value\n        return constants_1.DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n    }\n    else {\n        // timeout configured, use the provided value\n        return configuredTimeout;\n    }\n}\n/**\n * @private\n */\nfunction validateConnectionLivenessCheckTimeoutSizeValue(rawValue) {\n    if (rawValue == null) {\n        return undefined;\n    }\n    var connectionLivenessCheckTimeout = parseInt(rawValue, 10);\n    if (connectionLivenessCheckTimeout < 0 || Number.isNaN(connectionLivenessCheckTimeout)) {\n        throw new Error(\"The connectionLivenessCheckTimeout can only be a positive value or 0 for always. However connectionLivenessCheckTimeout = \".concat(connectionLivenessCheckTimeout));\n    }\n    return connectionLivenessCheckTimeout;\n}\n/**\n * @private\n * @returns {ConfiguredCustomResolver} new custom resolver that wraps the passed-in resolver function.\n *              If resolved function is not specified, it defaults to an identity resolver.\n */\nfunction createHostNameResolver(config) {\n    return new configured_custom_resolver_1.default(config.resolver);\n}\nexports.default = Driver;\n"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgB,EAAhB;IACA;AACR;AACA;AACA;AACA;;IACQ,KAAKC,gBAAL,GAAwBC,SAAxB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKC,IAAL,GAAYD,SAAZ;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKE,SAAL,GAAiBF,SAAjB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKG,eAAL,GAAuBH,SAAvB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKI,kBAAL,GAA0BJ,SAA1B;EACH;;EACD,OAAOzB,aAAP;AACH,CArMkC,EAAnC;;AAsMAF,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACA,IAAI8B,aAAa,GAAG,OAApB;AACA,IAAIC,YAAY,GAAG,MAAnB;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAI9B,OAAO,GAAG;EACVC,KAAK,EAAE4B,aADG;EAEV3B,IAAI,EAAE4B;AAFI,CAAd;AAIAjC,OAAO,CAACG,OAAR,GAAkBA,OAAlB;AACAL,MAAM,CAACoC,MAAP,CAAc/B,OAAd;AACA;AACA;AACA;AACA;;A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"},"metadata":{},"sourceType":"script"}