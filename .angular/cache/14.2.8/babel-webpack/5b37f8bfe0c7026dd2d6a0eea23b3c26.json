{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable @typescript-eslint/promise-function-async */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Releasable = void 0;\n/**\n * Interface define a releasable resource shape\n *\n * @private\n * @interface\n */\n\nvar Releasable =\n/** @class */\nfunction () {\n  function Releasable() {}\n\n  Releasable.prototype.release = function () {\n    throw new Error('Not implemented');\n  };\n\n  return Releasable;\n}();\n\nexports.Releasable = Releasable;\n/**\n * Interface define a common way to acquire a connection\n *\n * @private\n */\n\nvar ConnectionProvider =\n/** @class */\nfunction () {\n  function ConnectionProvider() {}\n  /**\n   * This method acquires a connection against the specified database.\n   *\n   * Access mode and Bookmarks only applies to routing driver. Access mode only\n   * differentiates the target server for the connection, where WRITE selects a\n   * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\n   * is only passed to the routing discovery procedure, for the system database to\n   * synchronize on creation of databases and is never used in direct drivers.\n   *\n   * @param {object} param - object parameter\n   * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n   * @property {string} param.database - the target database for the to-be-acquired connection\n   * @property {Bookmarks} param.bookmarks - the bookmarks to send to routing discovery\n   * @property {string} param.impersonatedUser - the impersonated user\n   * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved\n   * @returns {Promise<Connection>}\n   */\n\n\n  ConnectionProvider.prototype.acquireConnection = function (param) {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method checks whether the backend database supports multi database functionality\n   * by checking protocol handshake result.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  ConnectionProvider.prototype.supportsMultiDb = function () {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method checks whether the backend database supports transaction config functionality\n   * by checking protocol handshake result.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  ConnectionProvider.prototype.supportsTransactionConfig = function () {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method checks whether the backend database supports transaction config functionality\n   * by checking protocol handshake result.\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  ConnectionProvider.prototype.supportsUserImpersonation = function () {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method checks whether the driver session re-auth functionality\n   * by checking protocol handshake result\n   *\n   * @returns {Promise<boolean>}\n   */\n\n\n  ConnectionProvider.prototype.supportsSessionAuth = function () {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method verifies the connectivity of the database by trying to acquire a connection\n   * for each server available in the cluster.\n   *\n   * @param {object} param - object parameter\n   * @property {string} param.database - the target database for the to-be-acquired connection\n   * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n   *\n   * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n   */\n\n\n  ConnectionProvider.prototype.verifyConnectivityAndGetServerInfo = function (param) {\n    throw Error('Not implemented');\n  };\n  /**\n   * This method verifies the authorization credentials work by trying to acquire a connection\n   * to one of the servers with the given credentials.\n   *\n   * @param {object} param - object parameter\n   * @property {AuthToken} param.auth - the target auth for the to-be-acquired connection\n   * @property {string} param.database - the target database for the to-be-acquired connection\n   * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n   *\n   * @returns {Promise<boolean>} promise resolved with true if succeed, false if failed with\n   *  authentication issue and rejected with error if non-authentication error happens.\n   */\n\n\n  ConnectionProvider.prototype.verifyAuthentication = function (param) {\n    throw Error('Not implemented');\n  };\n  /**\n   * Returns the protocol version negotiated via handshake.\n   *\n   * Note that this function call _always_ causes a round-trip to the server.\n   *\n   * @returns {Promise<number>} the protocol version negotiated via handshake.\n   * @throws {Error} When protocol negotiation fails\n   */\n\n\n  ConnectionProvider.prototype.getNegotiatedProtocolVersion = function () {\n    throw Error('Not Implemented');\n  };\n  /**\n   * Closes this connection provider along with its internals (connections, pools, etc.)\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  ConnectionProvider.prototype.close = function () {\n    throw Error('Not implemented');\n  };\n\n  return ConnectionProvider;\n}();\n\nexports.default = ConnectionProvider;","map":{"version":3,"names":["Object","defineProperty","exports","value","Releasable","prototype","release","Error","ConnectionProvider","acquireConnection","param","supportsMultiDb","supportsTransactionConfig","supportsUserImpersonation","supportsSessionAuth","verifyConnectivityAndGetServerInfo","verifyAuthentication","getNegotiatedProtocolVersion","close","default"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-core/lib/connection-provider.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/promise-function-async */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Releasable = void 0;\n/**\n * Interface define a releasable resource shape\n *\n * @private\n * @interface\n */\nvar Releasable = /** @class */ (function () {\n    function Releasable() {\n    }\n    Releasable.prototype.release = function () {\n        throw new Error('Not implemented');\n    };\n    return Releasable;\n}());\nexports.Releasable = Releasable;\n/**\n * Interface define a common way to acquire a connection\n *\n * @private\n */\nvar ConnectionProvider = /** @class */ (function () {\n    function ConnectionProvider() {\n    }\n    /**\n     * This method acquires a connection against the specified database.\n     *\n     * Access mode and Bookmarks only applies to routing driver. Access mode only\n     * differentiates the target server for the connection, where WRITE selects a\n     * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\n     * is only passed to the routing discovery procedure, for the system database to\n     * synchronize on creation of databases and is never used in direct drivers.\n     *\n     * @param {object} param - object parameter\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     * @property {Bookmarks} param.bookmarks - the bookmarks to send to routing discovery\n     * @property {string} param.impersonatedUser - the impersonated user\n     * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved\n     * @returns {Promise<Connection>}\n     */\n    ConnectionProvider.prototype.acquireConnection = function (param) {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports multi database functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsMultiDb = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports transaction config functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsTransactionConfig = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports transaction config functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsUserImpersonation = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the driver session re-auth functionality\n     * by checking protocol handshake result\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsSessionAuth = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method verifies the connectivity of the database by trying to acquire a connection\n     * for each server available in the cluster.\n     *\n     * @param {object} param - object parameter\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n     *\n     * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n     */\n    ConnectionProvider.prototype.verifyConnectivityAndGetServerInfo = function (param) {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method verifies the authorization credentials work by trying to acquire a connection\n     * to one of the servers with the given credentials.\n     *\n     * @param {object} param - object parameter\n     * @property {AuthToken} param.auth - the target auth for the to-be-acquired connection\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n     *\n     * @returns {Promise<boolean>} promise resolved with true if succeed, false if failed with\n     *  authentication issue and rejected with error if non-authentication error happens.\n     */\n    ConnectionProvider.prototype.verifyAuthentication = function (param) {\n        throw Error('Not implemented');\n    };\n    /**\n     * Returns the protocol version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<number>} the protocol version negotiated via handshake.\n     * @throws {Error} When protocol negotiation fails\n     */\n    ConnectionProvider.prototype.getNegotiatedProtocolVersion = function () {\n        throw Error('Not Implemented');\n    };\n    /**\n     * Closes this connection provider along with its internals (connections, pools, etc.)\n     *\n     * @returns {Promise<void>}\n     */\n    ConnectionProvider.prototype.close = function () {\n        throw Error('Not implemented');\n    };\n    return ConnectionProvider;\n}());\nexports.default = ConnectionProvider;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,UAAU;AAAG;AAAe,YAAY;EACxC,SAASA,UAAT,GAAsB,CACrB;;EACDA,UAAU,CAACC,SAAX,CAAqBC,OAArB,GAA+B,YAAY;IACvC,MAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;EACH,CAFD;;EAGA,OAAOH,UAAP;AACH,CAP+B,EAAhC;;AAQAF,OAAO,CAACE,UAAR,GAAqBA,UAArB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAII,kBAAkB;AAAG;AAAe,YAAY;EAChD,SAASA,kBAAT,GAA8B,CAC7B;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIA,kBAAkB,CAACH,SAAnB,CAA6BI,iBAA7B,GAAiD,UAAUC,KAAV,EAAiB;IAC9D,MAAMH,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6BM,eAA7B,GAA+C,YAAY;IACvD,MAAMJ,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6BO,yBAA7B,GAAyD,YAAY;IACjE,MAAML,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6BQ,yBAA7B,GAAyD,YAAY;IACjE,MAAMN,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6BS,mBAA7B,GAAmD,YAAY;IAC3D,MAAMP,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6BU,kCAA7B,GAAkE,UAAUL,KAAV,EAAiB;IAC/E,MAAMH,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6BW,oBAA7B,GAAoD,UAAUN,KAAV,EAAiB;IACjE,MAAMH,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6BY,4BAA7B,GAA4D,YAAY;IACpE,MAAMV,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;;;EACIC,kBAAkB,CAACH,SAAnB,CAA6Ba,KAA7B,GAAqC,YAAY;IAC7C,MAAMX,KAAK,CAAC,iBAAD,CAAX;EACH,CAFD;;EAGA,OAAOC,kBAAP;AACH,CA3GuC,EAAxC;;AA4GAN,OAAO,CAACiB,OAAR,GAAkBX,kBAAlB"},"metadata":{},"sourceType":"script"}