{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SIGNATURES = void 0;\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar _a = neo4j_driver_core_1.internal.constants,\n    ACCESS_MODE_READ = _a.ACCESS_MODE_READ,\n    FETCH_ALL = _a.FETCH_ALL,\n    assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\n\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\n\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\n\nvar RESET = 0x0f; // 0000 1111 // RESET\n\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\n\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\n\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\n\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\n\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\n\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\n\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\n\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\n\nvar TELEMETRY = 0x54; // 0101 0100 // TELEMETRY <api>\n\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\n\nvar LOGON = 0x6A; // LOGON\n\nvar LOGOFF = 0x6B; // LOGOFF\n\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\n\nvar PULL = 0x3f; // 0011 1111 // PULL\n\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\n\nvar NO_STATEMENT_ID = -1;\nvar SIGNATURES = Object.freeze({\n  INIT: INIT,\n  RESET: RESET,\n  RUN: RUN,\n  PULL_ALL: PULL_ALL,\n  HELLO: HELLO,\n  GOODBYE: GOODBYE,\n  BEGIN: BEGIN,\n  COMMIT: COMMIT,\n  ROLLBACK: ROLLBACK,\n  TELEMETRY: TELEMETRY,\n  ROUTE: ROUTE,\n  LOGON: LOGON,\n  LOGOFF: LOGOFF,\n  DISCARD: DISCARD,\n  PULL: PULL\n});\nexports.SIGNATURES = SIGNATURES;\n\nvar RequestMessage =\n/** @class */\nfunction () {\n  function RequestMessage(signature, fields, toString) {\n    this.signature = signature;\n    this.fields = fields;\n    this.toString = toString;\n  }\n  /**\n   * Create a new INIT message.\n   * @param {string} clientName the client name.\n   * @param {Object} authToken the authentication token.\n   * @return {RequestMessage} new INIT message.\n   */\n\n\n  RequestMessage.init = function (clientName, authToken) {\n    return new RequestMessage(INIT, [clientName, authToken], function () {\n      return \"INIT \".concat(clientName, \" {...}\");\n    });\n  };\n  /**\n   * Create a new RUN message.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @return {RequestMessage} new RUN message.\n   */\n\n\n  RequestMessage.run = function (query, parameters) {\n    return new RequestMessage(RUN, [query, parameters], function () {\n      return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters));\n    });\n  };\n  /**\n   * Get a PULL_ALL message.\n   * @return {RequestMessage} the PULL_ALL message.\n   */\n\n\n  RequestMessage.pullAll = function () {\n    return PULL_ALL_MESSAGE;\n  };\n  /**\n   * Get a RESET message.\n   * @return {RequestMessage} the RESET message.\n   */\n\n\n  RequestMessage.reset = function () {\n    return RESET_MESSAGE;\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {Object} authToken the authentication token.\n   * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n\n\n  RequestMessage.hello = function (userAgent, authToken, routing, patchs) {\n    if (routing === void 0) {\n      routing = null;\n    }\n\n    if (patchs === void 0) {\n      patchs = null;\n    }\n\n    var metadata = Object.assign({\n      user_agent: userAgent\n    }, authToken);\n\n    if (routing) {\n      metadata.routing = routing;\n    }\n\n    if (patchs) {\n      metadata.patch_bolt = patchs;\n    }\n\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\");\n    });\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n\n\n  RequestMessage.hello5x1 = function (userAgent, routing) {\n    if (routing === void 0) {\n      routing = null;\n    }\n\n    var metadata = {\n      user_agent: userAgent\n    };\n\n    if (routing) {\n      metadata.routing = routing;\n    }\n\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\");\n    });\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {NotificationFilter} notificationFilter the notification filter configured\n   * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n\n\n  RequestMessage.hello5x2 = function (userAgent, notificationFilter, routing) {\n    if (notificationFilter === void 0) {\n      notificationFilter = null;\n    }\n\n    if (routing === void 0) {\n      routing = null;\n    }\n\n    var metadata = {\n      user_agent: userAgent\n    };\n\n    if (notificationFilter) {\n      if (notificationFilter.minimumSeverityLevel) {\n        metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n      }\n\n      if (notificationFilter.disabledCategories) {\n        metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n      }\n    }\n\n    if (routing) {\n      metadata.routing = routing;\n    }\n\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Create a new HELLO message.\n   * @param {string} userAgent the user agent.\n   * @param {string} boltAgent the bolt agent.\n   * @param {NotificationFilter} notificationFilter the notification filter configured\n   * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n   * @return {RequestMessage} new HELLO message.\n   */\n\n\n  RequestMessage.hello5x3 = function (userAgent, boltAgent, notificationFilter, routing) {\n    if (notificationFilter === void 0) {\n      notificationFilter = null;\n    }\n\n    if (routing === void 0) {\n      routing = null;\n    }\n\n    var metadata = {};\n\n    if (userAgent) {\n      metadata.user_agent = userAgent;\n    }\n\n    if (boltAgent) {\n      metadata.bolt_agent = {\n        product: boltAgent.product,\n        platform: boltAgent.platform,\n        language: boltAgent.language,\n        language_details: boltAgent.languageDetails\n      };\n    }\n\n    if (notificationFilter) {\n      if (notificationFilter.minimumSeverityLevel) {\n        metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n      }\n\n      if (notificationFilter.disabledCategories) {\n        metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n      }\n    }\n\n    if (routing) {\n      metadata.routing = routing;\n    }\n\n    return new RequestMessage(HELLO, [metadata], function () {\n      return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Create a new LOGON message.\n   *\n   * @param {object} authToken The auth token\n   * @returns {RequestMessage} new LOGON message\n   */\n\n\n  RequestMessage.logon = function (authToken) {\n    return new RequestMessage(LOGON, [authToken], function () {\n      return 'LOGON { ... }';\n    });\n  };\n  /**\n   * Create a new LOGOFF message.\n   *\n   * @returns {RequestMessage} new LOGOFF message\n   */\n\n\n  RequestMessage.logoff = function () {\n    return new RequestMessage(LOGOFF, [], function () {\n      return 'LOGOFF';\n    });\n  };\n  /**\n   * Create a new BEGIN message.\n   * @param {Bookmarks} bookmarks the bookmarks.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @param {string} impersonatedUser the impersonated user.\n   * @param {NotificationFilter} notificationFilter the notification filter\n   * @return {RequestMessage} new BEGIN message.\n   */\n\n\n  RequestMessage.begin = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmarks = _b.bookmarks,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode,\n        impersonatedUser = _b.impersonatedUser,\n        notificationFilter = _b.notificationFilter;\n\n    var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n    return new RequestMessage(BEGIN, [metadata], function () {\n      return \"BEGIN \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Get a COMMIT message.\n   * @return {RequestMessage} the COMMIT message.\n   */\n\n\n  RequestMessage.commit = function () {\n    return COMMIT_MESSAGE;\n  };\n  /**\n   * Get a ROLLBACK message.\n   * @return {RequestMessage} the ROLLBACK message.\n   */\n\n\n  RequestMessage.rollback = function () {\n    return ROLLBACK_MESSAGE;\n  };\n  /**\n   * Create a new RUN message with additional metadata.\n   * @param {string} query the cypher query.\n   * @param {Object} parameters the query parameters.\n   * @param {Bookmarks} bookmarks the bookmarks.\n   * @param {TxConfig} txConfig the configuration.\n   * @param {string} database the database name.\n   * @param {string} mode the access mode.\n   * @param {string} impersonatedUser the impersonated user.\n   * @return {RequestMessage} new RUN message with additional metadata.\n   */\n\n\n  RequestMessage.runWithMetadata = function (query, parameters, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        bookmarks = _b.bookmarks,\n        txConfig = _b.txConfig,\n        database = _b.database,\n        mode = _b.mode,\n        impersonatedUser = _b.impersonatedUser,\n        notificationFilter = _b.notificationFilter;\n\n    var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n    return new RequestMessage(RUN, [query, parameters, metadata], function () {\n      return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters), \" \").concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Get a GOODBYE message.\n   * @return {RequestMessage} the GOODBYE message.\n   */\n\n\n  RequestMessage.goodbye = function () {\n    return GOODBYE_MESSAGE;\n  };\n  /**\n   * Generates a new PULL message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n\n\n  RequestMessage.pull = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.stmtId,\n        stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n        _d = _b.n,\n        n = _d === void 0 ? FETCH_ALL : _d;\n\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(PULL, [metadata], function () {\n      return \"PULL \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n  /**\n   * Generates a new DISCARD message with additional metadata.\n   * @param {Integer|number} stmtId\n   * @param {Integer|number} n\n   * @return {RequestMessage} the PULL message.\n   */\n\n\n  RequestMessage.discard = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.stmtId,\n        stmtId = _c === void 0 ? NO_STATEMENT_ID : _c,\n        _d = _b.n,\n        n = _d === void 0 ? FETCH_ALL : _d;\n\n    var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n    return new RequestMessage(DISCARD, [metadata], function () {\n      return \"DISCARD \".concat(neo4j_driver_core_1.json.stringify(metadata));\n    });\n  };\n\n  RequestMessage.telemetry = function (_a) {\n    var api = _a.api;\n    var parsedApi = (0, neo4j_driver_core_1.int)(api);\n    return new RequestMessage(TELEMETRY, [parsedApi], function () {\n      return \"TELEMETRY \".concat(parsedApi.toString());\n    });\n  };\n  /**\n   * Generate the ROUTE message, this message is used to fetch the routing table from the server\n   *\n   * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n   * @param {string[]} bookmarks The list of the bookmarks should be used\n   * @param {string} databaseName The name of the database to get the routing table for.\n   * @return {RequestMessage} the ROUTE message.\n   */\n\n\n  RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n    if (routingContext === void 0) {\n      routingContext = {};\n    }\n\n    if (bookmarks === void 0) {\n      bookmarks = [];\n    }\n\n    if (databaseName === void 0) {\n      databaseName = null;\n    }\n\n    return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n      return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(databaseName);\n    });\n  };\n  /**\n   * Generate the ROUTE message, this message is used to fetch the routing table from the server\n   *\n   * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n   * @param {string[]} bookmarks The list of the bookmarks should be used\n   * @param {object} databaseContext The context inforamtion of the database to get the routing table for.\n   * @param {string} databaseContext.databaseName The name of the database to get the routing table.\n   * @param {string} databaseContext.impersonatedUser The name of the user to impersonation when getting the routing table.\n   * @return {RequestMessage} the ROUTE message.\n   */\n\n\n  RequestMessage.routeV4x4 = function (routingContext, bookmarks, databaseContext) {\n    if (routingContext === void 0) {\n      routingContext = {};\n    }\n\n    if (bookmarks === void 0) {\n      bookmarks = [];\n    }\n\n    if (databaseContext === void 0) {\n      databaseContext = {};\n    }\n\n    var dbContext = {};\n\n    if (databaseContext.databaseName) {\n      dbContext.db = databaseContext.databaseName;\n    }\n\n    if (databaseContext.impersonatedUser) {\n      dbContext.imp_user = databaseContext.impersonatedUser;\n    }\n\n    return new RequestMessage(ROUTE, [routingContext, bookmarks, dbContext], function () {\n      return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(neo4j_driver_core_1.json.stringify(dbContext));\n    });\n  };\n\n  return RequestMessage;\n}();\n\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmarks} bookmarks the bookmarks.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @param {string} impersonatedUser the impersonated user mode.\n * @param {notificationFilter} notificationFilter the notification filter\n * @return {Object} a metadata object.\n */\n\nfunction buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter) {\n  var metadata = {};\n\n  if (!bookmarks.isEmpty()) {\n    metadata.bookmarks = bookmarks.values();\n  }\n\n  if (txConfig.timeout !== null) {\n    metadata.tx_timeout = txConfig.timeout;\n  }\n\n  if (txConfig.metadata) {\n    metadata.tx_metadata = txConfig.metadata;\n  }\n\n  if (database) {\n    metadata.db = assertString(database, 'database');\n  }\n\n  if (impersonatedUser) {\n    metadata.imp_user = assertString(impersonatedUser, 'impersonatedUser');\n  }\n\n  if (mode === ACCESS_MODE_READ) {\n    metadata.mode = READ_MODE;\n  }\n\n  if (notificationFilter) {\n    if (notificationFilter.minimumSeverityLevel) {\n      metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n    }\n\n    if (notificationFilter.disabledCategories) {\n      metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n    }\n  }\n\n  return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\n\n\nfunction buildStreamMetadata(stmtId, n) {\n  var metadata = {\n    n: (0, neo4j_driver_core_1.int)(n)\n  };\n\n  if (stmtId !== NO_STATEMENT_ID) {\n    metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);\n  }\n\n  return metadata;\n} // constants for messages that never change\n\n\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () {\n  return 'PULL_ALL';\n});\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () {\n  return 'RESET';\n});\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () {\n  return 'COMMIT';\n});\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () {\n  return 'ROLLBACK';\n});\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () {\n  return 'GOODBYE';\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","SIGNATURES","neo4j_driver_core_1","require","_a","internal","constants","ACCESS_MODE_READ","FETCH_ALL","assertString","util","INIT","ACK_FAILURE","RESET","RUN","DISCARD_ALL","PULL_ALL","HELLO","GOODBYE","BEGIN","COMMIT","ROLLBACK","TELEMETRY","ROUTE","LOGON","LOGOFF","DISCARD","PULL","READ_MODE","NO_STATEMENT_ID","freeze","RequestMessage","signature","fields","toString","init","clientName","authToken","concat","run","query","parameters","json","stringify","pullAll","PULL_ALL_MESSAGE","reset","RESET_MESSAGE","hello","userAgent","routing","patchs","metadata","assign","user_agent","patch_bolt","hello5x1","hello5x2","notificationFilter","minimumSeverityLevel","notifications_minimum_severity","disabledCategories","notifications_disabled_categories","hello5x3","boltAgent","bolt_agent","product","platform","language","language_details","languageDetails","logon","logoff","begin","_b","bookmarks","txConfig","database","mode","impersonatedUser","buildTxMetadata","commit","COMMIT_MESSAGE","rollback","ROLLBACK_MESSAGE","runWithMetadata","goodbye","GOODBYE_MESSAGE","pull","_c","stmtId","_d","n","buildStreamMetadata","undefined","discard","telemetry","api","parsedApi","int","route","routingContext","databaseName","routeV4x4","databaseContext","dbContext","db","imp_user","default","isEmpty","values","timeout","tx_timeout","tx_metadata","qid"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-bolt-connection/lib/bolt/request-message.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SIGNATURES = void 0;\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar _a = neo4j_driver_core_1.internal.constants, ACCESS_MODE_READ = _a.ACCESS_MODE_READ, FETCH_ALL = _a.FETCH_ALL, assertString = neo4j_driver_core_1.internal.util.assertString;\n/* eslint-disable no-unused-vars */\n// Signature bytes for each request message type\nvar INIT = 0x01; // 0000 0001 // INIT <user_agent> <authentication_token>\nvar ACK_FAILURE = 0x0e; // 0000 1110 // ACK_FAILURE - unused\nvar RESET = 0x0f; // 0000 1111 // RESET\nvar RUN = 0x10; // 0001 0000 // RUN <query> <parameters>\nvar DISCARD_ALL = 0x2f; // 0010 1111 // DISCARD_ALL - unused\nvar PULL_ALL = 0x3f; // 0011 1111 // PULL_ALL\nvar HELLO = 0x01; // 0000 0001 // HELLO <metadata>\nvar GOODBYE = 0x02; // 0000 0010 // GOODBYE\nvar BEGIN = 0x11; // 0001 0001 // BEGIN <metadata>\nvar COMMIT = 0x12; // 0001 0010 // COMMIT\nvar ROLLBACK = 0x13; // 0001 0011 // ROLLBACK\nvar TELEMETRY = 0x54; // 0101 0100 // TELEMETRY <api>\nvar ROUTE = 0x66; // 0110 0110 // ROUTE\nvar LOGON = 0x6A; // LOGON\nvar LOGOFF = 0x6B; // LOGOFF\nvar DISCARD = 0x2f; // 0010 1111 // DISCARD\nvar PULL = 0x3f; // 0011 1111 // PULL\nvar READ_MODE = 'r';\n/* eslint-enable no-unused-vars */\nvar NO_STATEMENT_ID = -1;\nvar SIGNATURES = Object.freeze({\n    INIT: INIT,\n    RESET: RESET,\n    RUN: RUN,\n    PULL_ALL: PULL_ALL,\n    HELLO: HELLO,\n    GOODBYE: GOODBYE,\n    BEGIN: BEGIN,\n    COMMIT: COMMIT,\n    ROLLBACK: ROLLBACK,\n    TELEMETRY: TELEMETRY,\n    ROUTE: ROUTE,\n    LOGON: LOGON,\n    LOGOFF: LOGOFF,\n    DISCARD: DISCARD,\n    PULL: PULL\n});\nexports.SIGNATURES = SIGNATURES;\nvar RequestMessage = /** @class */ (function () {\n    function RequestMessage(signature, fields, toString) {\n        this.signature = signature;\n        this.fields = fields;\n        this.toString = toString;\n    }\n    /**\n     * Create a new INIT message.\n     * @param {string} clientName the client name.\n     * @param {Object} authToken the authentication token.\n     * @return {RequestMessage} new INIT message.\n     */\n    RequestMessage.init = function (clientName, authToken) {\n        return new RequestMessage(INIT, [clientName, authToken], function () { return \"INIT \".concat(clientName, \" {...}\"); });\n    };\n    /**\n     * Create a new RUN message.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @return {RequestMessage} new RUN message.\n     */\n    RequestMessage.run = function (query, parameters) {\n        return new RequestMessage(RUN, [query, parameters], function () { return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters)); });\n    };\n    /**\n     * Get a PULL_ALL message.\n     * @return {RequestMessage} the PULL_ALL message.\n     */\n    RequestMessage.pullAll = function () {\n        return PULL_ALL_MESSAGE;\n    };\n    /**\n     * Get a RESET message.\n     * @return {RequestMessage} the RESET message.\n     */\n    RequestMessage.reset = function () {\n        return RESET_MESSAGE;\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {Object} authToken the authentication token.\n     * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello = function (userAgent, authToken, routing, patchs) {\n        if (routing === void 0) { routing = null; }\n        if (patchs === void 0) { patchs = null; }\n        var metadata = Object.assign({ user_agent: userAgent }, authToken);\n        if (routing) {\n            metadata.routing = routing;\n        }\n        if (patchs) {\n            metadata.patch_bolt = patchs;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\"); });\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {Object} optional server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello5x1 = function (userAgent, routing) {\n        if (routing === void 0) { routing = null; }\n        var metadata = { user_agent: userAgent };\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO {user_agent: '\".concat(userAgent, \"', ...}\"); });\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {NotificationFilter} notificationFilter the notification filter configured\n     * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello5x2 = function (userAgent, notificationFilter, routing) {\n        if (notificationFilter === void 0) { notificationFilter = null; }\n        if (routing === void 0) { routing = null; }\n        var metadata = { user_agent: userAgent };\n        if (notificationFilter) {\n            if (notificationFilter.minimumSeverityLevel) {\n                metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n            }\n            if (notificationFilter.disabledCategories) {\n                metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n            }\n        }\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Create a new HELLO message.\n     * @param {string} userAgent the user agent.\n     * @param {string} boltAgent the bolt agent.\n     * @param {NotificationFilter} notificationFilter the notification filter configured\n     * @param {Object} routing server side routing, set to routing context to turn on server side routing (> 4.1)\n     * @return {RequestMessage} new HELLO message.\n     */\n    RequestMessage.hello5x3 = function (userAgent, boltAgent, notificationFilter, routing) {\n        if (notificationFilter === void 0) { notificationFilter = null; }\n        if (routing === void 0) { routing = null; }\n        var metadata = {};\n        if (userAgent) {\n            metadata.user_agent = userAgent;\n        }\n        if (boltAgent) {\n            metadata.bolt_agent = {\n                product: boltAgent.product,\n                platform: boltAgent.platform,\n                language: boltAgent.language,\n                language_details: boltAgent.languageDetails\n            };\n        }\n        if (notificationFilter) {\n            if (notificationFilter.minimumSeverityLevel) {\n                metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n            }\n            if (notificationFilter.disabledCategories) {\n                metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n            }\n        }\n        if (routing) {\n            metadata.routing = routing;\n        }\n        return new RequestMessage(HELLO, [metadata], function () { return \"HELLO \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Create a new LOGON message.\n     *\n     * @param {object} authToken The auth token\n     * @returns {RequestMessage} new LOGON message\n     */\n    RequestMessage.logon = function (authToken) {\n        return new RequestMessage(LOGON, [authToken], function () { return 'LOGON { ... }'; });\n    };\n    /**\n     * Create a new LOGOFF message.\n     *\n     * @returns {RequestMessage} new LOGOFF message\n     */\n    RequestMessage.logoff = function () {\n        return new RequestMessage(LOGOFF, [], function () { return 'LOGOFF'; });\n    };\n    /**\n     * Create a new BEGIN message.\n     * @param {Bookmarks} bookmarks the bookmarks.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @param {string} impersonatedUser the impersonated user.\n     * @param {NotificationFilter} notificationFilter the notification filter\n     * @return {RequestMessage} new BEGIN message.\n     */\n    RequestMessage.begin = function (_a) {\n        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;\n        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n        return new RequestMessage(BEGIN, [metadata], function () { return \"BEGIN \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Get a COMMIT message.\n     * @return {RequestMessage} the COMMIT message.\n     */\n    RequestMessage.commit = function () {\n        return COMMIT_MESSAGE;\n    };\n    /**\n     * Get a ROLLBACK message.\n     * @return {RequestMessage} the ROLLBACK message.\n     */\n    RequestMessage.rollback = function () {\n        return ROLLBACK_MESSAGE;\n    };\n    /**\n     * Create a new RUN message with additional metadata.\n     * @param {string} query the cypher query.\n     * @param {Object} parameters the query parameters.\n     * @param {Bookmarks} bookmarks the bookmarks.\n     * @param {TxConfig} txConfig the configuration.\n     * @param {string} database the database name.\n     * @param {string} mode the access mode.\n     * @param {string} impersonatedUser the impersonated user.\n     * @return {RequestMessage} new RUN message with additional metadata.\n     */\n    RequestMessage.runWithMetadata = function (query, parameters, _a) {\n        var _b = _a === void 0 ? {} : _a, bookmarks = _b.bookmarks, txConfig = _b.txConfig, database = _b.database, mode = _b.mode, impersonatedUser = _b.impersonatedUser, notificationFilter = _b.notificationFilter;\n        var metadata = buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter);\n        return new RequestMessage(RUN, [query, parameters, metadata], function () {\n            return \"RUN \".concat(query, \" \").concat(neo4j_driver_core_1.json.stringify(parameters), \" \").concat(neo4j_driver_core_1.json.stringify(metadata));\n        });\n    };\n    /**\n     * Get a GOODBYE message.\n     * @return {RequestMessage} the GOODBYE message.\n     */\n    RequestMessage.goodbye = function () {\n        return GOODBYE_MESSAGE;\n    };\n    /**\n     * Generates a new PULL message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.pull = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(PULL, [metadata], function () { return \"PULL \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    /**\n     * Generates a new DISCARD message with additional metadata.\n     * @param {Integer|number} stmtId\n     * @param {Integer|number} n\n     * @return {RequestMessage} the PULL message.\n     */\n    RequestMessage.discard = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.stmtId, stmtId = _c === void 0 ? NO_STATEMENT_ID : _c, _d = _b.n, n = _d === void 0 ? FETCH_ALL : _d;\n        var metadata = buildStreamMetadata(stmtId === null || stmtId === undefined ? NO_STATEMENT_ID : stmtId, n || FETCH_ALL);\n        return new RequestMessage(DISCARD, [metadata], function () { return \"DISCARD \".concat(neo4j_driver_core_1.json.stringify(metadata)); });\n    };\n    RequestMessage.telemetry = function (_a) {\n        var api = _a.api;\n        var parsedApi = (0, neo4j_driver_core_1.int)(api);\n        return new RequestMessage(TELEMETRY, [parsedApi], function () { return \"TELEMETRY \".concat(parsedApi.toString()); });\n    };\n    /**\n     * Generate the ROUTE message, this message is used to fetch the routing table from the server\n     *\n     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n     * @param {string[]} bookmarks The list of the bookmarks should be used\n     * @param {string} databaseName The name of the database to get the routing table for.\n     * @return {RequestMessage} the ROUTE message.\n     */\n    RequestMessage.route = function (routingContext, bookmarks, databaseName) {\n        if (routingContext === void 0) { routingContext = {}; }\n        if (bookmarks === void 0) { bookmarks = []; }\n        if (databaseName === void 0) { databaseName = null; }\n        return new RequestMessage(ROUTE, [routingContext, bookmarks, databaseName], function () {\n            return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(databaseName);\n        });\n    };\n    /**\n     * Generate the ROUTE message, this message is used to fetch the routing table from the server\n     *\n     * @param {object} routingContext The routing context used to define the routing table. Multi-datacenter deployments is one of its use cases\n     * @param {string[]} bookmarks The list of the bookmarks should be used\n     * @param {object} databaseContext The context inforamtion of the database to get the routing table for.\n     * @param {string} databaseContext.databaseName The name of the database to get the routing table.\n     * @param {string} databaseContext.impersonatedUser The name of the user to impersonation when getting the routing table.\n     * @return {RequestMessage} the ROUTE message.\n     */\n    RequestMessage.routeV4x4 = function (routingContext, bookmarks, databaseContext) {\n        if (routingContext === void 0) { routingContext = {}; }\n        if (bookmarks === void 0) { bookmarks = []; }\n        if (databaseContext === void 0) { databaseContext = {}; }\n        var dbContext = {};\n        if (databaseContext.databaseName) {\n            dbContext.db = databaseContext.databaseName;\n        }\n        if (databaseContext.impersonatedUser) {\n            dbContext.imp_user = databaseContext.impersonatedUser;\n        }\n        return new RequestMessage(ROUTE, [routingContext, bookmarks, dbContext], function () {\n            return \"ROUTE \".concat(neo4j_driver_core_1.json.stringify(routingContext), \" \").concat(neo4j_driver_core_1.json.stringify(bookmarks), \" \").concat(neo4j_driver_core_1.json.stringify(dbContext));\n        });\n    };\n    return RequestMessage;\n}());\nexports.default = RequestMessage;\n/**\n * Create an object that represent transaction metadata.\n * @param {Bookmarks} bookmarks the bookmarks.\n * @param {TxConfig} txConfig the configuration.\n * @param {string} database the database name.\n * @param {string} mode the access mode.\n * @param {string} impersonatedUser the impersonated user mode.\n * @param {notificationFilter} notificationFilter the notification filter\n * @return {Object} a metadata object.\n */\nfunction buildTxMetadata(bookmarks, txConfig, database, mode, impersonatedUser, notificationFilter) {\n    var metadata = {};\n    if (!bookmarks.isEmpty()) {\n        metadata.bookmarks = bookmarks.values();\n    }\n    if (txConfig.timeout !== null) {\n        metadata.tx_timeout = txConfig.timeout;\n    }\n    if (txConfig.metadata) {\n        metadata.tx_metadata = txConfig.metadata;\n    }\n    if (database) {\n        metadata.db = assertString(database, 'database');\n    }\n    if (impersonatedUser) {\n        metadata.imp_user = assertString(impersonatedUser, 'impersonatedUser');\n    }\n    if (mode === ACCESS_MODE_READ) {\n        metadata.mode = READ_MODE;\n    }\n    if (notificationFilter) {\n        if (notificationFilter.minimumSeverityLevel) {\n            metadata.notifications_minimum_severity = notificationFilter.minimumSeverityLevel;\n        }\n        if (notificationFilter.disabledCategories) {\n            metadata.notifications_disabled_categories = notificationFilter.disabledCategories;\n        }\n    }\n    return metadata;\n}\n/**\n * Create an object that represents streaming metadata.\n * @param {Integer|number} stmtId The query id to stream its results.\n * @param {Integer|number} n The number of records to stream.\n * @returns {Object} a metadata object.\n */\nfunction buildStreamMetadata(stmtId, n) {\n    var metadata = { n: (0, neo4j_driver_core_1.int)(n) };\n    if (stmtId !== NO_STATEMENT_ID) {\n        metadata.qid = (0, neo4j_driver_core_1.int)(stmtId);\n    }\n    return metadata;\n}\n// constants for messages that never change\nvar PULL_ALL_MESSAGE = new RequestMessage(PULL_ALL, [], function () { return 'PULL_ALL'; });\nvar RESET_MESSAGE = new RequestMessage(RESET, [], function () { return 'RESET'; });\nvar COMMIT_MESSAGE = new RequestMessage(COMMIT, [], function () { return 'COMMIT'; });\nvar ROLLBACK_MESSAGE = new RequestMessage(ROLLBACK, [], function () { return 'ROLLBACK'; });\nvar GOODBYE_MESSAGE = new RequestMessage(GOODBYE, [], function () { return 'GOODBYE'; });\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}