{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* eslint-disable @typescript-eslint/promise-function-async */\n\nvar util_1 = require(\"./internal/util\");\n\nvar connection_holder_1 = require(\"./internal/connection-holder\");\n\nvar bookmarks_1 = require(\"./internal/bookmarks\");\n\nvar tx_config_1 = require(\"./internal/tx-config\");\n\nvar observers_1 = require(\"./internal/observers\");\n\nvar error_1 = require(\"./error\");\n\nvar result_1 = __importDefault(require(\"./result\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\n\n\nvar Transaction =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {object} args\n   * @param {ConnectionHolder} args.connectionHolder - the connection holder to get connection from.\n   * @param {function()} args.onClose - Function to be called when transaction is committed or rolled back.\n   * @param {function(bookmarks: Bookmarks)} args.onBookmarks callback invoked when new bookmark is produced.\n   * @param {function()} args.onConnection - Function to be called when a connection is obtained to ensure the conneciton\n   * is not yet released.\n   * @param {boolean} args.reactive whether this transaction generates reactive streams\n   * @param {number} args.fetchSize - the record fetch size in each pulling batch.\n   * @param {string} args.impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n   * @param {number} args.highRecordWatermark - The high watermark for the record buffer.\n   * @param {number} args.lowRecordWatermark - The low watermark for the record buffer.\n   * @param {NotificationFilter} args.notificationFilter - The notification filter used for this transaction.\n   * @param {NonAutoCommitApiTelemetryConfig} args.apiTelemetryConfig - The api telemetry configuration. Empty/Null for disabling telemetry\n   */\n  function Transaction(_a) {\n    var connectionHolder = _a.connectionHolder,\n        onClose = _a.onClose,\n        onBookmarks = _a.onBookmarks,\n        onConnection = _a.onConnection,\n        reactive = _a.reactive,\n        fetchSize = _a.fetchSize,\n        impersonatedUser = _a.impersonatedUser,\n        highRecordWatermark = _a.highRecordWatermark,\n        lowRecordWatermark = _a.lowRecordWatermark,\n        notificationFilter = _a.notificationFilter,\n        apiTelemetryConfig = _a.apiTelemetryConfig;\n\n    var _this = this;\n\n    this._connectionHolder = connectionHolder;\n    this._reactive = reactive;\n    this._state = _states.ACTIVE;\n    this._onClose = onClose;\n    this._onBookmarks = onBookmarks;\n    this._onConnection = onConnection;\n    this._onError = this._onErrorCallback.bind(this);\n    this._fetchSize = fetchSize;\n    this._onComplete = this._onCompleteCallback.bind(this);\n    this._results = [];\n    this._impersonatedUser = impersonatedUser;\n    this._lowRecordWatermak = lowRecordWatermark;\n    this._highRecordWatermark = highRecordWatermark;\n    this._bookmarks = bookmarks_1.Bookmarks.empty();\n    this._notificationFilter = notificationFilter;\n    this._apiTelemetryConfig = apiTelemetryConfig;\n\n    this._acceptActive = function () {}; // satisfy DenoJS\n\n\n    this._activePromise = new Promise(function (resolve, reject) {\n      _this._acceptActive = resolve;\n    });\n  }\n  /**\n   * @private\n   * @param {Bookmarks | string |  string []} bookmarks\n   * @param {TxConfig} txConfig\n   * @param {Object} events List of observers to events\n   * @returns {void}\n   */\n\n\n  Transaction.prototype._begin = function (getBookmarks, txConfig, events) {\n    var _this = this;\n\n    this._connectionHolder.getConnection().then(function (connection) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a;\n\n        var _this = this;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              this._onConnection();\n\n              if (!(connection != null)) return [3\n              /*break*/\n              , 2];\n              _a = this;\n              return [4\n              /*yield*/\n              , getBookmarks()];\n\n            case 1:\n              _a._bookmarks = _b.sent();\n              return [2\n              /*return*/\n              , connection.beginTransaction({\n                bookmarks: this._bookmarks,\n                txConfig: txConfig,\n                mode: this._connectionHolder.mode(),\n                database: this._connectionHolder.database(),\n                impersonatedUser: this._impersonatedUser,\n                notificationFilter: this._notificationFilter,\n                apiTelemetryConfig: this._apiTelemetryConfig,\n                beforeError: function (error) {\n                  if (events != null) {\n                    events.onError(error);\n                  }\n\n                  _this._onError(error).catch(function () {});\n                },\n                afterComplete: function (metadata) {\n                  if (events != null) {\n                    events.onComplete(metadata);\n                  }\n\n                  _this._onComplete(metadata);\n                }\n              })];\n\n            case 2:\n              throw (0, error_1.newError)('No connection available');\n          }\n        });\n      });\n    }).catch(function (error) {\n      if (events != null) {\n        events.onError(error);\n      }\n\n      _this._onError(error).catch(function () {});\n    }) // It should make the transaction active anyway\n    // further errors will be treated by the existing\n    // observers\n    .finally(function () {\n      return _this._acceptActive();\n    });\n  };\n  /**\n   * Run Cypher query\n   * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n   * or with the query and parameters as separate arguments.\n   * @param {mixed} query - Cypher query to execute\n   * @param {Object} parameters - Map with parameters to use in query\n   * @return {Result} New Result\n   */\n\n\n  Transaction.prototype.run = function (query, parameters) {\n    var _a = (0, util_1.validateQueryAndParameters)(query, parameters),\n        validatedQuery = _a.validatedQuery,\n        params = _a.params;\n\n    var result = this._state.run(validatedQuery, params, {\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      reactive: this._reactive,\n      fetchSize: this._fetchSize,\n      highRecordWatermark: this._highRecordWatermark,\n      lowRecordWatermark: this._lowRecordWatermak,\n      preparationJob: this._activePromise\n    });\n\n    this._results.push(result);\n\n    return result;\n  };\n  /**\n   * Commits the transaction and returns the result.\n   *\n   * After committing the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n   */\n\n\n  Transaction.prototype.commit = function () {\n    var _this = this;\n\n    var committed = this._state.commit({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: function (meta) {\n        return _this._onCompleteCallback(meta, _this._bookmarks);\n      },\n      onConnection: this._onConnection,\n      pendingResults: this._results,\n      preparationJob: this._activePromise\n    });\n\n    this._state = committed.state; // clean up\n\n    this._onClose();\n\n    return new Promise(function (resolve, reject) {\n      committed.result.subscribe({\n        onCompleted: function () {\n          return resolve();\n        },\n        onError: function (error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks the transaction.\n   *\n   * After rolling back, the transaction can no longer be used.\n   *\n   * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n   * rollback.\n   */\n\n\n  Transaction.prototype.rollback = function () {\n    var rolledback = this._state.rollback({\n      connectionHolder: this._connectionHolder,\n      onError: this._onError,\n      onComplete: this._onComplete,\n      onConnection: this._onConnection,\n      pendingResults: this._results,\n      preparationJob: this._activePromise\n    });\n\n    this._state = rolledback.state; // clean up\n\n    this._onClose();\n\n    return new Promise(function (resolve, reject) {\n      rolledback.result.subscribe({\n        onCompleted: function () {\n          return resolve();\n        },\n        onError: function (error) {\n          return reject(error);\n        }\n      });\n    });\n  };\n  /**\n   * Check if this transaction is active, which means commit and rollback did not happen.\n   * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n   */\n\n\n  Transaction.prototype.isOpen = function () {\n    return this._state === _states.ACTIVE;\n  };\n  /**\n   * Closes the transaction\n   *\n   * This method will roll back the transaction if it is not already committed or rolled back.\n   *\n   * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n   */\n\n\n  Transaction.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isOpen()) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.rollback()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // eslint-disable-next-line\n  // @ts-ignore\n\n\n  Transaction.prototype[Symbol.asyncDispose] = function () {\n    return this.close();\n  };\n\n  Transaction.prototype._onErrorCallback = function (error) {\n    // error will be \"acknowledged\" by sending a RESET message\n    // database will then forget about this transaction and cleanup all corresponding resources\n    // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n    this._state = _states.FAILED;\n\n    this._onClose();\n\n    this._results.forEach(function (result) {\n      if (result.isOpen()) {\n        // @ts-expect-error\n        result._streamObserverPromise.then(function (resultStreamObserver) {\n          return resultStreamObserver.onError(error);\n        }) // Nothing to do since we don't have a observer to notify the error\n        // the result will be already broke in other ways.\n        .catch(function (_) {});\n      }\n    }); // release connection back to the pool\n\n\n    return this._connectionHolder.releaseConnection();\n  };\n  /**\n   * @private\n   * @param {object} meta The meta with bookmarks\n   * @returns {void}\n   */\n\n\n  Transaction.prototype._onCompleteCallback = function (meta, previousBookmarks) {\n    this._onBookmarks(new bookmarks_1.Bookmarks(meta === null || meta === void 0 ? void 0 : meta.bookmark), previousBookmarks !== null && previousBookmarks !== void 0 ? previousBookmarks : bookmarks_1.Bookmarks.empty(), meta === null || meta === void 0 ? void 0 : meta.db);\n  };\n\n  return Transaction;\n}();\n\nvar _states = {\n  // The transaction is running with no explicit success or failure marked\n  ACTIVE: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete,\n          onConnection = _a.onConnection,\n          pendingResults = _a.pendingResults,\n          preparationJob = _a.preparationJob;\n      return {\n        result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n        state: _states.SUCCEEDED\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete,\n          onConnection = _a.onConnection,\n          pendingResults = _a.pendingResults,\n          preparationJob = _a.preparationJob;\n      return {\n        result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete,\n          onConnection = _a.onConnection,\n          reactive = _a.reactive,\n          fetchSize = _a.fetchSize,\n          highRecordWatermark = _a.highRecordWatermark,\n          lowRecordWatermark = _a.lowRecordWatermark,\n          preparationJob = _a.preparationJob; // RUN in explicit transaction can't contain bookmarks and transaction configuration\n      // No need to include mode and database name as it shall be included in begin\n\n      var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n      var observerPromise = connectionHolder.getConnection().then(function (conn) {\n        return requirements.then(function () {\n          return conn;\n        });\n      }).then(function (conn) {\n        onConnection();\n\n        if (conn != null) {\n          return conn.run(query, parameters, {\n            bookmarks: bookmarks_1.Bookmarks.empty(),\n            txConfig: tx_config_1.TxConfig.empty(),\n            beforeError: onError,\n            afterComplete: onComplete,\n            reactive: reactive,\n            fetchSize: fetchSize,\n            highRecordWatermark: highRecordWatermark,\n            lowRecordWatermark: lowRecordWatermark\n          });\n        } else {\n          throw (0, error_1.newError)('No connection available');\n        }\n      }).catch(function (error) {\n        return new observers_1.FailedObserver({\n          error: error,\n          onError: onError\n        });\n      });\n      return newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark);\n    }\n  },\n  // An error has occurred, transaction can no longer be used and no more messages will\n  // be sent for this transaction.\n  FAILED: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n        0 // low watermark\n        ),\n        state: _states.FAILED\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n        0 // low watermark\n        ),\n        state: _states.FAILED\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n        onError: onError\n      }), query, parameters, connectionHolder, 0, // high watermark\n      0 // low watermark\n      );\n    }\n  },\n  // This transaction has successfully committed\n  SUCCEEDED: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'COMMIT', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n        0 // low watermark\n        ),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n          onError: onError\n        }), 'ROLLBACK', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n        0 // low watermark\n        ),\n        state: _states.SUCCEEDED,\n        connectionHolder: connectionHolder\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n        onError: onError\n      }), query, parameters, connectionHolder, 0, // high watermark\n      0 // low watermark\n      );\n    }\n  },\n  // This transaction has been rolled back\n  ROLLED_BACK: {\n    commit: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n          onError: onError\n        }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n        0 // low watermark\n        ),\n        state: _states.ROLLED_BACK\n      };\n    },\n    rollback: function (_a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return {\n        result: newCompletedResult(new observers_1.FailedObserver({\n          error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n        }), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n        0 // low watermark\n        ),\n        state: _states.ROLLED_BACK\n      };\n    },\n    run: function (query, parameters, _a) {\n      var connectionHolder = _a.connectionHolder,\n          onError = _a.onError,\n          onComplete = _a.onComplete;\n      return newCompletedResult(new observers_1.FailedObserver({\n        error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n        onError: onError\n      }), query, parameters, connectionHolder, 0, // high watermark\n      0 // low watermark\n      );\n    }\n  }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\n\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob) {\n  var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n  var observerPromise = connectionHolder.getConnection().then(function (conn) {\n    return requirements.then(function () {\n      return conn;\n    });\n  }).then(function (connection) {\n    onConnection();\n    pendingResults.forEach(function (r) {\n      return r._cancel();\n    });\n    return Promise.all(pendingResults.map(function (result) {\n      return result.summary();\n    })).then(function (results) {\n      if (connection != null) {\n        if (commit) {\n          return connection.commitTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        } else {\n          return connection.rollbackTransaction({\n            beforeError: onError,\n            afterComplete: onComplete\n          });\n        }\n      } else {\n        throw (0, error_1.newError)('No connection available');\n      }\n    });\n  }).catch(function (error) {\n    return new observers_1.FailedObserver({\n      error: error,\n      onError: onError\n    });\n  }); // for commit & rollback we need result that uses real connection holder and notifies it when\n  // connection is not needed and can be safely released to the pool\n\n  return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder, {\n    high: Number.MAX_VALUE,\n    low: Number.MAX_VALUE\n  });\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\n\n\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark) {\n  if (connectionHolder === void 0) {\n    connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER;\n  }\n\n  return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : connection_holder_1.EMPTY_CONNECTION_HOLDER), {\n    low: lowRecordWatermark,\n    high: highRecordWatermark\n  });\n}\n\nexports.default = Transaction;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__importDefault","mod","__esModule","Object","defineProperty","exports","util_1","require","connection_holder_1","bookmarks_1","tx_config_1","observers_1","error_1","result_1","Transaction","_a","connectionHolder","onClose","onBookmarks","onConnection","reactive","fetchSize","impersonatedUser","highRecordWatermark","lowRecordWatermark","notificationFilter","apiTelemetryConfig","_this","_connectionHolder","_reactive","_state","_states","ACTIVE","_onClose","_onBookmarks","_onConnection","_onError","_onErrorCallback","bind","_fetchSize","_onComplete","_onCompleteCallback","_results","_impersonatedUser","_lowRecordWatermak","_highRecordWatermark","_bookmarks","Bookmarks","empty","_notificationFilter","_apiTelemetryConfig","_acceptActive","_activePromise","prototype","_begin","getBookmarks","txConfig","events","getConnection","connection","_b","beginTransaction","bookmarks","mode","database","beforeError","error","onError","catch","afterComplete","metadata","onComplete","newError","finally","run","query","parameters","validateQueryAndParameters","validatedQuery","params","preparationJob","commit","committed","meta","pendingResults","state","subscribe","onCompleted","rollback","rolledback","isOpen","close","asyncDispose","FAILED","forEach","_streamObserverPromise","resultStreamObserver","releaseConnection","previousBookmarks","bookmark","db","finishTransaction","SUCCEEDED","ROLLED_BACK","requirements","observerPromise","conn","TxConfig","FailedObserver","newCompletedResult","CompletedObserver","EMPTY_CONNECTION_HOLDER","r","_cancel","all","map","summary","results","commitTransaction","rollbackTransaction","default","high","Number","MAX_VALUE","low","ReadOnlyConnectionHolder"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-core/lib/transaction.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar util_1 = require(\"./internal/util\");\nvar connection_holder_1 = require(\"./internal/connection-holder\");\nvar bookmarks_1 = require(\"./internal/bookmarks\");\nvar tx_config_1 = require(\"./internal/tx-config\");\nvar observers_1 = require(\"./internal/observers\");\nvar error_1 = require(\"./error\");\nvar result_1 = __importDefault(require(\"./result\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\nvar Transaction = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} args\n     * @param {ConnectionHolder} args.connectionHolder - the connection holder to get connection from.\n     * @param {function()} args.onClose - Function to be called when transaction is committed or rolled back.\n     * @param {function(bookmarks: Bookmarks)} args.onBookmarks callback invoked when new bookmark is produced.\n     * @param {function()} args.onConnection - Function to be called when a connection is obtained to ensure the conneciton\n     * is not yet released.\n     * @param {boolean} args.reactive whether this transaction generates reactive streams\n     * @param {number} args.fetchSize - the record fetch size in each pulling batch.\n     * @param {string} args.impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n     * @param {number} args.highRecordWatermark - The high watermark for the record buffer.\n     * @param {number} args.lowRecordWatermark - The low watermark for the record buffer.\n     * @param {NotificationFilter} args.notificationFilter - The notification filter used for this transaction.\n     * @param {NonAutoCommitApiTelemetryConfig} args.apiTelemetryConfig - The api telemetry configuration. Empty/Null for disabling telemetry\n     */\n    function Transaction(_a) {\n        var connectionHolder = _a.connectionHolder, onClose = _a.onClose, onBookmarks = _a.onBookmarks, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, notificationFilter = _a.notificationFilter, apiTelemetryConfig = _a.apiTelemetryConfig;\n        var _this = this;\n        this._connectionHolder = connectionHolder;\n        this._reactive = reactive;\n        this._state = _states.ACTIVE;\n        this._onClose = onClose;\n        this._onBookmarks = onBookmarks;\n        this._onConnection = onConnection;\n        this._onError = this._onErrorCallback.bind(this);\n        this._fetchSize = fetchSize;\n        this._onComplete = this._onCompleteCallback.bind(this);\n        this._results = [];\n        this._impersonatedUser = impersonatedUser;\n        this._lowRecordWatermak = lowRecordWatermark;\n        this._highRecordWatermark = highRecordWatermark;\n        this._bookmarks = bookmarks_1.Bookmarks.empty();\n        this._notificationFilter = notificationFilter;\n        this._apiTelemetryConfig = apiTelemetryConfig;\n        this._acceptActive = function () { }; // satisfy DenoJS\n        this._activePromise = new Promise(function (resolve, reject) {\n            _this._acceptActive = resolve;\n        });\n    }\n    /**\n     * @private\n     * @param {Bookmarks | string |  string []} bookmarks\n     * @param {TxConfig} txConfig\n     * @param {Object} events List of observers to events\n     * @returns {void}\n     */\n    Transaction.prototype._begin = function (getBookmarks, txConfig, events) {\n        var _this = this;\n        this._connectionHolder\n            .getConnection()\n            .then(function (connection) { return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this._onConnection();\n                        if (!(connection != null)) return [3 /*break*/, 2];\n                        _a = this;\n                        return [4 /*yield*/, getBookmarks()];\n                    case 1:\n                        _a._bookmarks = _b.sent();\n                        return [2 /*return*/, connection.beginTransaction({\n                                bookmarks: this._bookmarks,\n                                txConfig: txConfig,\n                                mode: this._connectionHolder.mode(),\n                                database: this._connectionHolder.database(),\n                                impersonatedUser: this._impersonatedUser,\n                                notificationFilter: this._notificationFilter,\n                                apiTelemetryConfig: this._apiTelemetryConfig,\n                                beforeError: function (error) {\n                                    if (events != null) {\n                                        events.onError(error);\n                                    }\n                                    _this._onError(error).catch(function () { });\n                                },\n                                afterComplete: function (metadata) {\n                                    if (events != null) {\n                                        events.onComplete(metadata);\n                                    }\n                                    _this._onComplete(metadata);\n                                }\n                            })];\n                    case 2: throw (0, error_1.newError)('No connection available');\n                }\n            });\n        }); })\n            .catch(function (error) {\n            if (events != null) {\n                events.onError(error);\n            }\n            _this._onError(error).catch(function () { });\n        })\n            // It should make the transaction active anyway\n            // further errors will be treated by the existing\n            // observers\n            .finally(function () { return _this._acceptActive(); });\n    };\n    /**\n     * Run Cypher query\n     * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n     * or with the query and parameters as separate arguments.\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @return {Result} New Result\n     */\n    Transaction.prototype.run = function (query, parameters) {\n        var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;\n        var result = this._state.run(validatedQuery, params, {\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            reactive: this._reactive,\n            fetchSize: this._fetchSize,\n            highRecordWatermark: this._highRecordWatermark,\n            lowRecordWatermark: this._lowRecordWatermak,\n            preparationJob: this._activePromise\n        });\n        this._results.push(result);\n        return result;\n    };\n    /**\n     * Commits the transaction and returns the result.\n     *\n     * After committing the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n     */\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var committed = this._state.commit({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: function (meta) { return _this._onCompleteCallback(meta, _this._bookmarks); },\n            onConnection: this._onConnection,\n            pendingResults: this._results,\n            preparationJob: this._activePromise\n        });\n        this._state = committed.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            committed.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Rollbacks the transaction.\n     *\n     * After rolling back, the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n     * rollback.\n     */\n    Transaction.prototype.rollback = function () {\n        var rolledback = this._state.rollback({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            pendingResults: this._results,\n            preparationJob: this._activePromise\n        });\n        this._state = rolledback.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            rolledback.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Check if this transaction is active, which means commit and rollback did not happen.\n     * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n     */\n    Transaction.prototype.isOpen = function () {\n        return this._state === _states.ACTIVE;\n    };\n    /**\n     * Closes the transaction\n     *\n     * This method will roll back the transaction if it is not already committed or rolled back.\n     *\n     * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n     */\n    Transaction.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isOpen()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.rollback()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // eslint-disable-next-line\n    // @ts-ignore\n    Transaction.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    Transaction.prototype._onErrorCallback = function (error) {\n        // error will be \"acknowledged\" by sending a RESET message\n        // database will then forget about this transaction and cleanup all corresponding resources\n        // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n        this._state = _states.FAILED;\n        this._onClose();\n        this._results.forEach(function (result) {\n            if (result.isOpen()) {\n                // @ts-expect-error\n                result._streamObserverPromise\n                    .then(function (resultStreamObserver) { return resultStreamObserver.onError(error); })\n                    // Nothing to do since we don't have a observer to notify the error\n                    // the result will be already broke in other ways.\n                    .catch(function (_) { });\n            }\n        });\n        // release connection back to the pool\n        return this._connectionHolder.releaseConnection();\n    };\n    /**\n     * @private\n     * @param {object} meta The meta with bookmarks\n     * @returns {void}\n     */\n    Transaction.prototype._onCompleteCallback = function (meta, previousBookmarks) {\n        this._onBookmarks(new bookmarks_1.Bookmarks(meta === null || meta === void 0 ? void 0 : meta.bookmark), previousBookmarks !== null && previousBookmarks !== void 0 ? previousBookmarks : bookmarks_1.Bookmarks.empty(), meta === null || meta === void 0 ? void 0 : meta.db);\n    };\n    return Transaction;\n}());\nvar _states = {\n    // The transaction is running with no explicit success or failure marked\n    ACTIVE: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;\n            return {\n                result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n                state: _states.SUCCEEDED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;\n            return {\n                result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, preparationJob = _a.preparationJob;\n            // RUN in explicit transaction can't contain bookmarks and transaction configuration\n            // No need to include mode and database name as it shall be included in begin\n            var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n            var observerPromise = connectionHolder.getConnection()\n                .then(function (conn) { return requirements.then(function () { return conn; }); })\n                .then(function (conn) {\n                onConnection();\n                if (conn != null) {\n                    return conn.run(query, parameters, {\n                        bookmarks: bookmarks_1.Bookmarks.empty(),\n                        txConfig: tx_config_1.TxConfig.empty(),\n                        beforeError: onError,\n                        afterComplete: onComplete,\n                        reactive: reactive,\n                        fetchSize: fetchSize,\n                        highRecordWatermark: highRecordWatermark,\n                        lowRecordWatermark: lowRecordWatermark\n                    });\n                }\n                else {\n                    throw (0, error_1.newError)('No connection available');\n                }\n            })\n                .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n            return newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark);\n        }\n    },\n    // An error has occurred, transaction can no longer be used and no more messages will\n    // be sent for this transaction.\n    FAILED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.FAILED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.FAILED\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    },\n    // This transaction has successfully committed\n    SUCCEEDED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'COMMIT', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'ROLLBACK', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    },\n    // This transaction has been rolled back\n    ROLLED_BACK: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.ROLLED_BACK\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n                }), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob) {\n    var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n    var observerPromise = connectionHolder.getConnection()\n        .then(function (conn) { return requirements.then(function () { return conn; }); })\n        .then(function (connection) {\n        onConnection();\n        pendingResults.forEach(function (r) { return r._cancel(); });\n        return Promise.all(pendingResults.map(function (result) { return result.summary(); })).then(function (results) {\n            if (connection != null) {\n                if (commit) {\n                    return connection.commitTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n                else {\n                    return connection.rollbackTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n            }\n            else {\n                throw (0, error_1.newError)('No connection available');\n            }\n        });\n    })\n        .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n    // for commit & rollback we need result that uses real connection holder and notifies it when\n    // connection is not needed and can be safely released to the pool\n    return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder, {\n        high: Number.MAX_VALUE,\n        low: Number.MAX_VALUE\n    });\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark) {\n    if (connectionHolder === void 0) { connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER; }\n    return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : connection_holder_1.EMPTY_CONNECTION_HOLDER), {\n        low: lowRecordWatermark,\n        high: highRecordWatermark\n    });\n}\nexports.default = Transaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}