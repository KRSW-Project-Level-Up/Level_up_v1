{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar rxjs_1 = require(\"rxjs\");\n\nvar result_rx_1 = __importDefault(require(\"./result-rx\")); // eslint-disable-next-line no-unused-vars\n\n\nvar neo4j_driver_core_1 = __importDefault(require(\"neo4j-driver-core\"));\n/**\n * A reactive transaction, which provides the same functionality as {@link Transaction} but through a Reactive API.\n */\n\n\nvar RxTransaction =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @protected\n   * @param {Transaction} txc - The underlying transaction instance to relay requests\n   */\n  function RxTransaction(txc) {\n    this._txc = txc;\n  }\n  /**\n   * Creates a reactive result that will execute the query in this transaction, with the provided parameters.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @returns {RxResult} - A reactive result\n   */\n\n\n  RxTransaction.prototype.run = function (query, parameters) {\n    var _this = this;\n\n    return new result_rx_1.default(new rxjs_1.Observable(function (observer) {\n      try {\n        observer.next(_this._txc.run(query, parameters));\n        observer.complete();\n      } catch (err) {\n        observer.error(err);\n      }\n\n      return function () {};\n    }));\n  };\n  /**\n   *  Commits the transaction.\n   *\n   * @public\n   * @returns {Observable} - An empty observable\n   */\n\n\n  RxTransaction.prototype.commit = function () {\n    var _this = this;\n\n    return new rxjs_1.Observable(function (observer) {\n      _this._txc.commit().then(function () {\n        observer.complete();\n      }).catch(function (err) {\n        return observer.error(err);\n      });\n    });\n  };\n  /**\n   *  Rolls back the transaction.\n   *\n   * @public\n   * @returns {Observable} - An empty observable\n   */\n\n\n  RxTransaction.prototype.rollback = function () {\n    var _this = this;\n\n    return new rxjs_1.Observable(function (observer) {\n      _this._txc.rollback().then(function () {\n        observer.complete();\n      }).catch(function (err) {\n        return observer.error(err);\n      });\n    });\n  };\n  /**\n   * Check if this transaction is active, which means commit and rollback did not happen.\n   * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n   */\n\n\n  RxTransaction.prototype.isOpen = function () {\n    return this._txc.isOpen();\n  };\n  /**\n   * Closes the transaction\n   *\n   * This method will roll back the transaction if it is not already committed or rolled back.\n   *\n   * @returns {Observable} - An empty observable\n   */\n\n\n  RxTransaction.prototype.close = function () {\n    var _this = this;\n\n    return new rxjs_1.Observable(function (observer) {\n      _this._txc.close().then(function () {\n        observer.complete();\n      }).catch(function (err) {\n        return observer.error(err);\n      });\n    });\n  };\n\n  return RxTransaction;\n}();\n\nexports.default = RxTransaction;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","rxjs_1","require","result_rx_1","neo4j_driver_core_1","RxTransaction","txc","_txc","prototype","run","query","parameters","_this","default","Observable","observer","next","complete","err","error","commit","then","catch","rollback","isOpen","close"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver/lib/transaction-rx.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar rxjs_1 = require(\"rxjs\");\nvar result_rx_1 = __importDefault(require(\"./result-rx\"));\n// eslint-disable-next-line no-unused-vars\nvar neo4j_driver_core_1 = __importDefault(require(\"neo4j-driver-core\"));\n/**\n * A reactive transaction, which provides the same functionality as {@link Transaction} but through a Reactive API.\n */\nvar RxTransaction = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {Transaction} txc - The underlying transaction instance to relay requests\n     */\n    function RxTransaction(txc) {\n        this._txc = txc;\n    }\n    /**\n     * Creates a reactive result that will execute the query in this transaction, with the provided parameters.\n     *\n     * @public\n     * @param {string} query - Query to be executed.\n     * @param {Object} parameters - Parameter values to use in query execution.\n     * @returns {RxResult} - A reactive result\n     */\n    RxTransaction.prototype.run = function (query, parameters) {\n        var _this = this;\n        return new result_rx_1.default(new rxjs_1.Observable(function (observer) {\n            try {\n                observer.next(_this._txc.run(query, parameters));\n                observer.complete();\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            return function () { };\n        }));\n    };\n    /**\n     *  Commits the transaction.\n     *\n     * @public\n     * @returns {Observable} - An empty observable\n     */\n    RxTransaction.prototype.commit = function () {\n        var _this = this;\n        return new rxjs_1.Observable(function (observer) {\n            _this._txc\n                .commit()\n                .then(function () {\n                observer.complete();\n            })\n                .catch(function (err) { return observer.error(err); });\n        });\n    };\n    /**\n     *  Rolls back the transaction.\n     *\n     * @public\n     * @returns {Observable} - An empty observable\n     */\n    RxTransaction.prototype.rollback = function () {\n        var _this = this;\n        return new rxjs_1.Observable(function (observer) {\n            _this._txc\n                .rollback()\n                .then(function () {\n                observer.complete();\n            })\n                .catch(function (err) { return observer.error(err); });\n        });\n    };\n    /**\n     * Check if this transaction is active, which means commit and rollback did not happen.\n     * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n     */\n    RxTransaction.prototype.isOpen = function () {\n        return this._txc.isOpen();\n    };\n    /**\n     * Closes the transaction\n     *\n     * This method will roll back the transaction if it is not already committed or rolled back.\n     *\n     * @returns {Observable} - An empty observable\n     */\n    RxTransaction.prototype.close = function () {\n        var _this = this;\n        return new rxjs_1.Observable(function (observer) {\n            _this._txc\n                .close()\n                .then(function () {\n                observer.complete();\n            })\n                .catch(function (err) { return observer.error(err); });\n        });\n    };\n    return RxTransaction;\n}());\nexports.default = RxTransaction;"],"mappings":"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"},"metadata":{},"sourceType":"script"}