{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.verifyStructSize = exports.Structure = void 0;\n\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\n\nvar PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;\n/**\n * A Structure have a signature and fields.\n */\n\nvar Structure =\n/** @class */\nfunction () {\n  /**\n   * Create new instance\n   */\n  function Structure(signature, fields) {\n    this.signature = signature;\n    this.fields = fields;\n  }\n\n  Object.defineProperty(Structure.prototype, \"size\", {\n    get: function () {\n      return this.fields.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Structure.prototype.toString = function () {\n    var fieldStr = '';\n\n    for (var i = 0; i < this.fields.length; i++) {\n      if (i > 0) {\n        fieldStr += ', ';\n      }\n\n      fieldStr += this.fields[i];\n    }\n\n    return 'Structure(' + this.signature + ', [' + fieldStr + '])';\n  };\n\n  return Structure;\n}();\n\nexports.Structure = Structure;\n\nfunction verifyStructSize(structName, expectedSize, actualSize) {\n  if (expectedSize !== actualSize) {\n    throw (0, neo4j_driver_core_1.newError)(\"Wrong struct size for \".concat(structName, \", expected \").concat(expectedSize, \" but was \").concat(actualSize), PROTOCOL_ERROR);\n  }\n}\n\nexports.verifyStructSize = verifyStructSize;\nexports.default = Structure;","map":{"version":3,"names":["Object","defineProperty","exports","value","verifyStructSize","Structure","neo4j_driver_core_1","require","PROTOCOL_ERROR","error","signature","fields","prototype","get","length","enumerable","configurable","toString","fieldStr","i","structName","expectedSize","actualSize","newError","concat","default"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-bolt-connection/lib/packstream/structure.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.verifyStructSize = exports.Structure = void 0;\nvar neo4j_driver_core_1 = require(\"neo4j-driver-core\");\nvar PROTOCOL_ERROR = neo4j_driver_core_1.error.PROTOCOL_ERROR;\n/**\n * A Structure have a signature and fields.\n */\nvar Structure = /** @class */ (function () {\n    /**\n     * Create new instance\n     */\n    function Structure(signature, fields) {\n        this.signature = signature;\n        this.fields = fields;\n    }\n    Object.defineProperty(Structure.prototype, \"size\", {\n        get: function () {\n            return this.fields.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Structure.prototype.toString = function () {\n        var fieldStr = '';\n        for (var i = 0; i < this.fields.length; i++) {\n            if (i > 0) {\n                fieldStr += ', ';\n            }\n            fieldStr += this.fields[i];\n        }\n        return 'Structure(' + this.signature + ', [' + fieldStr + '])';\n    };\n    return Structure;\n}());\nexports.Structure = Structure;\nfunction verifyStructSize(structName, expectedSize, actualSize) {\n    if (expectedSize !== actualSize) {\n        throw (0, neo4j_driver_core_1.newError)(\"Wrong struct size for \".concat(structName, \", expected \").concat(expectedSize, \" but was \").concat(actualSize), PROTOCOL_ERROR);\n    }\n}\nexports.verifyStructSize = verifyStructSize;\nexports.default = Structure;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2BF,OAAO,CAACG,SAAR,GAAoB,KAAK,CAApD;;AACA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAjC;;AACA,IAAIC,cAAc,GAAGF,mBAAmB,CAACG,KAApB,CAA0BD,cAA/C;AACA;AACA;AACA;;AACA,IAAIH,SAAS;AAAG;AAAe,YAAY;EACvC;AACJ;AACA;EACI,SAASA,SAAT,CAAmBK,SAAnB,EAA8BC,MAA9B,EAAsC;IAClC,KAAKD,SAAL,GAAiBA,SAAjB;IACA,KAAKC,MAAL,GAAcA,MAAd;EACH;;EACDX,MAAM,CAACC,cAAP,CAAsBI,SAAS,CAACO,SAAhC,EAA2C,MAA3C,EAAmD;IAC/CC,GAAG,EAAE,YAAY;MACb,OAAO,KAAKF,MAAL,CAAYG,MAAnB;IACH,CAH8C;IAI/CC,UAAU,EAAE,KAJmC;IAK/CC,YAAY,EAAE;EALiC,CAAnD;;EAOAX,SAAS,CAACO,SAAV,CAAoBK,QAApB,GAA+B,YAAY;IACvC,IAAIC,QAAQ,GAAG,EAAf;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKR,MAAL,CAAYG,MAAhC,EAAwCK,CAAC,EAAzC,EAA6C;MACzC,IAAIA,CAAC,GAAG,CAAR,EAAW;QACPD,QAAQ,IAAI,IAAZ;MACH;;MACDA,QAAQ,IAAI,KAAKP,MAAL,CAAYQ,CAAZ,CAAZ;IACH;;IACD,OAAO,eAAe,KAAKT,SAApB,GAAgC,KAAhC,GAAwCQ,QAAxC,GAAmD,IAA1D;EACH,CATD;;EAUA,OAAOb,SAAP;AACH,CA1B8B,EAA/B;;AA2BAH,OAAO,CAACG,SAAR,GAAoBA,SAApB;;AACA,SAASD,gBAAT,CAA0BgB,UAA1B,EAAsCC,YAAtC,EAAoDC,UAApD,EAAgE;EAC5D,IAAID,YAAY,KAAKC,UAArB,EAAiC;IAC7B,MAAM,CAAC,GAAGhB,mBAAmB,CAACiB,QAAxB,EAAkC,yBAAyBC,MAAzB,CAAgCJ,UAAhC,EAA4C,aAA5C,EAA2DI,MAA3D,CAAkEH,YAAlE,EAAgF,WAAhF,EAA6FG,MAA7F,CAAoGF,UAApG,CAAlC,EAAmJd,cAAnJ,CAAN;EACH;AACJ;;AACDN,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;AACAF,OAAO,CAACuB,OAAR,GAAkBpB,SAAlB"},"metadata":{},"sourceType":"script"}