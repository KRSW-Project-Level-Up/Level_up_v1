{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\n\nvar util = __importStar(require(\"./internal/temporal-util\"));\n\nvar util_1 = require(\"./internal/util\");\n\nvar error_1 = require(\"./error\");\n\nvar integer_1 = __importStar(require(\"./integer\"));\n\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n  value: true,\n  enumerable: false,\n  configurable: false,\n  writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\nvar Duration =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} months - The number of months for the new duration.\n   * @param {NumberOrInteger} days - The number of days for the new duration.\n   * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n   * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n   */\n  function Duration(months, days, seconds, nanoseconds) {\n    /**\n     * The number of months.\n     * @type {NumberOrInteger}\n     */\n    this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n    /**\n     * The number of days.\n     * @type {NumberOrInteger}\n     */\n\n    this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n    (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n    (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n    /**\n     * The number of seconds.\n     * @type {NumberOrInteger}\n     */\n\n    this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n    /**\n     * The number of nanoseconds.\n     * @type {NumberOrInteger}\n     */\n\n    this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n    Object.freeze(this);\n  }\n  /**\n   * @ignore\n   */\n\n\n  Duration.prototype.toString = function () {\n    return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n  };\n\n  return Duration;\n}();\n\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\n\nfunction isDuration(obj) {\n  return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\n\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\nvar LocalTime =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalTime(hour, minute, second, nanosecond) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month, day and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalTime<number>} New LocalTime.\n   */\n\n\n  LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n    return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default ? totalNanoseconds.toInt() : typeof totalNanoseconds === 'bigint' ? (0, integer_1.int)(totalNanoseconds).toInt() : totalNanoseconds);\n  };\n  /**\n   * @ignore\n   */\n\n\n  LocalTime.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n  };\n\n  return LocalTime;\n}();\n\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\n\nfunction isLocalTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\nvar Time =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   */\n  function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    /**\n     * The time zone offset in seconds.\n     * @type {NumberOrInteger}\n     */\n\n    this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Year, month and day components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {Time<number>} New Time.\n   */\n\n\n  Time.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n  };\n  /**\n   * @ignore\n   */\n\n\n  Time.prototype.toString = function () {\n    return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds);\n  };\n\n  return Time;\n}();\n\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\n\nfunction isTime(obj) {\n  return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\nvar Date =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   */\n  function Date(year, month, day) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n\n    this.day = util.assertValidDay(day);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link Date} object from the given standard JavaScript `Date`.\n   * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @return {Date} New Date.\n   */\n\n\n  Date.fromStandardDate = function (standardDate) {\n    verifyStandardDateAndNanos(standardDate);\n    return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n  };\n  /**\n   * Convert date to standard JavaScript `Date`.\n   *\n   * The time component of the returned `Date` is set to midnight\n   * and the time zone is set to UTC.\n   *\n   * @returns {StandardDate} Standard JavaScript `Date` at `00:00:00.000` UTC.\n   */\n\n\n  Date.prototype.toStandardDate = function () {\n    return util.isoStringToStandardDate(this.toString());\n  };\n  /**\n   * @ignore\n   */\n\n\n  Date.prototype.toString = function () {\n    return util.dateToIsoString(this.year, this.month, this.day);\n  };\n\n  return Date;\n}();\n\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\n\nfunction isDate(obj) {\n  return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\n\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\nvar LocalDateTime =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new local date.\n   * @param {NumberOrInteger} month - The month for the new local date.\n   * @param {NumberOrInteger} day - The day for the new local date.\n   * @param {NumberOrInteger} hour - The hour for the new local time.\n   * @param {NumberOrInteger} minute - The minute for the new local time.\n   * @param {NumberOrInteger} second - The second for the new local time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n   */\n  function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * Time zone offset component of the given date is ignored.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {LocalDateTime} New LocalDateTime.\n   */\n\n\n  LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n  };\n  /**\n   * Convert date to standard JavaScript `Date`.\n   *\n   * @returns {StandardDate} Standard JavaScript `Date` at the local timezone\n   */\n\n\n  LocalDateTime.prototype.toStandardDate = function () {\n    return util.isoStringToStandardDate(this.toString());\n  };\n  /**\n   * @ignore\n   */\n\n\n  LocalDateTime.prototype.toString = function () {\n    return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n  };\n\n  return LocalDateTime;\n}();\n\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\n\nfunction isLocalDateTime(obj) {\n  return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\n\nvar DateTime =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {NumberOrInteger} year - The year for the new date-time.\n   * @param {NumberOrInteger} month - The month for the new date-time.\n   * @param {NumberOrInteger} day - The day for the new date-time.\n   * @param {NumberOrInteger} hour - The hour for the new date-time.\n   * @param {NumberOrInteger} minute - The minute for the new date-time.\n   * @param {NumberOrInteger} second - The second for the new date-time.\n   * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n   * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n   * Value represents the difference, in seconds, from UTC to local time.\n   * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n   * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n   */\n  function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n    /**\n     * The year.\n     * @type {NumberOrInteger}\n     */\n    this.year = util.assertValidYear(year);\n    /**\n     * The month.\n     * @type {NumberOrInteger}\n     */\n\n    this.month = util.assertValidMonth(month);\n    /**\n     * The day.\n     * @type {NumberOrInteger}\n     */\n\n    this.day = util.assertValidDay(day);\n    /**\n     * The hour.\n     * @type {NumberOrInteger}\n     */\n\n    this.hour = util.assertValidHour(hour);\n    /**\n     * The minute.\n     * @type {NumberOrInteger}\n     */\n\n    this.minute = util.assertValidMinute(minute);\n    /**\n     * The second.\n     * @type {NumberOrInteger}\n     */\n\n    this.second = util.assertValidSecond(second);\n    /**\n     * The nanosecond.\n     * @type {NumberOrInteger}\n     */\n\n    this.nanosecond = util.assertValidNanosecond(nanosecond);\n\n    var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2),\n        offset = _a[0],\n        id = _a[1];\n    /**\n     * The time zone offset in seconds.\n     *\n     * *Either this or {@link timeZoneId} is defined.*\n     *\n     * @type {NumberOrInteger}\n     */\n\n\n    this.timeZoneOffsetSeconds = offset;\n    /**\n     * The time zone id.\n     *\n     * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n     *\n     * @type {string}\n     */\n\n    this.timeZoneId = id !== null && id !== void 0 ? id : undefined;\n    Object.freeze(this);\n  }\n  /**\n   * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n   * @param {global.Date} standardDate - The standard JavaScript date to convert.\n   * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n   * @return {DateTime} New DateTime.\n   */\n\n\n  DateTime.fromStandardDate = function (standardDate, nanosecond) {\n    verifyStandardDateAndNanos(standardDate, nanosecond);\n    return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null\n    /* no time zone id */\n    );\n  };\n  /**\n   * Convert date to standard JavaScript `Date`.\n   *\n   * @returns {StandardDate} Standard JavaScript `Date` at the defined time zone offset\n   * @throws {Error} If the time zone offset is not defined in the object.\n   */\n\n\n  DateTime.prototype.toStandardDate = function () {\n    return util.toStandardDate(this._toUTC());\n  };\n  /**\n   * @ignore\n   */\n\n\n  DateTime.prototype.toString = function () {\n    var _a;\n\n    var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    var timeOffset = this.timeZoneOffsetSeconds != null ? util.timeZoneOffsetToIsoString((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0) : '';\n    var timeZoneStr = this.timeZoneId != null ? \"[\".concat(this.timeZoneId, \"]\") : '';\n    return localDateTimeStr + timeOffset + timeZoneStr;\n  };\n  /**\n   * @private\n   * @returns {number}\n   */\n\n\n  DateTime.prototype._toUTC = function () {\n    var _a;\n\n    if (this.timeZoneOffsetSeconds === undefined) {\n      throw new Error('Requires DateTime created with time zone offset');\n    }\n\n    var epochSecond = util.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    var utcSecond = epochSecond.subtract((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0);\n    return (0, integer_1.int)(utcSecond).multiply(1000).add((0, integer_1.int)(this.nanosecond).div(1000000)).toNumber();\n  };\n\n  return DateTime;\n}();\n\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\n\nfunction isDateTime(obj) {\n  return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\n\nexports.isDateTime = isDateTime;\n\nfunction hasIdentifierProperty(obj, property) {\n  return obj != null && obj[property] === true;\n}\n\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n  return util.dateToIsoString(year, month, day) + 'T' + util.timeToIsoString(hour, minute, second, nanosecond);\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\n\n\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n  var offsetDefined = timeZoneOffsetSeconds !== null && timeZoneOffsetSeconds !== undefined;\n  var idDefined = timeZoneId !== null && timeZoneId !== undefined && timeZoneId !== '';\n\n  if (!offsetDefined && !idDefined) {\n    throw (0, error_1.newError)( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    \"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n  }\n\n  var result = [undefined, undefined];\n\n  if (offsetDefined) {\n    (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n    result[0] = timeZoneOffsetSeconds;\n  }\n\n  if (idDefined) {\n    (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n    util.assertValidZoneId('Time zone ID', timeZoneId);\n    result[1] = timeZoneId;\n  }\n\n  return result;\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\n\n\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n  (0, util_1.assertValidDate)(standardDate, 'Standard date');\n\n  if (nanosecond !== null && nanosecond !== undefined) {\n    (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n  }\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__read","n","Symbol","iterator","i","r","ar","e","next","done","push","error","exports","isDateTime","DateTime","isLocalDateTime","LocalDateTime","isDate","Date","isTime","Time","isLocalTime","LocalTime","isDuration","Duration","util","require","util_1","error_1","integer_1","IDENTIFIER_PROPERTY_ATTRIBUTES","DURATION_IDENTIFIER_PROPERTY","LOCAL_TIME_IDENTIFIER_PROPERTY","TIME_IDENTIFIER_PROPERTY","DATE_IDENTIFIER_PROPERTY","LOCAL_DATE_TIME_IDENTIFIER_PROPERTY","DATE_TIME_IDENTIFIER_PROPERTY","months","days","seconds","nanoseconds","assertNumberOrInteger","normalizeSecondsForDuration","normalizeNanosecondsForDuration","freeze","toString","durationToIsoString","obj","hasIdentifierProperty","hour","minute","second","nanosecond","assertValidHour","assertValidMinute","assertValidSecond","assertValidNanosecond","fromStandardDate","standardDate","verifyStandardDateAndNanos","totalNanoseconds","getHours","getMinutes","getSeconds","default","toInt","int","timeToIsoString","timeZoneOffsetSeconds","toNumber","timeZoneOffsetInSeconds","timeZoneOffsetToIsoString","year","month","day","assertValidYear","assertValidMonth","assertValidDay","getFullYear","getMonth","getDate","toStandardDate","isoStringToStandardDate","dateToIsoString","localDateTimeToString","timeZoneId","_a","verifyTimeZoneArguments","offset","id","_toUTC","localDateTimeStr","timeOffset","timeZoneStr","concat","Error","epochSecond","localDateTimeToEpochSecond","utcSecond","subtract","multiply","add","div","property","offsetDefined","idDefined","newError","assertString","assertValidZoneId","assertValidDate"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-core/lib/temporal-types.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\nvar util = __importStar(require(\"./internal/temporal-util\"));\nvar util_1 = require(\"./internal/util\");\nvar error_1 = require(\"./error\");\nvar integer_1 = __importStar(require(\"./integer\"));\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n    value: true,\n    enumerable: false,\n    configurable: false,\n    writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Duration = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} months - The number of months for the new duration.\n     * @param {NumberOrInteger} days - The number of days for the new duration.\n     * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n     * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n     */\n    function Duration(months, days, seconds, nanoseconds) {\n        /**\n         * The number of months.\n         * @type {NumberOrInteger}\n         */\n        this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n        /**\n         * The number of days.\n         * @type {NumberOrInteger}\n         */\n        this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n        (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n        (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n        /**\n         * The number of seconds.\n         * @type {NumberOrInteger}\n         */\n        this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n        /**\n         * The number of nanoseconds.\n         * @type {NumberOrInteger}\n         */\n        this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n        Object.freeze(this);\n    }\n    /**\n     * @ignore\n     */\n    Duration.prototype.toString = function () {\n        return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n    };\n    return Duration;\n}());\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\nfunction isDuration(obj) {\n    return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalTime(hour, minute, second, nanosecond) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month, day and time zone offset components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalTime<number>} New LocalTime.\n     */\n    LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n        return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default\n            ? totalNanoseconds.toInt()\n            : typeof totalNanoseconds === 'bigint'\n                ? (0, integer_1.int)(totalNanoseconds).toInt()\n                : totalNanoseconds);\n    };\n    /**\n     * @ignore\n     */\n    LocalTime.prototype.toString = function () {\n        return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalTime;\n}());\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\nfunction isLocalTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Time = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     */\n    function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        /**\n         * The time zone offset in seconds.\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month and day components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {Time<number>} New Time.\n     */\n    Time.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n    };\n    /**\n     * @ignore\n     */\n    Time.prototype.toString = function () {\n        return (util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds));\n    };\n    return Time;\n}());\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\nfunction isTime(obj) {\n    return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Date = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     */\n    function Date(year, month, day) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Date} object from the given standard JavaScript `Date`.\n     * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @return {Date} New Date.\n     */\n    Date.fromStandardDate = function (standardDate) {\n        verifyStandardDateAndNanos(standardDate);\n        return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * The time component of the returned `Date` is set to midnight\n     * and the time zone is set to UTC.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at `00:00:00.000` UTC.\n     */\n    Date.prototype.toStandardDate = function () {\n        return util.isoStringToStandardDate(this.toString());\n    };\n    /**\n     * @ignore\n     */\n    Date.prototype.toString = function () {\n        return util.dateToIsoString(this.year, this.month, this.day);\n    };\n    return Date;\n}());\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\nfunction isDate(obj) {\n    return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalDateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Time zone offset component of the given date is ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalDateTime} New LocalDateTime.\n     */\n    LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at the local timezone\n     */\n    LocalDateTime.prototype.toStandardDate = function () {\n        return util.isoStringToStandardDate(this.toString());\n    };\n    /**\n     * @ignore\n     */\n    LocalDateTime.prototype.toString = function () {\n        return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalDateTime;\n}());\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\nfunction isLocalDateTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar DateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new date-time.\n     * @param {NumberOrInteger} month - The month for the new date-time.\n     * @param {NumberOrInteger} day - The day for the new date-time.\n     * @param {NumberOrInteger} hour - The hour for the new date-time.\n     * @param {NumberOrInteger} minute - The minute for the new date-time.\n     * @param {NumberOrInteger} second - The second for the new date-time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n     * Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n     */\n    function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2), offset = _a[0], id = _a[1];\n        /**\n         * The time zone offset in seconds.\n         *\n         * *Either this or {@link timeZoneId} is defined.*\n         *\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = offset;\n        /**\n         * The time zone id.\n         *\n         * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n         *\n         * @type {string}\n         */\n        this.timeZoneId = id !== null && id !== void 0 ? id : undefined;\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {DateTime} New DateTime.\n     */\n    DateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at the defined time zone offset\n     * @throws {Error} If the time zone offset is not defined in the object.\n     */\n    DateTime.prototype.toStandardDate = function () {\n        return util.toStandardDate(this._toUTC());\n    };\n    /**\n     * @ignore\n     */\n    DateTime.prototype.toString = function () {\n        var _a;\n        var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n        var timeOffset = this.timeZoneOffsetSeconds != null\n            ? util.timeZoneOffsetToIsoString((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0)\n            : '';\n        var timeZoneStr = this.timeZoneId != null\n            ? \"[\".concat(this.timeZoneId, \"]\")\n            : '';\n        return localDateTimeStr + timeOffset + timeZoneStr;\n    };\n    /**\n     * @private\n     * @returns {number}\n     */\n    DateTime.prototype._toUTC = function () {\n        var _a;\n        if (this.timeZoneOffsetSeconds === undefined) {\n            throw new Error('Requires DateTime created with time zone offset');\n        }\n        var epochSecond = util.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n        var utcSecond = epochSecond.subtract((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0);\n        return (0, integer_1.int)(utcSecond)\n            .multiply(1000)\n            .add((0, integer_1.int)(this.nanosecond).div(1000000))\n            .toNumber();\n    };\n    return DateTime;\n}());\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\nfunction isDateTime(obj) {\n    return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isDateTime = isDateTime;\nfunction hasIdentifierProperty(obj, property) {\n    return obj != null && obj[property] === true;\n}\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n    return (util.dateToIsoString(year, month, day) +\n        'T' +\n        util.timeToIsoString(hour, minute, second, nanosecond));\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n    var offsetDefined = timeZoneOffsetSeconds !== null && timeZoneOffsetSeconds !== undefined;\n    var idDefined = timeZoneId !== null && timeZoneId !== undefined && timeZoneId !== '';\n    if (!offsetDefined && !idDefined) {\n        throw (0, error_1.newError)(\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        \"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n    }\n    var result = [undefined, undefined];\n    if (offsetDefined) {\n        (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        result[0] = timeZoneOffsetSeconds;\n    }\n    if (idDefined) {\n        (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n        util.assertValidZoneId('Time zone ID', timeZoneId);\n        result[1] = timeZoneId;\n    }\n    return result;\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n    (0, util_1.assertValidDate)(standardDate, 'Standard date');\n    if (nanosecond !== null && nanosecond !== undefined) {\n        (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,KAAmCC,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;EAC5F,IAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;EACtB,IAAIG,IAAI,GAAGP,MAAM,CAACQ,wBAAP,CAAgCL,CAAhC,EAAmCC,CAAnC,CAAX;;EACA,IAAI,CAACG,IAAD,KAAU,SAASA,IAAT,GAAgB,CAACJ,CAAC,CAACM,UAAnB,GAAgCF,IAAI,CAACG,QAAL,IAAiBH,IAAI,CAACI,YAAhE,CAAJ,EAAmF;IACjFJ,IAAI,GAAG;MAAEK,UAAU,EAAE,IAAd;MAAoBC,GAAG,EAAE,YAAW;QAAE,OAAOV,CAAC,CAACC,CAAD,CAAR;MAAc;IAApD,CAAP;EACD;;EACDJ,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyBG,EAAzB,EAA6BE,IAA7B;AACH,CAPwD,GAOnD,UAASL,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;EACxB,IAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;EACtBF,CAAC,CAACG,EAAD,CAAD,GAAQF,CAAC,CAACC,CAAD,CAAT;AACH,CAVqB,CAAtB;;AAWA,IAAIW,kBAAkB,GAAI,QAAQ,KAAKA,kBAAd,KAAsCf,MAAM,CAACC,MAAP,GAAiB,UAASC,CAAT,EAAYc,CAAZ,EAAe;EAC3FhB,MAAM,CAACc,cAAP,CAAsBZ,CAAtB,EAAyB,SAAzB,EAAoC;IAAEU,UAAU,EAAE,IAAd;IAAoBK,KAAK,EAAED;EAA3B,CAApC;AACH,CAF8D,GAE1D,UAASd,CAAT,EAAYc,CAAZ,EAAe;EAChBd,CAAC,CAAC,SAAD,CAAD,GAAec,CAAf;AACH,CAJwB,CAAzB;;AAKA,IAAIE,YAAY,GAAI,QAAQ,KAAKA,YAAd,IAA+B,UAAUC,GAAV,EAAe;EAC7D,IAAIA,GAAG,IAAIA,GAAG,CAACV,UAAf,EAA2B,OAAOU,GAAP;EAC3B,IAAIC,MAAM,GAAG,EAAb;EACA,IAAID,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAIf,CAAT,IAAce,GAAd,EAAmB,IAAIf,CAAC,KAAK,SAAN,IAAmBJ,MAAM,CAACqB,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,GAArC,EAA0Cf,CAA1C,CAAvB,EAAqEL,eAAe,CAACqB,MAAD,EAASD,GAAT,EAAcf,CAAd,CAAf;;EACzGW,kBAAkB,CAACK,MAAD,EAASD,GAAT,CAAlB;;EACA,OAAOC,MAAP;AACH,CAND;;AAOA,IAAII,MAAM,GAAI,QAAQ,KAAKA,MAAd,IAAyB,UAAUtB,CAAV,EAAauB,CAAb,EAAgB;EAClD,IAAItB,CAAC,GAAG,OAAOuB,MAAP,KAAkB,UAAlB,IAAgCxB,CAAC,CAACwB,MAAM,CAACC,QAAR,CAAzC;EACA,IAAI,CAACxB,CAAL,EAAQ,OAAOD,CAAP;EACR,IAAI0B,CAAC,GAAGzB,CAAC,CAACoB,IAAF,CAAOrB,CAAP,CAAR;EAAA,IAAmB2B,CAAnB;EAAA,IAAsBC,EAAE,GAAG,EAA3B;EAAA,IAA+BC,CAA/B;;EACA,IAAI;IACA,OAAO,CAACN,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACI,CAAC,GAAGD,CAAC,CAACI,IAAF,EAAL,EAAeC,IAApD,EAA0DH,EAAE,CAACI,IAAH,CAAQL,CAAC,CAACZ,KAAV;EAC7D,CAFD,CAGA,OAAOkB,KAAP,EAAc;IAAEJ,CAAC,GAAG;MAAEI,KAAK,EAAEA;IAAT,CAAJ;EAAuB,CAHvC,SAIQ;IACJ,IAAI;MACA,IAAIN,CAAC,IAAI,CAACA,CAAC,CAACI,IAAR,KAAiB9B,CAAC,GAAGyB,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCzB,CAAC,CAACoB,IAAF,CAAOK,CAAP;IAC1C,CAFD,SAGQ;MAAE,IAAIG,CAAJ,EAAO,MAAMA,CAAC,CAACI,KAAR;IAAgB;EACpC;;EACD,OAAOL,EAAP;AACH,CAfD;;AAgBA9B,MAAM,CAACc,cAAP,CAAsBsB,OAAtB,EAA+B,YAA/B,EAA6C;EAAEnB,KAAK,EAAE;AAAT,CAA7C;AACAmB,OAAO,CAACC,UAAR,GAAqBD,OAAO,CAACE,QAAR,GAAmBF,OAAO,CAACG,eAAR,GAA0BH,OAAO,CAACI,aAAR,GAAwBJ,OAAO,CAACK,MAAR,GAAiBL,OAAO,CAACM,IAAR,GAAeN,OAAO,CAACO,MAAR,GAAiBP,OAAO,CAACQ,IAAR,GAAeR,OAAO,CAACS,WAAR,GAAsBT,OAAO,CAACU,SAAR,GAAoBV,OAAO,CAACW,UAAR,GAAqBX,OAAO,CAACY,QAAR,GAAmB,KAAK,CAAjP;;AACA,IAAIC,IAAI,GAAG/B,YAAY,CAACgC,OAAO,CAAC,0BAAD,CAAR,CAAvB;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,iBAAD,CAApB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIG,SAAS,GAAGnC,YAAY,CAACgC,OAAO,CAAC,WAAD,CAAR,CAA5B;;AACA,IAAII,8BAA8B,GAAG;EACjCrC,KAAK,EAAE,IAD0B;EAEjCL,UAAU,EAAE,KAFqB;EAGjCD,YAAY,EAAE,KAHmB;EAIjCD,QAAQ,EAAE;AAJuB,CAArC;AAMA,IAAI6C,4BAA4B,GAAG,gBAAnC;AACA,IAAIC,8BAA8B,GAAG,iBAArC;AACA,IAAIC,wBAAwB,GAAG,YAA/B;AACA,IAAIC,wBAAwB,GAAG,YAA/B;AACA,IAAIC,mCAAmC,GAAG,qBAA1C;AACA,IAAIC,6BAA6B,GAAG,gBAApC;AACA;AACA;AACA;AACA;;AACA,IAAIZ,QAAQ;AAAG;AAAe,YAAY;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,QAAT,CAAkBa,MAAlB,EAA0BC,IAA1B,EAAgCC,OAAhC,EAAyCC,WAAzC,EAAsD;IAClD;AACR;AACA;AACA;IACQ,KAAKH,MAAL,GAAc,CAAC,GAAGV,MAAM,CAACc,qBAAX,EAAkCJ,MAAlC,EAA0C,QAA1C,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,IAAL,GAAY,CAAC,GAAGX,MAAM,CAACc,qBAAX,EAAkCH,IAAlC,EAAwC,MAAxC,CAAZ;IACA,CAAC,GAAGX,MAAM,CAACc,qBAAX,EAAkCF,OAAlC,EAA2C,SAA3C;IACA,CAAC,GAAGZ,MAAM,CAACc,qBAAX,EAAkCD,WAAlC,EAA+C,aAA/C;IACA;AACR;AACA;AACA;;IACQ,KAAKD,OAAL,GAAed,IAAI,CAACiB,2BAAL,CAAiCH,OAAjC,EAA0CC,WAA1C,CAAf;IACA;AACR;AACA;AACA;;IACQ,KAAKA,WAAL,GAAmBf,IAAI,CAACkB,+BAAL,CAAqCH,WAArC,CAAnB;IACAhE,MAAM,CAACoE,MAAP,CAAc,IAAd;EACH;EACD;AACJ;AACA;;;EACIpB,QAAQ,CAAC3B,SAAT,CAAmBgD,QAAnB,GAA8B,YAAY;IACtC,OAAOpB,IAAI,CAACqB,mBAAL,CAAyB,KAAKT,MAA9B,EAAsC,KAAKC,IAA3C,EAAiD,KAAKC,OAAtD,EAA+D,KAAKC,WAApE,CAAP;EACH,CAFD;;EAGA,OAAOhB,QAAP;AACH,CAxC6B,EAA9B;;AAyCAZ,OAAO,CAACY,QAAR,GAAmBA,QAAnB;AACAhD,MAAM,CAACc,cAAP,CAAsBkC,QAAQ,CAAC3B,SAA/B,EAA0CkC,4BAA1C,EAAwED,8BAAxE;AACA;AACA;AACA;AACA;AACA;;AACA,SAASP,UAAT,CAAoBwB,GAApB,EAAyB;EACrB,OAAOC,qBAAqB,CAACD,GAAD,EAAMhB,4BAAN,CAA5B;AACH;;AACDnB,OAAO,CAACW,UAAR,GAAqBA,UAArB;AACA;AACA;AACA;AACA;;AACA,IAAID,SAAS;AAAG;AAAe,YAAY;EACvC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,SAAT,CAAmB2B,IAAnB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,UAAzC,EAAqD;IACjD;AACR;AACA;AACA;IACQ,KAAKH,IAAL,GAAYxB,IAAI,CAAC4B,eAAL,CAAqBJ,IAArB,CAAZ;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAczB,IAAI,CAAC6B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc1B,IAAI,CAAC8B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkB3B,IAAI,CAAC+B,qBAAL,CAA2BJ,UAA3B,CAAlB;IACA5E,MAAM,CAACoE,MAAP,CAAc,IAAd;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACItB,SAAS,CAACmC,gBAAV,GAA6B,UAAUC,YAAV,EAAwBN,UAAxB,EAAoC;IAC7DO,0BAA0B,CAACD,YAAD,EAAeN,UAAf,CAA1B;IACA,IAAIQ,gBAAgB,GAAGnC,IAAI,CAACmC,gBAAL,CAAsBF,YAAtB,EAAoCN,UAApC,CAAvB;IACA,OAAO,IAAI9B,SAAJ,CAAcoC,YAAY,CAACG,QAAb,EAAd,EAAuCH,YAAY,CAACI,UAAb,EAAvC,EAAkEJ,YAAY,CAACK,UAAb,EAAlE,EAA6FH,gBAAgB,YAAY/B,SAAS,CAACmC,OAAtC,GAC9FJ,gBAAgB,CAACK,KAAjB,EAD8F,GAE9F,OAAOL,gBAAP,KAA4B,QAA5B,GACI,CAAC,GAAG/B,SAAS,CAACqC,GAAd,EAAmBN,gBAAnB,EAAqCK,KAArC,EADJ,GAEIL,gBAJH,CAAP;EAKH,CARD;EASA;AACJ;AACA;;;EACItC,SAAS,CAACzB,SAAV,CAAoBgD,QAApB,GAA+B,YAAY;IACvC,OAAOpB,IAAI,CAAC0C,eAAL,CAAqB,KAAKlB,IAA1B,EAAgC,KAAKC,MAArC,EAA6C,KAAKC,MAAlD,EAA0D,KAAKC,UAA/D,CAAP;EACH,CAFD;;EAGA,OAAO9B,SAAP;AACH,CAtD8B,EAA/B;;AAuDAV,OAAO,CAACU,SAAR,GAAoBA,SAApB;AACA9C,MAAM,CAACc,cAAP,CAAsBgC,SAAS,CAACzB,SAAhC,EAA2CmC,8BAA3C,EAA2EF,8BAA3E;AACA;AACA;AACA;AACA;AACA;;AACA,SAAST,WAAT,CAAqB0B,GAArB,EAA0B;EACtB,OAAOC,qBAAqB,CAACD,GAAD,EAAMf,8BAAN,CAA5B;AACH;;AACDpB,OAAO,CAACS,WAAR,GAAsBA,WAAtB;AACA;AACA;AACA;AACA;;AACA,IAAID,IAAI;AAAG;AAAe,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,IAAT,CAAc6B,IAAd,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDgB,qBAAhD,EAAuE;IACnE;AACR;AACA;AACA;IACQ,KAAKnB,IAAL,GAAYxB,IAAI,CAAC4B,eAAL,CAAqBJ,IAArB,CAAZ;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAczB,IAAI,CAAC6B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc1B,IAAI,CAAC8B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkB3B,IAAI,CAAC+B,qBAAL,CAA2BJ,UAA3B,CAAlB;IACA;AACR;AACA;AACA;;IACQ,KAAKgB,qBAAL,GAA6B,CAAC,GAAGzC,MAAM,CAACc,qBAAX,EAAkC2B,qBAAlC,EAAyD,6BAAzD,CAA7B;IACA5F,MAAM,CAACoE,MAAP,CAAc,IAAd;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIxB,IAAI,CAACqC,gBAAL,GAAwB,UAAUC,YAAV,EAAwBN,UAAxB,EAAoC;IACxDO,0BAA0B,CAACD,YAAD,EAAeN,UAAf,CAA1B;IACA,OAAO,IAAIhC,IAAJ,CAASsC,YAAY,CAACG,QAAb,EAAT,EAAkCH,YAAY,CAACI,UAAb,EAAlC,EAA6DJ,YAAY,CAACK,UAAb,EAA7D,EAAwF,CAAC,GAAGlC,SAAS,CAACwC,QAAd,EAAwB5C,IAAI,CAACmC,gBAAL,CAAsBF,YAAtB,EAAoCN,UAApC,CAAxB,CAAxF,EAAkK3B,IAAI,CAAC6C,uBAAL,CAA6BZ,YAA7B,CAAlK,CAAP;EACH,CAHD;EAIA;AACJ;AACA;;;EACItC,IAAI,CAACvB,SAAL,CAAegD,QAAf,GAA0B,YAAY;IAClC,OAAQpB,IAAI,CAAC0C,eAAL,CAAqB,KAAKlB,IAA1B,EAAgC,KAAKC,MAArC,EAA6C,KAAKC,MAAlD,EAA0D,KAAKC,UAA/D,IAA6E3B,IAAI,CAAC8C,yBAAL,CAA+B,KAAKH,qBAApC,CAArF;EACH,CAFD;;EAGA,OAAOhD,IAAP;AACH,CAxDyB,EAA1B;;AAyDAR,OAAO,CAACQ,IAAR,GAAeA,IAAf;AACA5C,MAAM,CAACc,cAAP,CAAsB8B,IAAI,CAACvB,SAA3B,EAAsCoC,wBAAtC,EAAgEH,8BAAhE;AACA;AACA;AACA;AACA;AACA;;AACA,SAASX,MAAT,CAAgB4B,GAAhB,EAAqB;EACjB,OAAOC,qBAAqB,CAACD,GAAD,EAAMd,wBAAN,CAA5B;AACH;;AACDrB,OAAO,CAACO,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;;AACA,IAAID,IAAI;AAAG;AAAe,YAAY;EAClC;AACJ;AACA;AACA;AACA;AACA;EACI,SAASA,IAAT,CAAcsD,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;IAC5B;AACR;AACA;AACA;IACQ,KAAKF,IAAL,GAAY/C,IAAI,CAACkD,eAAL,CAAqBH,IAArB,CAAZ;IACA;AACR;AACA;AACA;;IACQ,KAAKC,KAAL,GAAahD,IAAI,CAACmD,gBAAL,CAAsBH,KAAtB,CAAb;IACA;AACR;AACA;AACA;;IACQ,KAAKC,GAAL,GAAWjD,IAAI,CAACoD,cAAL,CAAoBH,GAApB,CAAX;IACAlG,MAAM,CAACoE,MAAP,CAAc,IAAd;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI1B,IAAI,CAACuC,gBAAL,GAAwB,UAAUC,YAAV,EAAwB;IAC5CC,0BAA0B,CAACD,YAAD,CAA1B;IACA,OAAO,IAAIxC,IAAJ,CAASwC,YAAY,CAACoB,WAAb,EAAT,EAAqCpB,YAAY,CAACqB,QAAb,KAA0B,CAA/D,EAAkErB,YAAY,CAACsB,OAAb,EAAlE,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACI9D,IAAI,CAACrB,SAAL,CAAeoF,cAAf,GAAgC,YAAY;IACxC,OAAOxD,IAAI,CAACyD,uBAAL,CAA6B,KAAKrC,QAAL,EAA7B,CAAP;EACH,CAFD;EAGA;AACJ;AACA;;;EACI3B,IAAI,CAACrB,SAAL,CAAegD,QAAf,GAA0B,YAAY;IAClC,OAAOpB,IAAI,CAAC0D,eAAL,CAAqB,KAAKX,IAA1B,EAAgC,KAAKC,KAArC,EAA4C,KAAKC,GAAjD,CAAP;EACH,CAFD;;EAGA,OAAOxD,IAAP;AACH,CArDyB,EAA1B;;AAsDAN,OAAO,CAACM,IAAR,GAAeA,IAAf;AACA1C,MAAM,CAACc,cAAP,CAAsB4B,IAAI,CAACrB,SAA3B,EAAsCqC,wBAAtC,EAAgEJ,8BAAhE;AACA;AACA;AACA;AACA;AACA;;AACA,SAASb,MAAT,CAAgB8B,GAAhB,EAAqB;EACjB,OAAOC,qBAAqB,CAACD,GAAD,EAAMb,wBAAN,CAA5B;AACH;;AACDtB,OAAO,CAACK,MAAR,GAAiBA,MAAjB;AACA;AACA;AACA;AACA;;AACA,IAAID,aAAa;AAAG;AAAe,YAAY;EAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,aAAT,CAAuBwD,IAAvB,EAA6BC,KAA7B,EAAoCC,GAApC,EAAyCzB,IAAzC,EAA+CC,MAA/C,EAAuDC,MAAvD,EAA+DC,UAA/D,EAA2E;IACvE;AACR;AACA;AACA;IACQ,KAAKoB,IAAL,GAAY/C,IAAI,CAACkD,eAAL,CAAqBH,IAArB,CAAZ;IACA;AACR;AACA;AACA;;IACQ,KAAKC,KAAL,GAAahD,IAAI,CAACmD,gBAAL,CAAsBH,KAAtB,CAAb;IACA;AACR;AACA;AACA;;IACQ,KAAKC,GAAL,GAAWjD,IAAI,CAACoD,cAAL,CAAoBH,GAApB,CAAX;IACA;AACR;AACA;AACA;;IACQ,KAAKzB,IAAL,GAAYxB,IAAI,CAAC4B,eAAL,CAAqBJ,IAArB,CAAZ;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAczB,IAAI,CAAC6B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc1B,IAAI,CAAC8B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkB3B,IAAI,CAAC+B,qBAAL,CAA2BJ,UAA3B,CAAlB;IACA5E,MAAM,CAACoE,MAAP,CAAc,IAAd;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACI5B,aAAa,CAACyC,gBAAd,GAAiC,UAAUC,YAAV,EAAwBN,UAAxB,EAAoC;IACjEO,0BAA0B,CAACD,YAAD,EAAeN,UAAf,CAA1B;IACA,OAAO,IAAIpC,aAAJ,CAAkB0C,YAAY,CAACoB,WAAb,EAAlB,EAA8CpB,YAAY,CAACqB,QAAb,KAA0B,CAAxE,EAA2ErB,YAAY,CAACsB,OAAb,EAA3E,EAAmGtB,YAAY,CAACG,QAAb,EAAnG,EAA4HH,YAAY,CAACI,UAAb,EAA5H,EAAuJJ,YAAY,CAACK,UAAb,EAAvJ,EAAkL,CAAC,GAAGlC,SAAS,CAACwC,QAAd,EAAwB5C,IAAI,CAACmC,gBAAL,CAAsBF,YAAtB,EAAoCN,UAApC,CAAxB,CAAlL,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;;;EACIpC,aAAa,CAACnB,SAAd,CAAwBoF,cAAxB,GAAyC,YAAY;IACjD,OAAOxD,IAAI,CAACyD,uBAAL,CAA6B,KAAKrC,QAAL,EAA7B,CAAP;EACH,CAFD;EAGA;AACJ;AACA;;;EACI7B,aAAa,CAACnB,SAAd,CAAwBgD,QAAxB,GAAmC,YAAY;IAC3C,OAAOuC,qBAAqB,CAAC,KAAKZ,IAAN,EAAY,KAAKC,KAAjB,EAAwB,KAAKC,GAA7B,EAAkC,KAAKzB,IAAvC,EAA6C,KAAKC,MAAlD,EAA0D,KAAKC,MAA/D,EAAuE,KAAKC,UAA5E,CAA5B;EACH,CAFD;;EAGA,OAAOpC,aAAP;AACH,CA3EkC,EAAnC;;AA4EAJ,OAAO,CAACI,aAAR,GAAwBA,aAAxB;AACAxC,MAAM,CAACc,cAAP,CAAsB0B,aAAa,CAACnB,SAApC,EAA+CsC,mCAA/C,EAAoFL,8BAApF;AACA;AACA;AACA;AACA;AACA;;AACA,SAASf,eAAT,CAAyBgC,GAAzB,EAA8B;EAC1B,OAAOC,qBAAqB,CAACD,GAAD,EAAMZ,mCAAN,CAA5B;AACH;;AACDvB,OAAO,CAACG,eAAR,GAA0BA,eAA1B;AACA;AACA;AACA;AACA;;AACA,IAAID,QAAQ;AAAG;AAAe,YAAY;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASA,QAAT,CAAkB0D,IAAlB,EAAwBC,KAAxB,EAA+BC,GAA/B,EAAoCzB,IAApC,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0DC,UAA1D,EAAsEgB,qBAAtE,EAA6FiB,UAA7F,EAAyG;IACrG;AACR;AACA;AACA;IACQ,KAAKb,IAAL,GAAY/C,IAAI,CAACkD,eAAL,CAAqBH,IAArB,CAAZ;IACA;AACR;AACA;AACA;;IACQ,KAAKC,KAAL,GAAahD,IAAI,CAACmD,gBAAL,CAAsBH,KAAtB,CAAb;IACA;AACR;AACA;AACA;;IACQ,KAAKC,GAAL,GAAWjD,IAAI,CAACoD,cAAL,CAAoBH,GAApB,CAAX;IACA;AACR;AACA;AACA;;IACQ,KAAKzB,IAAL,GAAYxB,IAAI,CAAC4B,eAAL,CAAqBJ,IAArB,CAAZ;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAczB,IAAI,CAAC6B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc1B,IAAI,CAAC8B,iBAAL,CAAuBJ,MAAvB,CAAd;IACA;AACR;AACA;AACA;;IACQ,KAAKC,UAAL,GAAkB3B,IAAI,CAAC+B,qBAAL,CAA2BJ,UAA3B,CAAlB;;IACA,IAAIkC,EAAE,GAAGtF,MAAM,CAACuF,uBAAuB,CAACnB,qBAAD,EAAwBiB,UAAxB,CAAxB,EAA6D,CAA7D,CAAf;IAAA,IAAgFG,MAAM,GAAGF,EAAE,CAAC,CAAD,CAA3F;IAAA,IAAgGG,EAAE,GAAGH,EAAE,CAAC,CAAD,CAAvG;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;;IACQ,KAAKlB,qBAAL,GAA6BoB,MAA7B;IACA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,KAAKH,UAAL,GAAkBI,EAAE,KAAK,IAAP,IAAeA,EAAE,KAAK,KAAK,CAA3B,GAA+BA,EAA/B,GAAoC3G,SAAtD;IACAN,MAAM,CAACoE,MAAP,CAAc,IAAd;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACI9B,QAAQ,CAAC2C,gBAAT,GAA4B,UAAUC,YAAV,EAAwBN,UAAxB,EAAoC;IAC5DO,0BAA0B,CAACD,YAAD,EAAeN,UAAf,CAA1B;IACA,OAAO,IAAItC,QAAJ,CAAa4C,YAAY,CAACoB,WAAb,EAAb,EAAyCpB,YAAY,CAACqB,QAAb,KAA0B,CAAnE,EAAsErB,YAAY,CAACsB,OAAb,EAAtE,EAA8FtB,YAAY,CAACG,QAAb,EAA9F,EAAuHH,YAAY,CAACI,UAAb,EAAvH,EAAkJJ,YAAY,CAACK,UAAb,EAAlJ,EAA6K,CAAC,GAAGlC,SAAS,CAACwC,QAAd,EAAwB5C,IAAI,CAACmC,gBAAL,CAAsBF,YAAtB,EAAoCN,UAApC,CAAxB,CAA7K,EAAuP3B,IAAI,CAAC6C,uBAAL,CAA6BZ,YAA7B,CAAvP,EAAmS;IAAK;IAAxS,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;AACA;;;EACI5C,QAAQ,CAACjB,SAAT,CAAmBoF,cAAnB,GAAoC,YAAY;IAC5C,OAAOxD,IAAI,CAACwD,cAAL,CAAoB,KAAKS,MAAL,EAApB,CAAP;EACH,CAFD;EAGA;AACJ;AACA;;;EACI5E,QAAQ,CAACjB,SAAT,CAAmBgD,QAAnB,GAA8B,YAAY;IACtC,IAAIyC,EAAJ;;IACA,IAAIK,gBAAgB,GAAGP,qBAAqB,CAAC,KAAKZ,IAAN,EAAY,KAAKC,KAAjB,EAAwB,KAAKC,GAA7B,EAAkC,KAAKzB,IAAvC,EAA6C,KAAKC,MAAlD,EAA0D,KAAKC,MAA/D,EAAuE,KAAKC,UAA5E,CAA5C;IACA,IAAIwC,UAAU,GAAG,KAAKxB,qBAAL,IAA8B,IAA9B,GACX3C,IAAI,CAAC8C,yBAAL,CAA+B,CAACe,EAAE,GAAG,KAAKlB,qBAAX,MAAsC,IAAtC,IAA8CkB,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,CAAlG,CADW,GAEX,EAFN;IAGA,IAAIO,WAAW,GAAG,KAAKR,UAAL,IAAmB,IAAnB,GACZ,IAAIS,MAAJ,CAAW,KAAKT,UAAhB,EAA4B,GAA5B,CADY,GAEZ,EAFN;IAGA,OAAOM,gBAAgB,GAAGC,UAAnB,GAAgCC,WAAvC;EACH,CAVD;EAWA;AACJ;AACA;AACA;;;EACI/E,QAAQ,CAACjB,SAAT,CAAmB6F,MAAnB,GAA4B,YAAY;IACpC,IAAIJ,EAAJ;;IACA,IAAI,KAAKlB,qBAAL,KAA+BtF,SAAnC,EAA8C;MAC1C,MAAM,IAAIiH,KAAJ,CAAU,iDAAV,CAAN;IACH;;IACD,IAAIC,WAAW,GAAGvE,IAAI,CAACwE,0BAAL,CAAgC,KAAKzB,IAArC,EAA2C,KAAKC,KAAhD,EAAuD,KAAKC,GAA5D,EAAiE,KAAKzB,IAAtE,EAA4E,KAAKC,MAAjF,EAAyF,KAAKC,MAA9F,EAAsG,KAAKC,UAA3G,CAAlB;IACA,IAAI8C,SAAS,GAAGF,WAAW,CAACG,QAAZ,CAAqB,CAACb,EAAE,GAAG,KAAKlB,qBAAX,MAAsC,IAAtC,IAA8CkB,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,CAAxF,CAAhB;IACA,OAAO,CAAC,GAAGzD,SAAS,CAACqC,GAAd,EAAmBgC,SAAnB,EACFE,QADE,CACO,IADP,EAEFC,GAFE,CAEE,CAAC,GAAGxE,SAAS,CAACqC,GAAd,EAAmB,KAAKd,UAAxB,EAAoCkD,GAApC,CAAwC,OAAxC,CAFF,EAGFjC,QAHE,EAAP;EAIH,CAXD;;EAYA,OAAOvD,QAAP;AACH,CAxH6B,EAA9B;;AAyHAF,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACAtC,MAAM,CAACc,cAAP,CAAsBwB,QAAQ,CAACjB,SAA/B,EAA0CuC,6BAA1C,EAAyEN,8BAAzE;AACA;AACA;AACA;AACA;AACA;;AACA,SAASjB,UAAT,CAAoBkC,GAApB,EAAyB;EACrB,OAAOC,qBAAqB,CAACD,GAAD,EAAMX,6BAAN,CAA5B;AACH;;AACDxB,OAAO,CAACC,UAAR,GAAqBA,UAArB;;AACA,SAASmC,qBAAT,CAA+BD,GAA/B,EAAoCwD,QAApC,EAA8C;EAC1C,OAAOxD,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACwD,QAAD,CAAH,KAAkB,IAAxC;AACH;;AACD,SAASnB,qBAAT,CAA+BZ,IAA/B,EAAqCC,KAArC,EAA4CC,GAA5C,EAAiDzB,IAAjD,EAAuDC,MAAvD,EAA+DC,MAA/D,EAAuEC,UAAvE,EAAmF;EAC/E,OAAQ3B,IAAI,CAAC0D,eAAL,CAAqBX,IAArB,EAA2BC,KAA3B,EAAkCC,GAAlC,IACJ,GADI,GAEJjD,IAAI,CAAC0C,eAAL,CAAqBlB,IAArB,EAA2BC,MAA3B,EAAmCC,MAAnC,EAA2CC,UAA3C,CAFJ;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,uBAAT,CAAiCnB,qBAAjC,EAAwDiB,UAAxD,EAAoE;EAChE,IAAImB,aAAa,GAAGpC,qBAAqB,KAAK,IAA1B,IAAkCA,qBAAqB,KAAKtF,SAAhF;EACA,IAAI2H,SAAS,GAAGpB,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAKvG,SAAtC,IAAmDuG,UAAU,KAAK,EAAlF;;EACA,IAAI,CAACmB,aAAD,IAAkB,CAACC,SAAvB,EAAkC;IAC9B,MAAM,CAAC,GAAG7E,OAAO,CAAC8E,QAAZ,GACN;IACA,iHAAiHZ,MAAjH,CAAwH1B,qBAAxH,EAA+I,WAA/I,EAA4J0B,MAA5J,CAAmKT,UAAnK,CAFM,CAAN;EAGH;;EACD,IAAIzF,MAAM,GAAG,CAACd,SAAD,EAAYA,SAAZ,CAAb;;EACA,IAAI0H,aAAJ,EAAmB;IACf,CAAC,GAAG7E,MAAM,CAACc,qBAAX,EAAkC2B,qBAAlC,EAAyD,6BAAzD;IACAxE,MAAM,CAAC,CAAD,CAAN,GAAYwE,qBAAZ;EACH;;EACD,IAAIqC,SAAJ,EAAe;IACX,CAAC,GAAG9E,MAAM,CAACgF,YAAX,EAAyBtB,UAAzB,EAAqC,cAArC;IACA5D,IAAI,CAACmF,iBAAL,CAAuB,cAAvB,EAAuCvB,UAAvC;IACAzF,MAAM,CAAC,CAAD,CAAN,GAAYyF,UAAZ;EACH;;EACD,OAAOzF,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+D,0BAAT,CAAoCD,YAApC,EAAkDN,UAAlD,EAA8D;EAC1D,CAAC,GAAGzB,MAAM,CAACkF,eAAX,EAA4BnD,YAA5B,EAA0C,eAA1C;;EACA,IAAIN,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAKtE,SAA1C,EAAqD;IACjD,CAAC,GAAG6C,MAAM,CAACc,qBAAX,EAAkCW,UAAlC,EAA8C,YAA9C;EACH;AACJ"},"metadata":{},"sourceType":"script"}