{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.notificationCategory = exports.notificationSeverityLevel = exports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\n\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\n\n\nvar ResultSummary =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @param {string} query - The query this summary is for\n   * @param {Object} parameters - Parameters for the query\n   * @param {Object} metadata - Query metadata\n   * @param {number|undefined} protocolVersion - Bolt Protocol Version\n   */\n  function ResultSummary(query, parameters, metadata, protocolVersion) {\n    var _a, _b, _c;\n    /**\n     * The query and parameters this summary is for.\n     * @type {{text: string, parameters: Object}}\n     * @public\n     */\n\n\n    this.query = {\n      text: query,\n      parameters: parameters\n    };\n    /**\n     * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n     * \"w\" for write-only query and \"s\" for schema-write query.\n     * String constants are available in {@link queryType} object.\n     * @type {string}\n     * @public\n     */\n\n    this.queryType = metadata.type;\n    /**\n     * Counters for operations the query triggered.\n     * @type {QueryStatistics}\n     * @public\n     */\n\n    this.counters = new QueryStatistics((_a = metadata.stats) !== null && _a !== void 0 ? _a : {}); // for backwards compatibility, remove in future version\n\n    /**\n     * Use {@link ResultSummary.counters} instead.\n     * @type {QueryStatistics}\n     * @deprecated\n     */\n\n    this.updateStatistics = this.counters;\n    /**\n     * This describes how the database will execute the query.\n     * Query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"EXPLAIN\".\n     * @type {Plan|false}\n     * @public\n     */\n\n    this.plan = metadata.plan != null || metadata.profile != null ? new Plan((_b = metadata.plan) !== null && _b !== void 0 ? _b : metadata.profile) : false;\n    /**\n     * This describes how the database did execute your query. This will contain detailed information about what\n     * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n     * Will only be populated for queries that start with \"PROFILE\".\n     * @type {ProfiledPlan}\n     * @public\n     */\n\n    this.profile = metadata.profile != null ? new ProfiledPlan(metadata.profile) : false;\n    /**\n     * An array of notifications that might arise when executing the query. Notifications can be warnings about\n     * problematic queries or other valuable information that can be presented in a client. Unlike failures\n     * or errors, notifications do not affect the execution of a query.\n     * @type {Array<Notification>}\n     * @public\n     */\n\n    this.notifications = this._buildNotifications(metadata.notifications);\n    /**\n     * The basic information of the server where the result is obtained from.\n     * @type {ServerInfo}\n     * @public\n     */\n\n    this.server = new ServerInfo(metadata.server, protocolVersion);\n    /**\n     * The time it took the server to consume the result.\n     * @type {number}\n     * @public\n     */\n\n    this.resultConsumedAfter = metadata.result_consumed_after;\n    /**\n     * The time it took the server to make the result available for consumption in milliseconds.\n     * @type {number}\n     * @public\n     */\n\n    this.resultAvailableAfter = metadata.result_available_after;\n    /**\n     * The database name where this summary is obtained from.\n     * @type {{name: string}}\n     * @public\n     */\n\n    this.database = {\n      name: (_c = metadata.db) !== null && _c !== void 0 ? _c : null\n    };\n  }\n\n  ResultSummary.prototype._buildNotifications = function (notifications) {\n    if (notifications == null) {\n      return [];\n    }\n\n    return notifications.map(function (n) {\n      return new Notification(n);\n    });\n  };\n  /**\n   * Check if the result summary has a plan\n   * @return {boolean}\n   */\n\n\n  ResultSummary.prototype.hasPlan = function () {\n    return this.plan instanceof Plan;\n  };\n  /**\n   * Check if the result summary has a profile\n   * @return {boolean}\n   */\n\n\n  ResultSummary.prototype.hasProfile = function () {\n    return this.profile instanceof ProfiledPlan;\n  };\n\n  return ResultSummary;\n}();\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\n\n\nvar Plan =\n/** @class */\nfunction () {\n  /**\n   * Create a Plan instance\n   * @constructor\n   * @param {Object} plan - Object with plan data\n   */\n  function Plan(plan) {\n    this.operatorType = plan.operatorType;\n    this.identifiers = plan.identifiers;\n    this.arguments = plan.args;\n    this.children = plan.children != null ? plan.children.map(function (child) {\n      return new Plan(child);\n    }) : [];\n  }\n\n  return Plan;\n}();\n\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\n\nvar ProfiledPlan =\n/** @class */\nfunction () {\n  /**\n   * Create a ProfiledPlan instance\n   * @constructor\n   * @param {Object} profile - Object with profile data\n   */\n  function ProfiledPlan(profile) {\n    this.operatorType = profile.operatorType;\n    this.identifiers = profile.identifiers;\n    this.arguments = profile.args;\n    this.dbHits = valueOrDefault('dbHits', profile);\n    this.rows = valueOrDefault('rows', profile);\n    this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n    this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n    this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n    this.time = valueOrDefault('time', profile);\n    this.children = profile.children != null ? profile.children.map(function (child) {\n      return new ProfiledPlan(child);\n    }) : [];\n  }\n\n  ProfiledPlan.prototype.hasPageCacheStats = function () {\n    return this.pageCacheMisses > 0 || this.pageCacheHits > 0 || this.pageCacheHitRatio > 0;\n  };\n\n  return ProfiledPlan;\n}();\n\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\n\nvar Stats =\n/** @class */\nfunction () {\n  /**\n   * @constructor\n   * @private\n   */\n  function Stats() {\n    /**\n     * nodes created\n     * @type {number}\n     * @public\n     */\n    this.nodesCreated = 0;\n    /**\n     * nodes deleted\n     * @type {number}\n     * @public\n     */\n\n    this.nodesDeleted = 0;\n    /**\n     * relationships created\n     * @type {number}\n     * @public\n     */\n\n    this.relationshipsCreated = 0;\n    /**\n     * relationships deleted\n     * @type {number}\n     * @public\n     */\n\n    this.relationshipsDeleted = 0;\n    /**\n     * properties set\n     * @type {number}\n     * @public\n     */\n\n    this.propertiesSet = 0;\n    /**\n     * labels added\n     * @type {number}\n     * @public\n     */\n\n    this.labelsAdded = 0;\n    /**\n     * labels removed\n     * @type {number}\n     * @public\n     */\n\n    this.labelsRemoved = 0;\n    /**\n     * indexes added\n     * @type {number}\n     * @public\n     */\n\n    this.indexesAdded = 0;\n    /**\n     * indexes removed\n     * @type {number}\n     * @public\n     */\n\n    this.indexesRemoved = 0;\n    /**\n     * constraints added\n     * @type {number}\n     * @public\n     */\n\n    this.constraintsAdded = 0;\n    /**\n     * constraints removed\n     * @type {number}\n     * @public\n     */\n\n    this.constraintsRemoved = 0;\n  }\n\n  return Stats;\n}();\n\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\n\nvar QueryStatistics =\n/** @class */\nfunction () {\n  /**\n   * Structurize the statistics\n   * @constructor\n   * @param {Object} statistics - Result statistics\n   */\n  function QueryStatistics(statistics) {\n    var _this = this;\n\n    this._stats = {\n      nodesCreated: 0,\n      nodesDeleted: 0,\n      relationshipsCreated: 0,\n      relationshipsDeleted: 0,\n      propertiesSet: 0,\n      labelsAdded: 0,\n      labelsRemoved: 0,\n      indexesAdded: 0,\n      indexesRemoved: 0,\n      constraintsAdded: 0,\n      constraintsRemoved: 0\n    };\n    this._systemUpdates = 0;\n    Object.keys(statistics).forEach(function (index) {\n      // To camelCase\n      var camelCaseIndex = index.replace(/(-\\w)/g, function (m) {\n        return m[1].toUpperCase();\n      });\n\n      if (camelCaseIndex in _this._stats) {\n        _this._stats[camelCaseIndex] = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'systemUpdates') {\n        _this._systemUpdates = intValue(statistics[index]);\n      } else if (camelCaseIndex === 'containsSystemUpdates') {\n        _this._containsSystemUpdates = statistics[index];\n      } else if (camelCaseIndex === 'containsUpdates') {\n        _this._containsUpdates = statistics[index];\n      }\n    });\n    this._stats = Object.freeze(this._stats);\n  }\n  /**\n   * Did the database get updated?\n   * @return {boolean}\n   */\n\n\n  QueryStatistics.prototype.containsUpdates = function () {\n    var _this = this;\n\n    return this._containsUpdates !== undefined ? this._containsUpdates : Object.keys(this._stats).reduce(function (last, current) {\n      return last + _this._stats[current];\n    }, 0) > 0;\n  };\n  /**\n   * Returns the query statistics updates in a dictionary.\n   * @returns {Stats}\n   */\n\n\n  QueryStatistics.prototype.updates = function () {\n    return this._stats;\n  };\n  /**\n   * Return true if the system database get updated, otherwise false\n   * @returns {boolean} - If the system database get updated or not.\n   */\n\n\n  QueryStatistics.prototype.containsSystemUpdates = function () {\n    return this._containsSystemUpdates !== undefined ? this._containsSystemUpdates : this._systemUpdates > 0;\n  };\n  /**\n   * @returns {number} - Number of system updates\n   */\n\n\n  QueryStatistics.prototype.systemUpdates = function () {\n    return this._systemUpdates;\n  };\n\n  return QueryStatistics;\n}();\n\nexports.QueryStatistics = QueryStatistics;\n/**\n * @typedef {'WARNING' | 'INFORMATION' | 'UNKNOWN'} NotificationSeverityLevel\n */\n\n/**\n * Constants that represents the Severity level in the {@link Notification}\n */\n\nvar notificationSeverityLevel = {\n  WARNING: 'WARNING',\n  INFORMATION: 'INFORMATION',\n  UNKNOWN: 'UNKNOWN'\n};\nexports.notificationSeverityLevel = notificationSeverityLevel;\nObject.freeze(notificationSeverityLevel);\nvar severityLevels = Object.values(notificationSeverityLevel);\n/**\n * @typedef {'HINT' | 'UNRECOGNIZED' | 'UNSUPPORTED' |'PERFORMANCE' | 'TOPOLOGY' | 'SECURITY' | 'DEPRECATION' | 'GENERIC' | 'UNKNOWN' } NotificationCategory\n */\n\n/**\n * Constants that represents the Category in the {@link Notification}\n */\n\nvar notificationCategory = {\n  HINT: 'HINT',\n  UNRECOGNIZED: 'UNRECOGNIZED',\n  UNSUPPORTED: 'UNSUPPORTED',\n  PERFORMANCE: 'PERFORMANCE',\n  DEPRECATION: 'DEPRECATION',\n  TOPOLOGY: 'TOPOLOGY',\n  SECURITY: 'SECURITY',\n  GENERIC: 'GENERIC',\n  UNKNOWN: 'UNKNOWN'\n};\nexports.notificationCategory = notificationCategory;\nObject.freeze(notificationCategory);\nvar categories = Object.values(notificationCategory);\n/**\n * Class for Cypher notifications\n * @access public\n */\n\nvar Notification =\n/** @class */\nfunction () {\n  /**\n   * Create a Notification instance\n   * @constructor\n   * @param {Object} notification - Object with notification data\n   */\n  function Notification(notification) {\n    /**\n     * The code\n     * @type {string}\n     * @public\n     */\n    this.code = notification.code;\n    /**\n     * The title\n     * @type {string}\n     * @public\n     */\n\n    this.title = notification.title;\n    /**\n     * The description\n     * @type {string}\n     * @public\n     */\n\n    this.description = notification.description;\n    /**\n     * The raw severity\n     *\n     * Use {@link Notification#rawSeverityLevel} for the raw value or {@link Notification#severityLevel} for an enumerated value.\n     *\n     * @type {string}\n     * @public\n     * @deprecated This property will be removed in 6.0.\n     */\n\n    this.severity = notification.severity;\n    /**\n     * The position which the notification had occur.\n     *\n     * @type {NotificationPosition}\n     * @public\n     */\n\n    this.position = Notification._constructPosition(notification.position);\n    /**\n     * The severity level\n     *\n     * @type {NotificationSeverityLevel}\n     * @public\n     * @example\n     * const { summary } = await session.run(\"RETURN 1\")\n     *\n     * for (const notification of summary.notifications) {\n     *     switch(notification.severityLevel) {\n     *         case neo4j.notificationSeverityLevel.INFORMATION: // or simply 'INFORMATION'\n     *             console.info(`${notification.title} - ${notification.description}`)\n     *             break\n     *         case neo4j.notificationSeverityLevel.WARNING: // or simply 'WARNING'\n     *             console.warn(`${notification.title} - ${notification.description}`)\n     *             break\n     *         case neo4j.notificationSeverityLevel.UNKNOWN: // or simply 'UNKNOWN'\n     *         default:\n     *             // the raw info came from the server could be found at notification.rawSeverityLevel\n     *             console.log(`${notification.title} - ${notification.description}`)\n     *             break\n     *     }\n     * }\n     */\n\n    this.severityLevel = severityLevels.includes(notification.severity) ? notification.severity : notificationSeverityLevel.UNKNOWN;\n    /**\n     * The severity level returned by the server without any validation.\n     *\n     * @type {string}\n     * @public\n     */\n\n    this.rawSeverityLevel = notification.severity;\n    /**\n     * The category\n     *\n     * @type {NotificationCategory}\n     * @public\n     * @example\n     * const { summary } = await session.run(\"RETURN 1\")\n     *\n     * for (const notification of summary.notifications) {\n     *     switch(notification.category) {\n     *         case neo4j.notificationCategory.QUERY: // or simply 'QUERY'\n     *             console.info(`${notification.title} - ${notification.description}`)\n     *             break\n     *         case neo4j.notificationCategory.PERFORMANCE: // or simply 'PERFORMANCE'\n     *             console.warn(`${notification.title} - ${notification.description}`)\n     *             break\n     *         case neo4j.notificationCategory.UNKNOWN: // or simply 'UNKNOWN'\n     *         default:\n     *             // the raw info came from the server could be found at notification.rawCategory\n     *             console.log(`${notification.title} - ${notification.description}`)\n     *             break\n     *     }\n     * }\n     */\n\n    this.category = categories.includes(notification.category) ? notification.category : notificationCategory.UNKNOWN;\n    /**\n     * The category returned by the server without any validation.\n     *\n     * @type {string|undefined}\n     * @public\n     */\n\n    this.rawCategory = notification.category;\n  }\n\n  Notification._constructPosition = function (pos) {\n    if (pos == null) {\n      return {};\n    }\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n\n    return {\n      offset: intValue(pos.offset),\n      line: intValue(pos.line),\n      column: intValue(pos.column)\n    };\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n  };\n\n  return Notification;\n}();\n\nexports.Notification = Notification;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\n\nvar ServerInfo =\n/** @class */\nfunction () {\n  /**\n   * Create a ServerInfo instance\n   * @constructor\n   * @param {Object} serverMeta - Object with serverMeta data\n   * @param {Object} connectionInfo - Bolt connection info\n   * @param {number} protocolVersion - Bolt Protocol Version\n   */\n  function ServerInfo(serverMeta, protocolVersion) {\n    if (serverMeta != null) {\n      /**\n       * The server adress\n       * @type {string}\n       * @public\n       */\n      this.address = serverMeta.address;\n      /**\n       * The server user agent string\n       * @type {string}\n       * @public\n       */\n\n      this.agent = serverMeta.version;\n    }\n    /**\n     * The protocol version used by the connection\n     * @type {number}\n     * @public\n     */\n\n\n    this.protocolVersion = protocolVersion;\n  }\n\n  return ServerInfo;\n}();\n\nexports.ServerInfo = ServerInfo;\n\nfunction intValue(value) {\n  if (value instanceof integer_1.default) {\n    return value.toNumber();\n  } else if (typeof value === 'bigint') {\n    return (0, integer_1.int)(value).toNumber();\n  } else {\n    return value;\n  }\n}\n\nfunction valueOrDefault(key, values, defaultValue) {\n  if (defaultValue === void 0) {\n    defaultValue = 0;\n  }\n\n  if (values !== false && key in values) {\n    var value = values[key];\n    return intValue(value);\n  } else {\n    return defaultValue;\n  }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\n\n\nvar queryType = {\n  READ_ONLY: 'r',\n  READ_WRITE: 'rw',\n  WRITE_ONLY: 'w',\n  SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","notificationCategory","notificationSeverityLevel","Stats","QueryStatistics","ProfiledPlan","Plan","Notification","ServerInfo","queryType","integer_1","require","ResultSummary","query","parameters","metadata","protocolVersion","_a","_b","_c","text","type","counters","stats","updateStatistics","plan","profile","notifications","_buildNotifications","server","resultConsumedAfter","result_consumed_after","resultAvailableAfter","result_available_after","database","name","db","map","n","hasPlan","hasProfile","operatorType","identifiers","arguments","args","children","child","dbHits","valueOrDefault","rows","pageCacheMisses","pageCacheHits","pageCacheHitRatio","time","hasPageCacheStats","nodesCreated","nodesDeleted","relationshipsCreated","relationshipsDeleted","propertiesSet","labelsAdded","labelsRemoved","indexesAdded","indexesRemoved","constraintsAdded","constraintsRemoved","statistics","_this","_stats","_systemUpdates","keys","forEach","index","camelCaseIndex","replace","toUpperCase","intValue","_containsSystemUpdates","_containsUpdates","freeze","containsUpdates","reduce","last","current","updates","containsSystemUpdates","systemUpdates","WARNING","INFORMATION","UNKNOWN","severityLevels","values","HINT","UNRECOGNIZED","UNSUPPORTED","PERFORMANCE","DEPRECATION","TOPOLOGY","SECURITY","GENERIC","categories","notification","code","title","description","severity","position","_constructPosition","severityLevel","includes","rawSeverityLevel","category","rawCategory","pos","offset","line","column","serverMeta","address","agent","version","default","toNumber","int","key","defaultValue","READ_ONLY","READ_WRITE","WRITE_ONLY","SCHEMA_WRITE"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-core/lib/result-summary.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.notificationCategory = exports.notificationSeverityLevel = exports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.Notification = exports.ServerInfo = exports.queryType = void 0;\nvar integer_1 = __importStar(require(\"./integer\"));\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} query - The query this summary is for\n     * @param {Object} parameters - Parameters for the query\n     * @param {Object} metadata - Query metadata\n     * @param {number|undefined} protocolVersion - Bolt Protocol Version\n     */\n    function ResultSummary(query, parameters, metadata, protocolVersion) {\n        var _a, _b, _c;\n        /**\n         * The query and parameters this summary is for.\n         * @type {{text: string, parameters: Object}}\n         * @public\n         */\n        this.query = { text: query, parameters: parameters };\n        /**\n         * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n         * \"w\" for write-only query and \"s\" for schema-write query.\n         * String constants are available in {@link queryType} object.\n         * @type {string}\n         * @public\n         */\n        this.queryType = metadata.type;\n        /**\n         * Counters for operations the query triggered.\n         * @type {QueryStatistics}\n         * @public\n         */\n        this.counters = new QueryStatistics((_a = metadata.stats) !== null && _a !== void 0 ? _a : {});\n        // for backwards compatibility, remove in future version\n        /**\n         * Use {@link ResultSummary.counters} instead.\n         * @type {QueryStatistics}\n         * @deprecated\n         */\n        this.updateStatistics = this.counters;\n        /**\n         * This describes how the database will execute the query.\n         * Query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"EXPLAIN\".\n         * @type {Plan|false}\n         * @public\n         */\n        this.plan =\n            metadata.plan != null || metadata.profile != null\n                ? new Plan((_b = metadata.plan) !== null && _b !== void 0 ? _b : metadata.profile)\n                : false;\n        /**\n         * This describes how the database did execute your query. This will contain detailed information about what\n         * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"PROFILE\".\n         * @type {ProfiledPlan}\n         * @public\n         */\n        this.profile = metadata.profile != null ? new ProfiledPlan(metadata.profile) : false;\n        /**\n         * An array of notifications that might arise when executing the query. Notifications can be warnings about\n         * problematic queries or other valuable information that can be presented in a client. Unlike failures\n         * or errors, notifications do not affect the execution of a query.\n         * @type {Array<Notification>}\n         * @public\n         */\n        this.notifications = this._buildNotifications(metadata.notifications);\n        /**\n         * The basic information of the server where the result is obtained from.\n         * @type {ServerInfo}\n         * @public\n         */\n        this.server = new ServerInfo(metadata.server, protocolVersion);\n        /**\n         * The time it took the server to consume the result.\n         * @type {number}\n         * @public\n         */\n        this.resultConsumedAfter = metadata.result_consumed_after;\n        /**\n         * The time it took the server to make the result available for consumption in milliseconds.\n         * @type {number}\n         * @public\n         */\n        this.resultAvailableAfter = metadata.result_available_after;\n        /**\n         * The database name where this summary is obtained from.\n         * @type {{name: string}}\n         * @public\n         */\n        this.database = { name: (_c = metadata.db) !== null && _c !== void 0 ? _c : null };\n    }\n    ResultSummary.prototype._buildNotifications = function (notifications) {\n        if (notifications == null) {\n            return [];\n        }\n        return notifications.map(function (n) {\n            return new Notification(n);\n        });\n    };\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasPlan = function () {\n        return this.plan instanceof Plan;\n    };\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasProfile = function () {\n        return this.profile instanceof ProfiledPlan;\n    };\n    return ResultSummary;\n}());\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */ (function () {\n    /**\n     * Create a Plan instance\n     * @constructor\n     * @param {Object} plan - Object with plan data\n     */\n    function Plan(plan) {\n        this.operatorType = plan.operatorType;\n        this.identifiers = plan.identifiers;\n        this.arguments = plan.args;\n        this.children = plan.children != null\n            ? plan.children.map(function (child) { return new Plan(child); })\n            : [];\n    }\n    return Plan;\n}());\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */ (function () {\n    /**\n     * Create a ProfiledPlan instance\n     * @constructor\n     * @param {Object} profile - Object with profile data\n     */\n    function ProfiledPlan(profile) {\n        this.operatorType = profile.operatorType;\n        this.identifiers = profile.identifiers;\n        this.arguments = profile.args;\n        this.dbHits = valueOrDefault('dbHits', profile);\n        this.rows = valueOrDefault('rows', profile);\n        this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n        this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n        this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n        this.time = valueOrDefault('time', profile);\n        this.children = profile.children != null\n            ? profile.children.map(function (child) { return new ProfiledPlan(child); })\n            : [];\n    }\n    ProfiledPlan.prototype.hasPageCacheStats = function () {\n        return (this.pageCacheMisses > 0 ||\n            this.pageCacheHits > 0 ||\n            this.pageCacheHitRatio > 0);\n    };\n    return ProfiledPlan;\n}());\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function Stats() {\n        /**\n         * nodes created\n         * @type {number}\n         * @public\n         */\n        this.nodesCreated = 0;\n        /**\n         * nodes deleted\n         * @type {number}\n         * @public\n         */\n        this.nodesDeleted = 0;\n        /**\n         * relationships created\n         * @type {number}\n         * @public\n         */\n        this.relationshipsCreated = 0;\n        /**\n         * relationships deleted\n         * @type {number}\n         * @public\n         */\n        this.relationshipsDeleted = 0;\n        /**\n         * properties set\n         * @type {number}\n         * @public\n         */\n        this.propertiesSet = 0;\n        /**\n         * labels added\n         * @type {number}\n         * @public\n         */\n        this.labelsAdded = 0;\n        /**\n         * labels removed\n         * @type {number}\n         * @public\n         */\n        this.labelsRemoved = 0;\n        /**\n         * indexes added\n         * @type {number}\n         * @public\n         */\n        this.indexesAdded = 0;\n        /**\n         * indexes removed\n         * @type {number}\n         * @public\n         */\n        this.indexesRemoved = 0;\n        /**\n         * constraints added\n         * @type {number}\n         * @public\n         */\n        this.constraintsAdded = 0;\n        /**\n         * constraints removed\n         * @type {number}\n         * @public\n         */\n        this.constraintsRemoved = 0;\n    }\n    return Stats;\n}());\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */ (function () {\n    /**\n     * Structurize the statistics\n     * @constructor\n     * @param {Object} statistics - Result statistics\n     */\n    function QueryStatistics(statistics) {\n        var _this = this;\n        this._stats = {\n            nodesCreated: 0,\n            nodesDeleted: 0,\n            relationshipsCreated: 0,\n            relationshipsDeleted: 0,\n            propertiesSet: 0,\n            labelsAdded: 0,\n            labelsRemoved: 0,\n            indexesAdded: 0,\n            indexesRemoved: 0,\n            constraintsAdded: 0,\n            constraintsRemoved: 0\n        };\n        this._systemUpdates = 0;\n        Object.keys(statistics).forEach(function (index) {\n            // To camelCase\n            var camelCaseIndex = index.replace(/(-\\w)/g, function (m) { return m[1].toUpperCase(); });\n            if (camelCaseIndex in _this._stats) {\n                _this._stats[camelCaseIndex] = intValue(statistics[index]);\n            }\n            else if (camelCaseIndex === 'systemUpdates') {\n                _this._systemUpdates = intValue(statistics[index]);\n            }\n            else if (camelCaseIndex === 'containsSystemUpdates') {\n                _this._containsSystemUpdates = statistics[index];\n            }\n            else if (camelCaseIndex === 'containsUpdates') {\n                _this._containsUpdates = statistics[index];\n            }\n        });\n        this._stats = Object.freeze(this._stats);\n    }\n    /**\n     * Did the database get updated?\n     * @return {boolean}\n     */\n    QueryStatistics.prototype.containsUpdates = function () {\n        var _this = this;\n        return this._containsUpdates !== undefined\n            ? this._containsUpdates\n            : (Object.keys(this._stats).reduce(function (last, current) {\n                return last + _this._stats[current];\n            }, 0) > 0);\n    };\n    /**\n     * Returns the query statistics updates in a dictionary.\n     * @returns {Stats}\n     */\n    QueryStatistics.prototype.updates = function () {\n        return this._stats;\n    };\n    /**\n     * Return true if the system database get updated, otherwise false\n     * @returns {boolean} - If the system database get updated or not.\n     */\n    QueryStatistics.prototype.containsSystemUpdates = function () {\n        return this._containsSystemUpdates !== undefined\n            ? this._containsSystemUpdates\n            : this._systemUpdates > 0;\n    };\n    /**\n     * @returns {number} - Number of system updates\n     */\n    QueryStatistics.prototype.systemUpdates = function () {\n        return this._systemUpdates;\n    };\n    return QueryStatistics;\n}());\nexports.QueryStatistics = QueryStatistics;\n/**\n * @typedef {'WARNING' | 'INFORMATION' | 'UNKNOWN'} NotificationSeverityLevel\n */\n/**\n * Constants that represents the Severity level in the {@link Notification}\n */\nvar notificationSeverityLevel = {\n    WARNING: 'WARNING',\n    INFORMATION: 'INFORMATION',\n    UNKNOWN: 'UNKNOWN'\n};\nexports.notificationSeverityLevel = notificationSeverityLevel;\nObject.freeze(notificationSeverityLevel);\nvar severityLevels = Object.values(notificationSeverityLevel);\n/**\n * @typedef {'HINT' | 'UNRECOGNIZED' | 'UNSUPPORTED' |'PERFORMANCE' | 'TOPOLOGY' | 'SECURITY' | 'DEPRECATION' | 'GENERIC' | 'UNKNOWN' } NotificationCategory\n */\n/**\n * Constants that represents the Category in the {@link Notification}\n */\nvar notificationCategory = {\n    HINT: 'HINT',\n    UNRECOGNIZED: 'UNRECOGNIZED',\n    UNSUPPORTED: 'UNSUPPORTED',\n    PERFORMANCE: 'PERFORMANCE',\n    DEPRECATION: 'DEPRECATION',\n    TOPOLOGY: 'TOPOLOGY',\n    SECURITY: 'SECURITY',\n    GENERIC: 'GENERIC',\n    UNKNOWN: 'UNKNOWN'\n};\nexports.notificationCategory = notificationCategory;\nObject.freeze(notificationCategory);\nvar categories = Object.values(notificationCategory);\n/**\n * Class for Cypher notifications\n * @access public\n */\nvar Notification = /** @class */ (function () {\n    /**\n     * Create a Notification instance\n     * @constructor\n     * @param {Object} notification - Object with notification data\n     */\n    function Notification(notification) {\n        /**\n         * The code\n         * @type {string}\n         * @public\n         */\n        this.code = notification.code;\n        /**\n         * The title\n         * @type {string}\n         * @public\n         */\n        this.title = notification.title;\n        /**\n         * The description\n         * @type {string}\n         * @public\n         */\n        this.description = notification.description;\n        /**\n         * The raw severity\n         *\n         * Use {@link Notification#rawSeverityLevel} for the raw value or {@link Notification#severityLevel} for an enumerated value.\n         *\n         * @type {string}\n         * @public\n         * @deprecated This property will be removed in 6.0.\n         */\n        this.severity = notification.severity;\n        /**\n         * The position which the notification had occur.\n         *\n         * @type {NotificationPosition}\n         * @public\n         */\n        this.position = Notification._constructPosition(notification.position);\n        /**\n         * The severity level\n         *\n         * @type {NotificationSeverityLevel}\n         * @public\n         * @example\n         * const { summary } = await session.run(\"RETURN 1\")\n         *\n         * for (const notification of summary.notifications) {\n         *     switch(notification.severityLevel) {\n         *         case neo4j.notificationSeverityLevel.INFORMATION: // or simply 'INFORMATION'\n         *             console.info(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationSeverityLevel.WARNING: // or simply 'WARNING'\n         *             console.warn(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationSeverityLevel.UNKNOWN: // or simply 'UNKNOWN'\n         *         default:\n         *             // the raw info came from the server could be found at notification.rawSeverityLevel\n         *             console.log(`${notification.title} - ${notification.description}`)\n         *             break\n         *     }\n         * }\n         */\n        this.severityLevel = severityLevels.includes(notification.severity)\n            ? notification.severity\n            : notificationSeverityLevel.UNKNOWN;\n        /**\n         * The severity level returned by the server without any validation.\n         *\n         * @type {string}\n         * @public\n         */\n        this.rawSeverityLevel = notification.severity;\n        /**\n         * The category\n         *\n         * @type {NotificationCategory}\n         * @public\n         * @example\n         * const { summary } = await session.run(\"RETURN 1\")\n         *\n         * for (const notification of summary.notifications) {\n         *     switch(notification.category) {\n         *         case neo4j.notificationCategory.QUERY: // or simply 'QUERY'\n         *             console.info(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationCategory.PERFORMANCE: // or simply 'PERFORMANCE'\n         *             console.warn(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationCategory.UNKNOWN: // or simply 'UNKNOWN'\n         *         default:\n         *             // the raw info came from the server could be found at notification.rawCategory\n         *             console.log(`${notification.title} - ${notification.description}`)\n         *             break\n         *     }\n         * }\n         */\n        this.category = categories.includes(notification.category)\n            ? notification.category\n            : notificationCategory.UNKNOWN;\n        /**\n         * The category returned by the server without any validation.\n         *\n         * @type {string|undefined}\n         * @public\n         */\n        this.rawCategory = notification.category;\n    }\n    Notification._constructPosition = function (pos) {\n        if (pos == null) {\n            return {};\n        }\n        /* eslint-disable @typescript-eslint/no-non-null-assertion */\n        return {\n            offset: intValue(pos.offset),\n            line: intValue(pos.line),\n            column: intValue(pos.column)\n        };\n        /* eslint-enable @typescript-eslint/no-non-null-assertion */\n    };\n    return Notification;\n}());\nexports.Notification = Notification;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */ (function () {\n    /**\n     * Create a ServerInfo instance\n     * @constructor\n     * @param {Object} serverMeta - Object with serverMeta data\n     * @param {Object} connectionInfo - Bolt connection info\n     * @param {number} protocolVersion - Bolt Protocol Version\n     */\n    function ServerInfo(serverMeta, protocolVersion) {\n        if (serverMeta != null) {\n            /**\n             * The server adress\n             * @type {string}\n             * @public\n             */\n            this.address = serverMeta.address;\n            /**\n             * The server user agent string\n             * @type {string}\n             * @public\n             */\n            this.agent = serverMeta.version;\n        }\n        /**\n         * The protocol version used by the connection\n         * @type {number}\n         * @public\n         */\n        this.protocolVersion = protocolVersion;\n    }\n    return ServerInfo;\n}());\nexports.ServerInfo = ServerInfo;\nfunction intValue(value) {\n    if (value instanceof integer_1.default) {\n        return value.toNumber();\n    }\n    else if (typeof value === 'bigint') {\n        return (0, integer_1.int)(value).toNumber();\n    }\n    else {\n        return value;\n    }\n}\nfunction valueOrDefault(key, values, defaultValue) {\n    if (defaultValue === void 0) { defaultValue = 0; }\n    if (values !== false && key in values) {\n        var value = values[key];\n        return intValue(value);\n    }\n    else {\n        return defaultValue;\n    }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n    READ_ONLY: 'r',\n    READ_WRITE: 'rw',\n    WRITE_ONLY: 'w',\n    SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports.default = ResultSummary;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}