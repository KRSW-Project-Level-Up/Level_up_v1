{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = void 0; // 64-bit Integer library, originally from Long.js by dcodeIO\n// https://github.com/dcodeIO/Long.js\n// License Apache 2\n\nvar error_1 = require(\"./error\");\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object}\n * @inner\n * @private\n */\n// eslint-disable-next-line no-use-before-define\n\n\nvar INT_CACHE = new Map();\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n * See exported functions for more convenient ways of operating integers.\n * Use `int()` function to create new integers, `isInt()` to check if given object is integer,\n * `inSafeRange()` to check if it is safe to convert given value to native number,\n * `toNumber()` and `toString()` to convert given integer to number or string respectively.\n * @access public\n * @exports Integer\n * @class A Integer class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n *\n * @constructor\n */\n\nvar Integer =\n/** @class */\nfunction () {\n  function Integer(low, high) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n    this.low = low !== null && low !== void 0 ? low : 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n\n    this.high = high !== null && high !== void 0 ? high : 0;\n  } // The internal representation of an Integer is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // JavaScript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within JavaScript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n\n  Integer.prototype.inSafeRange = function () {\n    return this.greaterThanOrEqual(Integer.MIN_SAFE_VALUE) && this.lessThanOrEqual(Integer.MAX_SAFE_VALUE);\n  };\n  /**\n   * Converts the Integer to an exact javascript Number, assuming it is a 32 bit integer.\n   * @returns {number}\n   * @expose\n   */\n\n\n  Integer.prototype.toInt = function () {\n    return this.low;\n  };\n  /**\n   * Converts the Integer to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @returns {number}\n   * @expose\n   */\n\n\n  Integer.prototype.toNumber = function () {\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Integer to a BigInt representation of this value\n   * @returns {bigint}\n   * @expose\n   */\n\n\n  Integer.prototype.toBigInt = function () {\n    if (this.isZero()) {\n      return BigInt(0);\n    } else if (this.isPositive()) {\n      return BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low >>> 0);\n    } else {\n      var negate = this.negate();\n      return BigInt(-1) * (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) + BigInt(negate.low >>> 0));\n    }\n  };\n  /**\n   * Converts the Integer to native number or -Infinity/+Infinity when it does not fit.\n   * @return {number}\n   * @package\n   */\n\n\n  Integer.prototype.toNumberOrInfinity = function () {\n    if (this.lessThan(Integer.MIN_SAFE_VALUE)) {\n      return Number.NEGATIVE_INFINITY;\n    } else if (this.greaterThan(Integer.MAX_SAFE_VALUE)) {\n      return Number.POSITIVE_INFINITY;\n    } else {\n      return this.toNumber();\n    }\n  };\n  /**\n   * Converts the Integer to a string written in the specified radix.\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   * @expose\n   */\n\n\n  Integer.prototype.toString = function (radix) {\n    radix = radix !== null && radix !== void 0 ? radix : 10;\n\n    if (radix < 2 || radix > 36) {\n      throw RangeError('radix out of range: ' + radix.toString());\n    }\n\n    if (this.isZero()) {\n      return '0';\n    }\n\n    var rem;\n\n    if (this.isNegative()) {\n      if (this.equals(Integer.MIN_VALUE)) {\n        // We need to change the Integer value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixInteger = Integer.fromNumber(radix);\n        var div = this.div(radixInteger);\n        rem = div.multiply(radixInteger).subtract(this);\n        return div.toString(radix) + rem.toInt().toString(radix);\n      } else {\n        return '-' + this.negate().toString(radix);\n      }\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n\n    var radixToPower = Integer.fromNumber(Math.pow(radix, 6)); // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    rem = this;\n    var result = '';\n\n    while (true) {\n      var remDiv = rem.div(radixToPower);\n      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n      var digits = intval.toString(radix);\n      rem = remDiv;\n\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) {\n          digits = '0' + digits;\n        }\n\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Converts the Integer to it primitive value.\n   *\n   * @since 5.4.0\n   * @returns {bigint}\n   *\n   * @see {@link Integer#toBigInt}\n   * @see {@link Integer#toInt}\n   * @see {@link Integer#toNumber}\n   * @see {@link Integer#toString}\n   */\n\n\n  Integer.prototype.valueOf = function () {\n    return this.toBigInt();\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @returns {number} Signed high bits\n   * @expose\n   */\n\n\n  Integer.prototype.getHighBits = function () {\n    return this.high;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @returns {number} Signed low bits\n   * @expose\n   */\n\n\n  Integer.prototype.getLowBits = function () {\n    return this.low;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Integer.\n   * @returns {number}\n   * @expose\n   */\n\n\n  Integer.prototype.getNumBitsAbs = function () {\n    if (this.isNegative()) {\n      return this.equals(Integer.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n    }\n\n    var val = this.high !== 0 ? this.high : this.low;\n    var bit = 0;\n\n    for (bit = 31; bit > 0; bit--) {\n      if ((val & 1 << bit) !== 0) {\n        break;\n      }\n    }\n\n    return this.high !== 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Integer's value equals zero.\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.isZero = function () {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Integer's value is negative.\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.isNegative = function () {\n    return this.high < 0;\n  };\n  /**\n   * Tests if this Integer's value is positive.\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.isPositive = function () {\n    return this.high >= 0;\n  };\n  /**\n   * Tests if this Integer's value is odd.\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.isOdd = function () {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Integer's value is even.\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.isEven = function () {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Integer's value equals the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.equals = function (other) {\n    var theOther = Integer.fromValue(other);\n    return this.high === theOther.high && this.low === theOther.low;\n  };\n  /**\n   * Tests if this Integer's value differs from the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.notEquals = function (other) {\n    return !this.equals(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Integer's value is less than the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.lessThan = function (other) {\n    return this.compare(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Integer's value is less than or equal the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.lessThanOrEqual = function (other) {\n    return this.compare(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Integer's value is greater than the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.greaterThan = function (other) {\n    return this.compare(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Integer's value is greater than or equal the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.prototype.greaterThanOrEqual = function (other) {\n    return this.compare(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Compares this Integer's value with the specified's.\n   * @param {!Integer|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   * @expose\n   */\n\n\n  Integer.prototype.compare = function (other) {\n    var theOther = Integer.fromValue(other);\n\n    if (this.equals(theOther)) {\n      return 0;\n    }\n\n    var thisNeg = this.isNegative();\n    var otherNeg = theOther.isNegative();\n\n    if (thisNeg && !otherNeg) {\n      return -1;\n    }\n\n    if (!thisNeg && otherNeg) {\n      return 1;\n    } // At this point the sign bits are the same\n\n\n    return this.subtract(theOther).isNegative() ? -1 : 1;\n  };\n  /**\n   * Negates this Integer's value.\n   * @returns {!Integer} Negated Integer\n   * @expose\n   */\n\n\n  Integer.prototype.negate = function () {\n    if (this.equals(Integer.MIN_VALUE)) {\n      return Integer.MIN_VALUE;\n    }\n\n    return this.not().add(Integer.ONE);\n  };\n  /**\n   * Returns the sum of this and the specified Integer.\n   * @param {!Integer|number|string} addend Addend\n   * @returns {!Integer} Sum\n   * @expose\n   */\n\n\n  Integer.prototype.add = function (addend) {\n    var theAddend = Integer.fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = theAddend.high >>> 16;\n    var b32 = theAddend.high & 0xffff;\n    var b16 = theAddend.low >>> 16;\n    var b00 = theAddend.low & 0xffff;\n    var c48 = 0;\n    var c32 = 0;\n    var c16 = 0;\n    var c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 + b48;\n    c48 &= 0xffff;\n    return Integer.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n  };\n  /**\n   * Returns the difference of this and the specified Integer.\n   * @param {!Integer|number|string} subtrahend Subtrahend\n   * @returns {!Integer} Difference\n   * @expose\n   */\n\n\n  Integer.prototype.subtract = function (subtrahend) {\n    var theSubtrahend = Integer.fromValue(subtrahend);\n    return this.add(theSubtrahend.negate());\n  };\n  /**\n   * Returns the product of this and the specified Integer.\n   * @param {!Integer|number|string} multiplier Multiplier\n   * @returns {!Integer} Product\n   * @expose\n   */\n\n\n  Integer.prototype.multiply = function (multiplier) {\n    if (this.isZero()) {\n      return Integer.ZERO;\n    }\n\n    var theMultiplier = Integer.fromValue(multiplier);\n\n    if (theMultiplier.isZero()) {\n      return Integer.ZERO;\n    }\n\n    if (this.equals(Integer.MIN_VALUE)) {\n      return theMultiplier.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n    }\n\n    if (theMultiplier.equals(Integer.MIN_VALUE)) {\n      return this.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n    }\n\n    if (this.isNegative()) {\n      if (theMultiplier.isNegative()) {\n        return this.negate().multiply(theMultiplier.negate());\n      } else {\n        return this.negate().multiply(theMultiplier).negate();\n      }\n    } else if (theMultiplier.isNegative()) {\n      return this.multiply(theMultiplier.negate()).negate();\n    } // If both longs are small, use float multiplication\n\n\n    if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {\n      return Integer.fromNumber(this.toNumber() * theMultiplier.toNumber());\n    } // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xffff;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xffff;\n    var b48 = theMultiplier.high >>> 16;\n    var b32 = theMultiplier.high & 0xffff;\n    var b16 = theMultiplier.low >>> 16;\n    var b00 = theMultiplier.low & 0xffff;\n    var c48 = 0;\n    var c32 = 0;\n    var c16 = 0;\n    var c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xffff;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xffff;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xffff;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xffff;\n    return Integer.fromBits(c16 << 16 | c00, c48 << 16 | c32);\n  };\n  /**\n   * Returns this Integer divided by the specified.\n   * @param {!Integer|number|string} divisor Divisor\n   * @returns {!Integer} Quotient\n   * @expose\n   */\n\n\n  Integer.prototype.div = function (divisor) {\n    var theDivisor = Integer.fromValue(divisor);\n\n    if (theDivisor.isZero()) {\n      throw (0, error_1.newError)('division by zero');\n    }\n\n    if (this.isZero()) {\n      return Integer.ZERO;\n    }\n\n    var approx, rem, res;\n\n    if (this.equals(Integer.MIN_VALUE)) {\n      if (theDivisor.equals(Integer.ONE) || theDivisor.equals(Integer.NEG_ONE)) {\n        return Integer.MIN_VALUE;\n      }\n\n      if (theDivisor.equals(Integer.MIN_VALUE)) {\n        return Integer.ONE;\n      } else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shiftRight(1);\n        approx = halfThis.div(theDivisor).shiftLeft(1);\n\n        if (approx.equals(Integer.ZERO)) {\n          return theDivisor.isNegative() ? Integer.ONE : Integer.NEG_ONE;\n        } else {\n          rem = this.subtract(theDivisor.multiply(approx));\n          res = approx.add(rem.div(theDivisor));\n          return res;\n        }\n      }\n    } else if (theDivisor.equals(Integer.MIN_VALUE)) {\n      return Integer.ZERO;\n    }\n\n    if (this.isNegative()) {\n      if (theDivisor.isNegative()) {\n        return this.negate().div(theDivisor.negate());\n      }\n\n      return this.negate().div(theDivisor).negate();\n    } else if (theDivisor.isNegative()) {\n      return this.div(theDivisor.negate()).negate();\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n\n\n    res = Integer.ZERO; // eslint-disable-next-line @typescript-eslint/no-this-alias\n\n    rem = this;\n\n    while (rem.greaterThanOrEqual(theDivisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / theDivisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48); // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n\n      var approxRes = Integer.fromNumber(approx);\n      var approxRem = approxRes.multiply(theDivisor);\n\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = Integer.fromNumber(approx);\n        approxRem = approxRes.multiply(theDivisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n\n\n      if (approxRes.isZero()) {\n        approxRes = Integer.ONE;\n      }\n\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n\n    return res;\n  };\n  /**\n   * Returns this Integer modulo the specified.\n   * @param {!Integer|number|string} divisor Divisor\n   * @returns {!Integer} Remainder\n   * @expose\n   */\n\n\n  Integer.prototype.modulo = function (divisor) {\n    var theDivisor = Integer.fromValue(divisor);\n    return this.subtract(this.div(theDivisor).multiply(theDivisor));\n  };\n  /**\n   * Returns the bitwise NOT of this Integer.\n   * @returns {!Integer}\n   * @expose\n   */\n\n\n  Integer.prototype.not = function () {\n    return Integer.fromBits(~this.low, ~this.high);\n  };\n  /**\n   * Returns the bitwise AND of this Integer and the specified.\n   * @param {!Integer|number|string} other Other Integer\n   * @returns {!Integer}\n   * @expose\n   */\n\n\n  Integer.prototype.and = function (other) {\n    var theOther = Integer.fromValue(other);\n    return Integer.fromBits(this.low & theOther.low, this.high & theOther.high);\n  };\n  /**\n   * Returns the bitwise OR of this Integer and the specified.\n   * @param {!Integer|number|string} other Other Integer\n   * @returns {!Integer}\n   * @expose\n   */\n\n\n  Integer.prototype.or = function (other) {\n    var theOther = Integer.fromValue(other);\n    return Integer.fromBits(this.low | theOther.low, this.high | theOther.high);\n  };\n  /**\n   * Returns the bitwise XOR of this Integer and the given one.\n   * @param {!Integer|number|string} other Other Integer\n   * @returns {!Integer}\n   * @expose\n   */\n\n\n  Integer.prototype.xor = function (other) {\n    var theOther = Integer.fromValue(other);\n    return Integer.fromBits(this.low ^ theOther.low, this.high ^ theOther.high);\n  };\n  /**\n   * Returns this Integer with bits shifted to the left by the given amount.\n   * @param {number|!Integer} numBits Number of bits\n   * @returns {!Integer} Shifted Integer\n   * @expose\n   */\n\n\n  Integer.prototype.shiftLeft = function (numBits) {\n    var bitsCount = Integer.toNumber(numBits);\n\n    if ((bitsCount &= 63) === 0) {\n      return Integer.ZERO;\n    } else if (bitsCount < 32) {\n      return Integer.fromBits(this.low << bitsCount, this.high << bitsCount | this.low >>> 32 - bitsCount);\n    } else {\n      return Integer.fromBits(0, this.low << bitsCount - 32);\n    }\n  };\n  /**\n   * Returns this Integer with bits arithmetically shifted to the right by the given amount.\n   * @param {number|!Integer} numBits Number of bits\n   * @returns {!Integer} Shifted Integer\n   * @expose\n   */\n\n\n  Integer.prototype.shiftRight = function (numBits) {\n    var bitsCount = Integer.toNumber(numBits);\n    var numBitNum = Integer.toNumber(numBits);\n\n    if ((bitsCount &= 63) === 0) {\n      return Integer.ZERO;\n    } else if (numBitNum < 32) {\n      return Integer.fromBits(this.low >>> bitsCount | this.high << 32 - bitsCount, this.high >> bitsCount);\n    } else {\n      return Integer.fromBits(this.high >> bitsCount - 32, this.high >= 0 ? 0 : -1);\n    }\n  };\n  /**\n   * Tests if the specified object is a Integer.\n   * @access private\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.isInteger = function (obj) {\n    return (obj === null || obj === void 0 ? void 0 : obj.__isInteger__) === true;\n  };\n  /**\n   * Returns a Integer representing the given 32 bit integer value.\n   * @access private\n   * @param {number} value The 32 bit integer in question\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n\n\n  Integer.fromInt = function (value) {\n    var cachedObj;\n    value = value | 0;\n\n    if (value >= -128 && value < 128) {\n      cachedObj = INT_CACHE.get(value);\n\n      if (cachedObj != null) {\n        return cachedObj;\n      }\n    }\n\n    var obj = new Integer(value, value < 0 ? -1 : 0);\n\n    if (value >= -128 && value < 128) {\n      INT_CACHE.set(value, obj);\n    }\n\n    return obj;\n  };\n  /**\n   * Returns a Integer representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @access private\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n\n\n  Integer.fromBits = function (lowBits, highBits) {\n    return new Integer(lowBits, highBits);\n  };\n  /**\n   * Returns a Integer representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @access private\n   * @param {number} value The number in question\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n\n\n  Integer.fromNumber = function (value) {\n    if (isNaN(value) || !isFinite(value)) {\n      return Integer.ZERO;\n    }\n\n    if (value <= -TWO_PWR_63_DBL) {\n      return Integer.MIN_VALUE;\n    }\n\n    if (value + 1 >= TWO_PWR_63_DBL) {\n      return Integer.MAX_VALUE;\n    }\n\n    if (value < 0) {\n      return Integer.fromNumber(-value).negate();\n    }\n\n    return new Integer(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n  };\n  /**\n   * Returns a Integer representation of the given string, written using the specified radix.\n   * @access private\n   * @param {string} str The textual representation of the Integer\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @param {Object} [opts={}] Configuration options\n   * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n   * @returns {!Integer} The corresponding Integer value\n   * @expose\n   */\n\n\n  Integer.fromString = function (str, radix, _a) {\n    var _b = _a === void 0 ? {} : _a,\n        strictStringValidation = _b.strictStringValidation;\n\n    if (str.length === 0) {\n      throw (0, error_1.newError)('number format error: empty string');\n    }\n\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity') {\n      return Integer.ZERO;\n    }\n\n    radix = radix !== null && radix !== void 0 ? radix : 10;\n\n    if (radix < 2 || radix > 36) {\n      throw (0, error_1.newError)('radix out of range: ' + radix.toString());\n    }\n\n    var p;\n\n    if ((p = str.indexOf('-')) > 0) {\n      throw (0, error_1.newError)('number format error: interior \"-\" character: ' + str);\n    } else if (p === 0) {\n      return Integer.fromString(str.substring(1), radix).negate();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n\n    var radixToPower = Integer.fromNumber(Math.pow(radix, 8));\n    var result = Integer.ZERO;\n\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var valueString = str.substring(i, i + size);\n      var value = parseInt(valueString, radix);\n\n      if (strictStringValidation === true && !_isValidNumberFromString(valueString, value, radix)) {\n        throw (0, error_1.newError)(\"number format error: \\\"\".concat(valueString, \"\\\" is NaN in radix \").concat(radix, \": \").concat(str));\n      }\n\n      if (size < 8) {\n        var power = Integer.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(Integer.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(Integer.fromNumber(value));\n      }\n    }\n\n    return result;\n  };\n  /**\n   * Converts the specified value to a Integer.\n   * @access private\n   * @param {!Integer|number|string|bigint|!{low: number, high: number}} val Value\n   * @param {Object} [opts={}] Configuration options\n   * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n   * @param {boolean} [opts.ceilFloat=false] Enable round up float to the nearest Integer.\n   * @returns {!Integer}\n   * @expose\n   */\n\n\n  Integer.fromValue = function (val, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    if (val\n    /* is compatible */\n    instanceof Integer) {\n      return val;\n    }\n\n    if (typeof val === 'number') {\n      if (opts.ceilFloat === true) {\n        val = Math.ceil(val);\n      }\n\n      return Integer.fromNumber(val);\n    }\n\n    if (typeof val === 'string') {\n      return Integer.fromString(val, undefined, opts);\n    }\n\n    if (typeof val === 'bigint') {\n      return Integer.fromString(val.toString());\n    } // Throws for non-objects, converts non-instanceof Integer:\n\n\n    return new Integer(val.low, val.high);\n  };\n  /**\n   * Converts the specified value to a number.\n   * @access private\n   * @param {!Integer|number|string|!{low: number, high: number}} val Value\n   * @returns {number}\n   * @expose\n   */\n\n\n  Integer.toNumber = function (val) {\n    switch (typeof val) {\n      case 'number':\n        return val;\n\n      case 'bigint':\n        return Number(val);\n\n      default:\n        return Integer.fromValue(val).toNumber();\n    }\n  };\n  /**\n   * Converts the specified value to a string.\n   * @access private\n   * @param {!Integer|number|string|!{low: number, high: number}} val Value\n   * @param {number} radix optional radix for string conversion, defaults to 10\n   * @returns {string}\n   * @expose\n   */\n\n\n  Integer.toString = function (val, radix) {\n    return Integer.fromValue(val).toString(radix);\n  };\n  /**\n   * Checks if the given value is in the safe range in order to be converted to a native number\n   * @access private\n   * @param {!Integer|number|string|!{low: number, high: number}} val Value\n   * @param {number} radix optional radix for string conversion, defaults to 10\n   * @returns {boolean}\n   * @expose\n   */\n\n\n  Integer.inSafeRange = function (val) {\n    return Integer.fromValue(val).inSafeRange();\n  };\n  /**\n   * Signed zero.\n   * @type {!Integer}\n   * @expose\n   */\n\n\n  Integer.ZERO = Integer.fromInt(0);\n  /**\n   * Signed one.\n   * @type {!Integer}\n   * @expose\n   */\n\n  Integer.ONE = Integer.fromInt(1);\n  /**\n   * Signed negative one.\n   * @type {!Integer}\n   * @expose\n   */\n\n  Integer.NEG_ONE = Integer.fromInt(-1);\n  /**\n   * Maximum signed value.\n   * @type {!Integer}\n   * @expose\n   */\n\n  Integer.MAX_VALUE = Integer.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n  /**\n   * Minimum signed value.\n   * @type {!Integer}\n   * @expose\n   */\n\n  Integer.MIN_VALUE = Integer.fromBits(0, 0x80000000 | 0);\n  /**\n   * Minimum safe value.\n   * @type {!Integer}\n   * @expose\n   */\n\n  Integer.MIN_SAFE_VALUE = Integer.fromBits(0x1 | 0, 0xffffffffffe00000 | 0);\n  /**\n   * Maximum safe value.\n   * @type {!Integer}\n   * @expose\n   */\n\n  Integer.MAX_SAFE_VALUE = Integer.fromBits(0xffffffff | 0, 0x1fffff | 0);\n  /**\n   * An indicator used to reliably determine if an object is a Integer or not.\n   * @type {boolean}\n   * @const\n   * @expose\n   * @private\n   */\n\n  Integer.__isInteger__ = true;\n  return Integer;\n}();\n/**\n * @private\n * @param num\n * @param radix\n * @param minSize\n * @returns {string}\n */\n\n\nfunction _convertNumberToString(num, radix, minSize) {\n  var theNumberString = num.toString(radix);\n  var paddingLength = Math.max(minSize - theNumberString.length, 0);\n  var padding = '0'.repeat(paddingLength);\n  return \"\".concat(padding).concat(theNumberString);\n}\n/**\n *\n * @private\n * @param theString\n * @param theNumber\n * @param radix\n * @return {boolean} True if valid\n */\n\n\nfunction _isValidNumberFromString(theString, theNumber, radix) {\n  return !Number.isNaN(theString) && !Number.isNaN(theNumber) && _convertNumberToString(theNumber, radix, theString.length) === theString.toLowerCase();\n}\n\nObject.defineProperty(Integer.prototype, '__isInteger__', {\n  value: true,\n  enumerable: false,\n  configurable: false\n});\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Integer}\n * @const\n * @inner\n * @private\n */\n\nvar TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);\n/**\n * Cast value to Integer type.\n * @access public\n * @param {Mixed} value - The value to use.\n * @param {Object} [opts={}] Configuration options\n * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n * @param {boolean} [opts.ceilFloat=false] Enable round up float to the nearest Integer.\n * @return {Integer} - An object of type Integer.\n */\n\nvar int = Integer.fromValue;\nexports.int = int;\n/**\n * Check if a variable is of Integer type.\n * @access public\n * @param {Mixed} value - The variable to check.\n * @return {Boolean} - Is it of the Integer type?\n */\n\nvar isInt = Integer.isInteger;\nexports.isInt = isInt;\n/**\n * Check if a variable can be safely converted to a number\n * @access public\n * @param {Mixed} value - The variable to check\n * @return {Boolean} - true if it is safe to call toNumber on variable otherwise false\n */\n\nvar inSafeRange = Integer.inSafeRange;\nexports.inSafeRange = inSafeRange;\n/**\n * Converts a variable to a number\n * @access public\n * @param {Mixed} value - The variable to convert\n * @return {number} - the variable as a number\n */\n\nvar toNumber = Integer.toNumber;\nexports.toNumber = toNumber;\n/**\n * Converts the integer to a string representation\n * @access public\n * @param {Mixed} value - The variable to convert\n * @param {number} radix - radix to use in string conversion, defaults to 10\n * @return {string} - returns a string representation of the integer\n */\n\nvar toString = Integer.toString;\nexports.toString = toString;\nexports.default = Integer;","map":{"version":3,"names":["Object","defineProperty","exports","value","toString","toNumber","inSafeRange","isInt","int","error_1","require","INT_CACHE","Map","Integer","low","high","prototype","greaterThanOrEqual","MIN_SAFE_VALUE","lessThanOrEqual","MAX_SAFE_VALUE","toInt","TWO_PWR_32_DBL","toBigInt","isZero","BigInt","isPositive","negate","toNumberOrInfinity","lessThan","Number","NEGATIVE_INFINITY","greaterThan","POSITIVE_INFINITY","radix","RangeError","rem","isNegative","equals","MIN_VALUE","radixInteger","fromNumber","div","multiply","subtract","radixToPower","Math","pow","result","remDiv","intval","digits","length","valueOf","getHighBits","getLowBits","getNumBitsAbs","val","bit","isOdd","isEven","other","theOther","fromValue","notEquals","compare","thisNeg","otherNeg","not","add","ONE","addend","theAddend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","fromBits","subtrahend","theSubtrahend","multiplier","ZERO","theMultiplier","TWO_PWR_24","divisor","theDivisor","newError","approx","res","NEG_ONE","halfThis","shiftRight","shiftLeft","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","bitsCount","numBitNum","isInteger","obj","__isInteger__","fromInt","cachedObj","get","set","lowBits","highBits","isNaN","isFinite","TWO_PWR_63_DBL","MAX_VALUE","fromString","str","_a","_b","strictStringValidation","p","indexOf","substring","i","size","min","valueString","parseInt","_isValidNumberFromString","concat","power","opts","ceilFloat","undefined","_convertNumberToString","num","minSize","theNumberString","paddingLength","padding","repeat","theString","theNumber","toLowerCase","enumerable","configurable","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_64_DBL","default"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-core/lib/integer.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = void 0;\n// 64-bit Integer library, originally from Long.js by dcodeIO\n// https://github.com/dcodeIO/Long.js\n// License Apache 2\nvar error_1 = require(\"./error\");\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object}\n * @inner\n * @private\n */\n// eslint-disable-next-line no-use-before-define\nvar INT_CACHE = new Map();\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n * See exported functions for more convenient ways of operating integers.\n * Use `int()` function to create new integers, `isInt()` to check if given object is integer,\n * `inSafeRange()` to check if it is safe to convert given value to native number,\n * `toNumber()` and `toString()` to convert given integer to number or string respectively.\n * @access public\n * @exports Integer\n * @class A Integer class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n *\n * @constructor\n */\nvar Integer = /** @class */ (function () {\n    function Integer(low, high) {\n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low !== null && low !== void 0 ? low : 0;\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high !== null && high !== void 0 ? high : 0;\n    }\n    // The internal representation of an Integer is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // JavaScript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within JavaScript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n    Integer.prototype.inSafeRange = function () {\n        return (this.greaterThanOrEqual(Integer.MIN_SAFE_VALUE) &&\n            this.lessThanOrEqual(Integer.MAX_SAFE_VALUE));\n    };\n    /**\n     * Converts the Integer to an exact javascript Number, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.toInt = function () {\n        return this.low;\n    };\n    /**\n     * Converts the Integer to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.toNumber = function () {\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n    /**\n     * Converts the Integer to a BigInt representation of this value\n     * @returns {bigint}\n     * @expose\n     */\n    Integer.prototype.toBigInt = function () {\n        if (this.isZero()) {\n            return BigInt(0);\n        }\n        else if (this.isPositive()) {\n            return (BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) +\n                BigInt(this.low >>> 0));\n        }\n        else {\n            var negate = this.negate();\n            return (BigInt(-1) *\n                (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) +\n                    BigInt(negate.low >>> 0)));\n        }\n    };\n    /**\n     * Converts the Integer to native number or -Infinity/+Infinity when it does not fit.\n     * @return {number}\n     * @package\n     */\n    Integer.prototype.toNumberOrInfinity = function () {\n        if (this.lessThan(Integer.MIN_SAFE_VALUE)) {\n            return Number.NEGATIVE_INFINITY;\n        }\n        else if (this.greaterThan(Integer.MAX_SAFE_VALUE)) {\n            return Number.POSITIVE_INFINITY;\n        }\n        else {\n            return this.toNumber();\n        }\n    };\n    /**\n     * Converts the Integer to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n    Integer.prototype.toString = function (radix) {\n        radix = radix !== null && radix !== void 0 ? radix : 10;\n        if (radix < 2 || radix > 36) {\n            throw RangeError('radix out of range: ' + radix.toString());\n        }\n        if (this.isZero()) {\n            return '0';\n        }\n        var rem;\n        if (this.isNegative()) {\n            if (this.equals(Integer.MIN_VALUE)) {\n                // We need to change the Integer value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixInteger = Integer.fromNumber(radix);\n                var div = this.div(radixInteger);\n                rem = div.multiply(radixInteger).subtract(this);\n                return div.toString(radix) + rem.toInt().toString(radix);\n            }\n            else {\n                return '-' + this.negate().toString(radix);\n            }\n        }\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Integer.fromNumber(Math.pow(radix, 6));\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower);\n            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n            var digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            }\n            else {\n                while (digits.length < 6) {\n                    digits = '0' + digits;\n                }\n                result = '' + digits + result;\n            }\n        }\n    };\n    /**\n     * Converts the Integer to it primitive value.\n     *\n     * @since 5.4.0\n     * @returns {bigint}\n     *\n     * @see {@link Integer#toBigInt}\n     * @see {@link Integer#toInt}\n     * @see {@link Integer#toNumber}\n     * @see {@link Integer#toString}\n     */\n    Integer.prototype.valueOf = function () {\n        return this.toBigInt();\n    };\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n    Integer.prototype.getHighBits = function () {\n        return this.high;\n    };\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n    Integer.prototype.getLowBits = function () {\n        return this.low;\n    };\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Integer.\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.getNumBitsAbs = function () {\n        if (this.isNegative()) {\n            return this.equals(Integer.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n        }\n        var val = this.high !== 0 ? this.high : this.low;\n        var bit = 0;\n        for (bit = 31; bit > 0; bit--) {\n            if ((val & (1 << bit)) !== 0) {\n                break;\n            }\n        }\n        return this.high !== 0 ? bit + 33 : bit + 1;\n    };\n    /**\n     * Tests if this Integer's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isZero = function () {\n        return this.high === 0 && this.low === 0;\n    };\n    /**\n     * Tests if this Integer's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isNegative = function () {\n        return this.high < 0;\n    };\n    /**\n     * Tests if this Integer's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isPositive = function () {\n        return this.high >= 0;\n    };\n    /**\n     * Tests if this Integer's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isOdd = function () {\n        return (this.low & 1) === 1;\n    };\n    /**\n     * Tests if this Integer's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isEven = function () {\n        return (this.low & 1) === 0;\n    };\n    /**\n     * Tests if this Integer's value equals the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.equals = function (other) {\n        var theOther = Integer.fromValue(other);\n        return this.high === theOther.high && this.low === theOther.low;\n    };\n    /**\n     * Tests if this Integer's value differs from the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.notEquals = function (other) {\n        return !this.equals(/* validates */ other);\n    };\n    /**\n     * Tests if this Integer's value is less than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.lessThan = function (other) {\n        return this.compare(/* validates */ other) < 0;\n    };\n    /**\n     * Tests if this Integer's value is less than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.lessThanOrEqual = function (other) {\n        return this.compare(/* validates */ other) <= 0;\n    };\n    /**\n     * Tests if this Integer's value is greater than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.greaterThan = function (other) {\n        return this.compare(/* validates */ other) > 0;\n    };\n    /**\n     * Tests if this Integer's value is greater than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.greaterThanOrEqual = function (other) {\n        return this.compare(/* validates */ other) >= 0;\n    };\n    /**\n     * Compares this Integer's value with the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    Integer.prototype.compare = function (other) {\n        var theOther = Integer.fromValue(other);\n        if (this.equals(theOther)) {\n            return 0;\n        }\n        var thisNeg = this.isNegative();\n        var otherNeg = theOther.isNegative();\n        if (thisNeg && !otherNeg) {\n            return -1;\n        }\n        if (!thisNeg && otherNeg) {\n            return 1;\n        }\n        // At this point the sign bits are the same\n        return this.subtract(theOther).isNegative() ? -1 : 1;\n    };\n    /**\n     * Negates this Integer's value.\n     * @returns {!Integer} Negated Integer\n     * @expose\n     */\n    Integer.prototype.negate = function () {\n        if (this.equals(Integer.MIN_VALUE)) {\n            return Integer.MIN_VALUE;\n        }\n        return this.not().add(Integer.ONE);\n    };\n    /**\n     * Returns the sum of this and the specified Integer.\n     * @param {!Integer|number|string} addend Addend\n     * @returns {!Integer} Sum\n     * @expose\n     */\n    Integer.prototype.add = function (addend) {\n        var theAddend = Integer.fromValue(addend);\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = theAddend.high >>> 16;\n        var b32 = theAddend.high & 0xffff;\n        var b16 = theAddend.low >>> 16;\n        var b00 = theAddend.low & 0xffff;\n        var c48 = 0;\n        var c32 = 0;\n        var c16 = 0;\n        var c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n    };\n    /**\n     * Returns the difference of this and the specified Integer.\n     * @param {!Integer|number|string} subtrahend Subtrahend\n     * @returns {!Integer} Difference\n     * @expose\n     */\n    Integer.prototype.subtract = function (subtrahend) {\n        var theSubtrahend = Integer.fromValue(subtrahend);\n        return this.add(theSubtrahend.negate());\n    };\n    /**\n     * Returns the product of this and the specified Integer.\n     * @param {!Integer|number|string} multiplier Multiplier\n     * @returns {!Integer} Product\n     * @expose\n     */\n    Integer.prototype.multiply = function (multiplier) {\n        if (this.isZero()) {\n            return Integer.ZERO;\n        }\n        var theMultiplier = Integer.fromValue(multiplier);\n        if (theMultiplier.isZero()) {\n            return Integer.ZERO;\n        }\n        if (this.equals(Integer.MIN_VALUE)) {\n            return theMultiplier.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n        }\n        if (theMultiplier.equals(Integer.MIN_VALUE)) {\n            return this.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n        }\n        if (this.isNegative()) {\n            if (theMultiplier.isNegative()) {\n                return this.negate().multiply(theMultiplier.negate());\n            }\n            else {\n                return this.negate()\n                    .multiply(theMultiplier)\n                    .negate();\n            }\n        }\n        else if (theMultiplier.isNegative()) {\n            return this.multiply(theMultiplier.negate()).negate();\n        }\n        // If both longs are small, use float multiplication\n        if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {\n            return Integer.fromNumber(this.toNumber() * theMultiplier.toNumber());\n        }\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = theMultiplier.high >>> 16;\n        var b32 = theMultiplier.high & 0xffff;\n        var b16 = theMultiplier.low >>> 16;\n        var b00 = theMultiplier.low & 0xffff;\n        var c48 = 0;\n        var c32 = 0;\n        var c16 = 0;\n        var c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n    };\n    /**\n     * Returns this Integer divided by the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Quotient\n     * @expose\n     */\n    Integer.prototype.div = function (divisor) {\n        var theDivisor = Integer.fromValue(divisor);\n        if (theDivisor.isZero()) {\n            throw (0, error_1.newError)('division by zero');\n        }\n        if (this.isZero()) {\n            return Integer.ZERO;\n        }\n        var approx, rem, res;\n        if (this.equals(Integer.MIN_VALUE)) {\n            if (theDivisor.equals(Integer.ONE) ||\n                theDivisor.equals(Integer.NEG_ONE)) {\n                return Integer.MIN_VALUE;\n            }\n            if (theDivisor.equals(Integer.MIN_VALUE)) {\n                return Integer.ONE;\n            }\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = this.shiftRight(1);\n                approx = halfThis.div(theDivisor).shiftLeft(1);\n                if (approx.equals(Integer.ZERO)) {\n                    return theDivisor.isNegative() ? Integer.ONE : Integer.NEG_ONE;\n                }\n                else {\n                    rem = this.subtract(theDivisor.multiply(approx));\n                    res = approx.add(rem.div(theDivisor));\n                    return res;\n                }\n            }\n        }\n        else if (theDivisor.equals(Integer.MIN_VALUE)) {\n            return Integer.ZERO;\n        }\n        if (this.isNegative()) {\n            if (theDivisor.isNegative()) {\n                return this.negate().div(theDivisor.negate());\n            }\n            return this.negate()\n                .div(theDivisor)\n                .negate();\n        }\n        else if (theDivisor.isNegative()) {\n            return this.div(theDivisor.negate()).negate();\n        }\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        res = Integer.ZERO;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        rem = this;\n        while (rem.greaterThanOrEqual(theDivisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / theDivisor.toNumber()));\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            var approxRes = Integer.fromNumber(approx);\n            var approxRem = approxRes.multiply(theDivisor);\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n                approx -= delta;\n                approxRes = Integer.fromNumber(approx);\n                approxRem = approxRes.multiply(theDivisor);\n            }\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) {\n                approxRes = Integer.ONE;\n            }\n            res = res.add(approxRes);\n            rem = rem.subtract(approxRem);\n        }\n        return res;\n    };\n    /**\n     * Returns this Integer modulo the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Remainder\n     * @expose\n     */\n    Integer.prototype.modulo = function (divisor) {\n        var theDivisor = Integer.fromValue(divisor);\n        return this.subtract(this.div(theDivisor).multiply(theDivisor));\n    };\n    /**\n     * Returns the bitwise NOT of this Integer.\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.not = function () {\n        return Integer.fromBits(~this.low, ~this.high);\n    };\n    /**\n     * Returns the bitwise AND of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.and = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low & theOther.low, this.high & theOther.high);\n    };\n    /**\n     * Returns the bitwise OR of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.or = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low | theOther.low, this.high | theOther.high);\n    };\n    /**\n     * Returns the bitwise XOR of this Integer and the given one.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.xor = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low ^ theOther.low, this.high ^ theOther.high);\n    };\n    /**\n     * Returns this Integer with bits shifted to the left by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n    Integer.prototype.shiftLeft = function (numBits) {\n        var bitsCount = Integer.toNumber(numBits);\n        if ((bitsCount &= 63) === 0) {\n            return Integer.ZERO;\n        }\n        else if (bitsCount < 32) {\n            return Integer.fromBits(this.low << bitsCount, (this.high << bitsCount) | (this.low >>> (32 - bitsCount)));\n        }\n        else {\n            return Integer.fromBits(0, this.low << (bitsCount - 32));\n        }\n    };\n    /**\n     * Returns this Integer with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n    Integer.prototype.shiftRight = function (numBits) {\n        var bitsCount = Integer.toNumber(numBits);\n        var numBitNum = Integer.toNumber(numBits);\n        if ((bitsCount &= 63) === 0) {\n            return Integer.ZERO;\n        }\n        else if (numBitNum < 32) {\n            return Integer.fromBits((this.low >>> bitsCount) | (this.high << (32 - bitsCount)), this.high >> bitsCount);\n        }\n        else {\n            return Integer.fromBits(this.high >> (bitsCount - 32), this.high >= 0 ? 0 : -1);\n        }\n    };\n    /**\n     * Tests if the specified object is a Integer.\n     * @access private\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.isInteger = function (obj) {\n        return (obj === null || obj === void 0 ? void 0 : obj.__isInteger__) === true;\n    };\n    /**\n     * Returns a Integer representing the given 32 bit integer value.\n     * @access private\n     * @param {number} value The 32 bit integer in question\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromInt = function (value) {\n        var cachedObj;\n        value = value | 0;\n        if (value >= -128 && value < 128) {\n            cachedObj = INT_CACHE.get(value);\n            if (cachedObj != null) {\n                return cachedObj;\n            }\n        }\n        var obj = new Integer(value, value < 0 ? -1 : 0);\n        if (value >= -128 && value < 128) {\n            INT_CACHE.set(value, obj);\n        }\n        return obj;\n    };\n    /**\n     * Returns a Integer representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @access private\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromBits = function (lowBits, highBits) {\n        return new Integer(lowBits, highBits);\n    };\n    /**\n     * Returns a Integer representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @access private\n     * @param {number} value The number in question\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromNumber = function (value) {\n        if (isNaN(value) || !isFinite(value)) {\n            return Integer.ZERO;\n        }\n        if (value <= -TWO_PWR_63_DBL) {\n            return Integer.MIN_VALUE;\n        }\n        if (value + 1 >= TWO_PWR_63_DBL) {\n            return Integer.MAX_VALUE;\n        }\n        if (value < 0) {\n            return Integer.fromNumber(-value).negate();\n        }\n        return new Integer(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0);\n    };\n    /**\n     * Returns a Integer representation of the given string, written using the specified radix.\n     * @access private\n     * @param {string} str The textual representation of the Integer\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @param {Object} [opts={}] Configuration options\n     * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromString = function (str, radix, _a) {\n        var _b = _a === void 0 ? {} : _a, strictStringValidation = _b.strictStringValidation;\n        if (str.length === 0) {\n            throw (0, error_1.newError)('number format error: empty string');\n        }\n        if (str === 'NaN' ||\n            str === 'Infinity' ||\n            str === '+Infinity' ||\n            str === '-Infinity') {\n            return Integer.ZERO;\n        }\n        radix = radix !== null && radix !== void 0 ? radix : 10;\n        if (radix < 2 || radix > 36) {\n            throw (0, error_1.newError)('radix out of range: ' + radix.toString());\n        }\n        var p;\n        if ((p = str.indexOf('-')) > 0) {\n            throw (0, error_1.newError)('number format error: interior \"-\" character: ' + str);\n        }\n        else if (p === 0) {\n            return Integer.fromString(str.substring(1), radix).negate();\n        }\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Integer.fromNumber(Math.pow(radix, 8));\n        var result = Integer.ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i);\n            var valueString = str.substring(i, i + size);\n            var value = parseInt(valueString, radix);\n            if (strictStringValidation === true && !_isValidNumberFromString(valueString, value, radix)) {\n                throw (0, error_1.newError)(\"number format error: \\\"\".concat(valueString, \"\\\" is NaN in radix \").concat(radix, \": \").concat(str));\n            }\n            if (size < 8) {\n                var power = Integer.fromNumber(Math.pow(radix, size));\n                result = result.multiply(power).add(Integer.fromNumber(value));\n            }\n            else {\n                result = result.multiply(radixToPower);\n                result = result.add(Integer.fromNumber(value));\n            }\n        }\n        return result;\n    };\n    /**\n     * Converts the specified value to a Integer.\n     * @access private\n     * @param {!Integer|number|string|bigint|!{low: number, high: number}} val Value\n     * @param {Object} [opts={}] Configuration options\n     * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n     * @param {boolean} [opts.ceilFloat=false] Enable round up float to the nearest Integer.\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.fromValue = function (val, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (val /* is compatible */ instanceof Integer) {\n            return val;\n        }\n        if (typeof val === 'number') {\n            if (opts.ceilFloat === true) {\n                val = Math.ceil(val);\n            }\n            return Integer.fromNumber(val);\n        }\n        if (typeof val === 'string') {\n            return Integer.fromString(val, undefined, opts);\n        }\n        if (typeof val === 'bigint') {\n            return Integer.fromString(val.toString());\n        }\n        // Throws for non-objects, converts non-instanceof Integer:\n        return new Integer(val.low, val.high);\n    };\n    /**\n     * Converts the specified value to a number.\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @returns {number}\n     * @expose\n     */\n    Integer.toNumber = function (val) {\n        switch (typeof val) {\n            case 'number':\n                return val;\n            case 'bigint':\n                return Number(val);\n            default:\n                return Integer.fromValue(val).toNumber();\n        }\n    };\n    /**\n     * Converts the specified value to a string.\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @param {number} radix optional radix for string conversion, defaults to 10\n     * @returns {string}\n     * @expose\n     */\n    Integer.toString = function (val, radix) {\n        return Integer.fromValue(val).toString(radix);\n    };\n    /**\n     * Checks if the given value is in the safe range in order to be converted to a native number\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @param {number} radix optional radix for string conversion, defaults to 10\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.inSafeRange = function (val) {\n        return Integer.fromValue(val).inSafeRange();\n    };\n    /**\n     * Signed zero.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.ZERO = Integer.fromInt(0);\n    /**\n     * Signed one.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.ONE = Integer.fromInt(1);\n    /**\n     * Signed negative one.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.NEG_ONE = Integer.fromInt(-1);\n    /**\n     * Maximum signed value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MAX_VALUE = Integer.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n    /**\n     * Minimum signed value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MIN_VALUE = Integer.fromBits(0, 0x80000000 | 0);\n    /**\n     * Minimum safe value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MIN_SAFE_VALUE = Integer.fromBits(0x1 | 0, 0xffffffffffe00000 | 0);\n    /**\n     * Maximum safe value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MAX_SAFE_VALUE = Integer.fromBits(0xffffffff | 0, 0x1fffff | 0);\n    /**\n     * An indicator used to reliably determine if an object is a Integer or not.\n     * @type {boolean}\n     * @const\n     * @expose\n     * @private\n     */\n    Integer.__isInteger__ = true;\n    return Integer;\n}());\n/**\n * @private\n * @param num\n * @param radix\n * @param minSize\n * @returns {string}\n */\nfunction _convertNumberToString(num, radix, minSize) {\n    var theNumberString = num.toString(radix);\n    var paddingLength = Math.max(minSize - theNumberString.length, 0);\n    var padding = '0'.repeat(paddingLength);\n    return \"\".concat(padding).concat(theNumberString);\n}\n/**\n *\n * @private\n * @param theString\n * @param theNumber\n * @param radix\n * @return {boolean} True if valid\n */\nfunction _isValidNumberFromString(theString, theNumber, radix) {\n    return !Number.isNaN(theString) &&\n        !Number.isNaN(theNumber) &&\n        _convertNumberToString(theNumber, radix, theString.length) === theString.toLowerCase();\n}\nObject.defineProperty(Integer.prototype, '__isInteger__', {\n    value: true,\n    enumerable: false,\n    configurable: false\n});\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Integer}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);\n/**\n * Cast value to Integer type.\n * @access public\n * @param {Mixed} value - The value to use.\n * @param {Object} [opts={}] Configuration options\n * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n * @param {boolean} [opts.ceilFloat=false] Enable round up float to the nearest Integer.\n * @return {Integer} - An object of type Integer.\n */\nvar int = Integer.fromValue;\nexports.int = int;\n/**\n * Check if a variable is of Integer type.\n * @access public\n * @param {Mixed} value - The variable to check.\n * @return {Boolean} - Is it of the Integer type?\n */\nvar isInt = Integer.isInteger;\nexports.isInt = isInt;\n/**\n * Check if a variable can be safely converted to a number\n * @access public\n * @param {Mixed} value - The variable to check\n * @return {Boolean} - true if it is safe to call toNumber on variable otherwise false\n */\nvar inSafeRange = Integer.inSafeRange;\nexports.inSafeRange = inSafeRange;\n/**\n * Converts a variable to a number\n * @access public\n * @param {Mixed} value - The variable to convert\n * @return {number} - the variable as a number\n */\nvar toNumber = Integer.toNumber;\nexports.toNumber = toNumber;\n/**\n * Converts the integer to a string representation\n * @access public\n * @param {Mixed} value - The variable to convert\n * @param {number} radix - radix to use in string conversion, defaults to 10\n * @return {string} - returns a string representation of the integer\n */\nvar toString = Integer.toString;\nexports.toString = toString;\nexports.default = Integer;\n"],"mappings":"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AAc,GAAGA,cAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIE,cAAc,GAAG7I,cAAc,GAAGA,cAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAI0G,cAAc,GAAGmC,cAAc,GAAG,CAAtC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIxE,UAAU,GAAG9E,OAAO,CAAC2G,OAAR,CAAgB0C,cAAhB,CAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAI1J,GAAG,GAAGK,OAAO,CAACkD,SAAlB;AACA7D,OAAO,CAACM,GAAR,GAAcA,GAAd;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,KAAK,GAAGM,OAAO,CAACwG,SAApB;AACAnH,OAAO,CAACK,KAAR,GAAgBA,KAAhB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,WAAW,GAAGO,OAAO,CAACP,WAA1B;AACAJ,OAAO,CAACI,WAAR,GAAsBA,WAAtB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,QAAQ,GAAGQ,OAAO,CAACR,QAAvB;AACAH,OAAO,CAACG,QAAR,GAAmBA,QAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,QAAQ,GAAGS,OAAO,CAACT,QAAvB;AACAF,OAAO,CAACE,QAAR,GAAmBA,QAAnB;AACAF,OAAO,CAACkK,OAAR,GAAkBvJ,OAAlB"},"metadata":{},"sourceType":"script"}