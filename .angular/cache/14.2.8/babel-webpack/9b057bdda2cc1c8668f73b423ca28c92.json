{"ast":null,"code":"\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.floorMod = exports.floorDiv = exports.assertValidZoneId = exports.assertValidNanosecond = exports.assertValidSecond = exports.assertValidMinute = exports.assertValidHour = exports.assertValidDay = exports.assertValidMonth = exports.assertValidYear = exports.timeZoneOffsetInSeconds = exports.totalNanoseconds = exports.newDate = exports.toStandardDate = exports.isoStringToStandardDate = exports.dateToIsoString = exports.timeZoneOffsetToIsoString = exports.timeToIsoString = exports.durationToIsoString = exports.dateToEpochDay = exports.localDateTimeToEpochSecond = exports.localTimeToNanoOfDay = exports.normalizeNanosecondsForDuration = exports.normalizeSecondsForDuration = exports.SECONDS_PER_DAY = exports.DAYS_PER_400_YEAR_CYCLE = exports.DAYS_0000_TO_1970 = exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE = exports.NANOS_PER_MILLISECOND = exports.NANOS_PER_SECOND = exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE = exports.MINUTES_PER_HOUR = exports.NANOSECOND_OF_SECOND_RANGE = exports.SECOND_OF_MINUTE_RANGE = exports.MINUTE_OF_HOUR_RANGE = exports.HOUR_OF_DAY_RANGE = exports.DAY_OF_MONTH_RANGE = exports.MONTH_OF_YEAR_RANGE = exports.YEAR_RANGE = void 0;\n\nvar integer_1 = __importStar(require(\"../integer\"));\n\nvar error_1 = require(\"../error\");\n\nvar util_1 = require(\"./util\");\n/*\n  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.\n\n  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived\n  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere\n  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.\n\n  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the\n  conversion functions.\n */\n\n\nvar ValueRange =\n/** @class */\nfunction () {\n  function ValueRange(min, max) {\n    this._minNumber = min;\n    this._maxNumber = max;\n    this._minInteger = (0, integer_1.int)(min);\n    this._maxInteger = (0, integer_1.int)(max);\n  }\n\n  ValueRange.prototype.contains = function (value) {\n    if ((0, integer_1.isInt)(value) && value instanceof integer_1.default) {\n      return value.greaterThanOrEqual(this._minInteger) && value.lessThanOrEqual(this._maxInteger);\n    } else if (typeof value === 'bigint') {\n      var intValue = (0, integer_1.int)(value);\n      return intValue.greaterThanOrEqual(this._minInteger) && intValue.lessThanOrEqual(this._maxInteger);\n    } else {\n      return value >= this._minNumber && value <= this._maxNumber;\n    }\n  };\n\n  ValueRange.prototype.toString = function () {\n    return \"[\".concat(this._minNumber, \", \").concat(this._maxNumber, \"]\");\n  };\n\n  return ValueRange;\n}();\n\nexports.YEAR_RANGE = new ValueRange(-999999999, 999999999);\nexports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);\nexports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);\nexports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);\nexports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);\nexports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);\nexports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);\nexports.MINUTES_PER_HOUR = 60;\nexports.SECONDS_PER_MINUTE = 60;\nexports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.NANOS_PER_SECOND = 1000000000;\nexports.NANOS_PER_MILLISECOND = 1000000;\nexports.NANOS_PER_MINUTE = exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;\nexports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.DAYS_0000_TO_1970 = 719528;\nexports.DAYS_PER_400_YEAR_CYCLE = 146097;\nexports.SECONDS_PER_DAY = 86400;\n\nfunction normalizeSecondsForDuration(seconds, nanoseconds) {\n  return (0, integer_1.int)(seconds).add(floorDiv(nanoseconds, exports.NANOS_PER_SECOND));\n}\n\nexports.normalizeSecondsForDuration = normalizeSecondsForDuration;\n\nfunction normalizeNanosecondsForDuration(nanoseconds) {\n  return floorMod(nanoseconds, exports.NANOS_PER_SECOND);\n}\n\nexports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;\n/**\n * Converts given local time into a single integer representing this same time in nanoseconds of the day.\n * @param {Integer|number|string} hour the hour of the local time to convert.\n * @param {Integer|number|string} minute the minute of the local time to convert.\n * @param {Integer|number|string} second the second of the local time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.\n * @return {Integer} nanoseconds representing the given local time.\n */\n\nfunction localTimeToNanoOfDay(hour, minute, second, nanosecond) {\n  hour = (0, integer_1.int)(hour);\n  minute = (0, integer_1.int)(minute);\n  second = (0, integer_1.int)(second);\n  nanosecond = (0, integer_1.int)(nanosecond);\n  var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);\n  totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));\n  totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));\n  return totalNanos.add(nanosecond);\n}\n\nexports.localTimeToNanoOfDay = localTimeToNanoOfDay;\n/**\n * Converts given local date time into a single integer representing this same time in epoch seconds UTC.\n * @param {Integer|number|string} year the year of the local date-time to convert.\n * @param {Integer|number|string} month the month of the local date-time to convert.\n * @param {Integer|number|string} day the day of the local date-time to convert.\n * @param {Integer|number|string} hour the hour of the local date-time to convert.\n * @param {Integer|number|string} minute the minute of the local date-time to convert.\n * @param {Integer|number|string} second the second of the local date-time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.\n * @return {Integer} epoch second in UTC representing the given local date time.\n */\n\nfunction localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {\n  var epochDay = dateToEpochDay(year, month, day);\n  var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);\n  return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);\n}\n\nexports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;\n/**\n * Converts given local date into a single integer representing it's epoch day.\n * @param {Integer|number|string} year the year of the local date to convert.\n * @param {Integer|number|string} month the month of the local date to convert.\n * @param {Integer|number|string} day the day of the local date to convert.\n * @return {Integer} epoch day representing the given date.\n */\n\nfunction dateToEpochDay(year, month, day) {\n  year = (0, integer_1.int)(year);\n  month = (0, integer_1.int)(month);\n  day = (0, integer_1.int)(day);\n  var epochDay = year.multiply(365);\n\n  if (year.greaterThanOrEqual(0)) {\n    epochDay = epochDay.add(year.add(3).div(4).subtract(year.add(99).div(100)).add(year.add(399).div(400)));\n  } else {\n    epochDay = epochDay.subtract(year.div(-4).subtract(year.div(-100)).add(year.div(-400)));\n  }\n\n  epochDay = epochDay.add(month.multiply(367).subtract(362).div(12));\n  epochDay = epochDay.add(day.subtract(1));\n\n  if (month.greaterThan(2)) {\n    epochDay = epochDay.subtract(1);\n\n    if (!isLeapYear(year)) {\n      epochDay = epochDay.subtract(1);\n    }\n  }\n\n  return epochDay.subtract(exports.DAYS_0000_TO_1970);\n}\n\nexports.dateToEpochDay = dateToEpochDay;\n/**\n * Format given duration to an ISO 8601 string.\n * @param {Integer|number|string} months the number of months.\n * @param {Integer|number|string} days the number of days.\n * @param {Integer|number|string} seconds the number of seconds.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds.\n * @return {string} ISO string that represents given duration.\n */\n\nfunction durationToIsoString(months, days, seconds, nanoseconds) {\n  var monthsString = formatNumber(months);\n  var daysString = formatNumber(days);\n  var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);\n  return \"P\".concat(monthsString, \"M\").concat(daysString, \"DT\").concat(secondsAndNanosecondsString, \"S\");\n}\n\nexports.durationToIsoString = durationToIsoString;\n/**\n * Formats given time to an ISO 8601 string.\n * @param {Integer|number|string} hour the hour value.\n * @param {Integer|number|string} minute the minute value.\n * @param {Integer|number|string} second the second value.\n * @param {Integer|number|string} nanosecond the nanosecond value.\n * @return {string} ISO string that represents given time.\n */\n\nfunction timeToIsoString(hour, minute, second, nanosecond) {\n  var hourString = formatNumber(hour, 2);\n  var minuteString = formatNumber(minute, 2);\n  var secondString = formatNumber(second, 2);\n  var nanosecondString = formatNanosecond(nanosecond);\n  return \"\".concat(hourString, \":\").concat(minuteString, \":\").concat(secondString).concat(nanosecondString);\n}\n\nexports.timeToIsoString = timeToIsoString;\n/**\n * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.\n * @param {Integer|number|string} offsetSeconds the offset in seconds.\n * @return {string} ISO string that represents given offset.\n */\n\nfunction timeZoneOffsetToIsoString(offsetSeconds) {\n  offsetSeconds = (0, integer_1.int)(offsetSeconds);\n\n  if (offsetSeconds.equals(0)) {\n    return 'Z';\n  }\n\n  var isNegative = offsetSeconds.isNegative();\n\n  if (isNegative) {\n    offsetSeconds = offsetSeconds.multiply(-1);\n  }\n\n  var signPrefix = isNegative ? '-' : '+';\n  var hours = formatNumber(offsetSeconds.div(exports.SECONDS_PER_HOUR), 2);\n  var minutes = formatNumber(offsetSeconds.div(exports.SECONDS_PER_MINUTE).modulo(exports.MINUTES_PER_HOUR), 2);\n  var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);\n  var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);\n  return seconds != null ? \"\".concat(signPrefix).concat(hours, \":\").concat(minutes, \":\").concat(seconds) : \"\".concat(signPrefix).concat(hours, \":\").concat(minutes);\n}\n\nexports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;\n/**\n * Formats given date to an ISO 8601 string.\n * @param {Integer|number|string} year the date year.\n * @param {Integer|number|string} month the date month.\n * @param {Integer|number|string} day the date day.\n * @return {string} ISO string that represents given date.\n */\n\nfunction dateToIsoString(year, month, day) {\n  var yearString = formatYear(year);\n  var monthString = formatNumber(month, 2);\n  var dayString = formatNumber(day, 2);\n  return \"\".concat(yearString, \"-\").concat(monthString, \"-\").concat(dayString);\n}\n\nexports.dateToIsoString = dateToIsoString;\n/**\n * Convert the given iso date string to a JavaScript Date object\n *\n * @param {string} isoString The iso date string\n * @returns {Date} the date\n */\n\nfunction isoStringToStandardDate(isoString) {\n  return new Date(isoString);\n}\n\nexports.isoStringToStandardDate = isoStringToStandardDate;\n/**\n * Convert the given utc timestamp to a JavaScript Date object\n *\n * @param {number} utc Timestamp in UTC\n * @returns {Date} the date\n */\n\nfunction toStandardDate(utc) {\n  return new Date(utc);\n}\n\nexports.toStandardDate = toStandardDate;\n/**\n * Shortcut for creating a new StandardDate\n * @param date\n * @returns {Date} the standard date\n */\n\nfunction newDate(date) {\n  return new Date(date);\n}\n\nexports.newDate = newDate;\n/**\n * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.\n * @param {global.Date} standardDate the standard JavaScript date.\n * @param {Integer|number|bigint|undefined} nanoseconds the optional number of nanoseconds.\n * @return {Integer|number|bigint} the total amount of nanoseconds.\n */\n\nfunction totalNanoseconds(standardDate, nanoseconds) {\n  nanoseconds = nanoseconds !== null && nanoseconds !== void 0 ? nanoseconds : 0;\n  var nanosFromMillis = standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;\n  return add(nanoseconds, nanosFromMillis);\n}\n\nexports.totalNanoseconds = totalNanoseconds;\n/**\n * Get the time zone offset in seconds from the given standard JavaScript date.\n *\n * <b>Implementation note:</b>\n * Time zone offset returned by the standard JavaScript date is the difference, in minutes, from local time to UTC.\n * So positive value means offset is behind UTC and negative value means it is ahead.\n * For Neo4j temporal types, like `Time` or `DateTime` offset is in seconds and represents difference from UTC to local time.\n * This is different from standard JavaScript dates and that's why implementation negates the returned value.\n *\n * @param {global.Date} standardDate the standard JavaScript date.\n * @return {number} the time zone offset in seconds.\n */\n\nfunction timeZoneOffsetInSeconds(standardDate) {\n  var secondsPortion = standardDate.getSeconds() >= standardDate.getUTCSeconds() ? standardDate.getSeconds() - standardDate.getUTCSeconds() : standardDate.getSeconds() - standardDate.getUTCSeconds() + 60;\n  var offsetInMinutes = standardDate.getTimezoneOffset();\n\n  if (offsetInMinutes === 0) {\n    return 0 + secondsPortion;\n  }\n\n  return -1 * offsetInMinutes * exports.SECONDS_PER_MINUTE + secondsPortion;\n}\n\nexports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;\n/**\n * Assert that the year value is valid.\n * @param {Integer|number} year the value to check.\n * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.\n */\n\nfunction assertValidYear(year) {\n  return assertValidTemporalValue(year, exports.YEAR_RANGE, 'Year');\n}\n\nexports.assertValidYear = assertValidYear;\n/**\n * Assert that the month value is valid.\n * @param {Integer|number} month the value to check.\n * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.\n */\n\nfunction assertValidMonth(month) {\n  return assertValidTemporalValue(month, exports.MONTH_OF_YEAR_RANGE, 'Month');\n}\n\nexports.assertValidMonth = assertValidMonth;\n/**\n * Assert that the day value is valid.\n * @param {Integer|number} day the value to check.\n * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.\n */\n\nfunction assertValidDay(day) {\n  return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, 'Day');\n}\n\nexports.assertValidDay = assertValidDay;\n/**\n * Assert that the hour value is valid.\n * @param {Integer|number} hour the value to check.\n * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.\n */\n\nfunction assertValidHour(hour) {\n  return assertValidTemporalValue(hour, exports.HOUR_OF_DAY_RANGE, 'Hour');\n}\n\nexports.assertValidHour = assertValidHour;\n/**\n * Assert that the minute value is valid.\n * @param {Integer|number} minute the value to check.\n * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.\n */\n\nfunction assertValidMinute(minute) {\n  return assertValidTemporalValue(minute, exports.MINUTE_OF_HOUR_RANGE, 'Minute');\n}\n\nexports.assertValidMinute = assertValidMinute;\n/**\n * Assert that the second value is valid.\n * @param {Integer|number} second the value to check.\n * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.\n */\n\nfunction assertValidSecond(second) {\n  return assertValidTemporalValue(second, exports.SECOND_OF_MINUTE_RANGE, 'Second');\n}\n\nexports.assertValidSecond = assertValidSecond;\n/**\n * Assert that the nanosecond value is valid.\n * @param {Integer|number} nanosecond the value to check.\n * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.\n */\n\nfunction assertValidNanosecond(nanosecond) {\n  return assertValidTemporalValue(nanosecond, exports.NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');\n}\n\nexports.assertValidNanosecond = assertValidNanosecond;\n\nfunction assertValidZoneId(fieldName, zoneId) {\n  try {\n    Intl.DateTimeFormat(undefined, {\n      timeZone: zoneId\n    });\n  } catch (e) {\n    throw (0, error_1.newError)(\"\".concat(fieldName, \" is expected to be a valid ZoneId but was: \\\"\").concat(zoneId, \"\\\"\"));\n  }\n}\n\nexports.assertValidZoneId = assertValidZoneId;\n/**\n * Check if the given value is of expected type and is in the expected range.\n * @param {Integer|number} value the value to check.\n * @param {ValueRange} range the range.\n * @param {string} name the name of the value.\n * @return {Integer|number} the value if valid. Exception is thrown otherwise.\n */\n\nfunction assertValidTemporalValue(value, range, name) {\n  (0, util_1.assertNumberOrInteger)(value, name);\n\n  if (!range.contains(value)) {\n    throw (0, error_1.newError)(\"\".concat(name, \" is expected to be in range \").concat(range.toString(), \" but was: \").concat(value.toString()));\n  }\n\n  return value;\n}\n/**\n * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.\n * @param {Integer|number|string} hour the hour of the local time.\n * @param {Integer|number|string} minute the minute of the local time.\n * @param {Integer|number|string} second the second of the local time.\n * @return {Integer} seconds representing the given local time.\n */\n\n\nfunction localTimeToSecondOfDay(hour, minute, second) {\n  hour = (0, integer_1.int)(hour);\n  minute = (0, integer_1.int)(minute);\n  second = (0, integer_1.int)(second);\n  var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);\n  totalSeconds = totalSeconds.add(minute.multiply(exports.SECONDS_PER_MINUTE));\n  return totalSeconds.add(second);\n}\n/**\n * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.\n * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.\n * @return {boolean} `true` if given year is a leap year, `false` otherwise.\n */\n\n\nfunction isLeapYear(year) {\n  year = (0, integer_1.int)(year);\n\n  if (!year.modulo(4).equals(0)) {\n    return false;\n  } else if (!year.modulo(100).equals(0)) {\n    return true;\n  } else if (!year.modulo(400).equals(0)) {\n    return false;\n  } else {\n    return true;\n  }\n}\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\n\n\nfunction floorDiv(x, y) {\n  x = (0, integer_1.int)(x);\n  y = (0, integer_1.int)(y);\n  var result = x.div(y);\n\n  if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {\n    result = result.subtract(1);\n  }\n\n  return result;\n}\n\nexports.floorDiv = floorDiv;\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\n\nfunction floorMod(x, y) {\n  x = (0, integer_1.int)(x);\n  y = (0, integer_1.int)(y);\n  return x.subtract(floorDiv(x, y).multiply(y));\n}\n\nexports.floorMod = floorMod;\n/**\n * @param {Integer|number|string} seconds the number of seconds to format.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.\n * @return {string} formatted value.\n */\n\nfunction formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {\n  seconds = (0, integer_1.int)(seconds);\n  nanoseconds = (0, integer_1.int)(nanoseconds);\n  var secondsString;\n  var nanosecondsString;\n  var secondsNegative = seconds.isNegative();\n  var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);\n\n  if (secondsNegative && nanosecondsGreaterThanZero) {\n    if (seconds.equals(-1)) {\n      secondsString = '-0';\n    } else {\n      secondsString = seconds.add(1).toString();\n    }\n  } else {\n    secondsString = seconds.toString();\n  }\n\n  if (nanosecondsGreaterThanZero) {\n    if (secondsNegative) {\n      nanosecondsString = formatNanosecond(nanoseconds.negate().add(2 * exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));\n    } else {\n      nanosecondsString = formatNanosecond(nanoseconds.add(exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));\n    }\n  }\n\n  return nanosecondsString != null ? secondsString + nanosecondsString : secondsString;\n}\n/**\n * @param {Integer|number|string} value the number of nanoseconds to format.\n * @return {string} formatted and possibly left-padded nanoseconds part as string.\n */\n\n\nfunction formatNanosecond(value) {\n  value = (0, integer_1.int)(value);\n  return value.equals(0) ? '' : '.' + formatNumber(value, 9);\n}\n/**\n *\n * @param {Integer|number|string} year The year to be formatted\n * @return {string} formatted year\n */\n\n\nfunction formatYear(year) {\n  var yearInteger = (0, integer_1.int)(year);\n\n  if (yearInteger.isNegative() || yearInteger.greaterThan(9999)) {\n    return formatNumber(yearInteger, 6, {\n      usePositiveSign: true\n    });\n  }\n\n  return formatNumber(yearInteger, 4);\n}\n/**\n * @param {Integer|number|string} num the number to format.\n * @param {number} [stringLength=undefined] the string length to left-pad to.\n * @return {string} formatted and possibly left-padded number as string.\n */\n\n\nfunction formatNumber(num, stringLength, params) {\n  num = (0, integer_1.int)(num);\n  var isNegative = num.isNegative();\n\n  if (isNegative) {\n    num = num.negate();\n  }\n\n  var numString = num.toString();\n\n  if (stringLength != null) {\n    // left pad the string with zeroes\n    while (numString.length < stringLength) {\n      numString = '0' + numString;\n    }\n  }\n\n  if (isNegative) {\n    return '-' + numString;\n  } else if ((params === null || params === void 0 ? void 0 : params.usePositiveSign) === true) {\n    return '+' + numString;\n  }\n\n  return numString;\n}\n\nfunction add(x, y) {\n  if (x instanceof integer_1.default) {\n    return x.add(y);\n  } else if (typeof x === 'bigint') {\n    return x + BigInt(y);\n  }\n\n  return x + y;\n}","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","floorMod","floorDiv","assertValidZoneId","assertValidNanosecond","assertValidSecond","assertValidMinute","assertValidHour","assertValidDay","assertValidMonth","assertValidYear","timeZoneOffsetInSeconds","totalNanoseconds","newDate","toStandardDate","isoStringToStandardDate","dateToIsoString","timeZoneOffsetToIsoString","timeToIsoString","durationToIsoString","dateToEpochDay","localDateTimeToEpochSecond","localTimeToNanoOfDay","normalizeNanosecondsForDuration","normalizeSecondsForDuration","SECONDS_PER_DAY","DAYS_PER_400_YEAR_CYCLE","DAYS_0000_TO_1970","NANOS_PER_HOUR","NANOS_PER_MINUTE","NANOS_PER_MILLISECOND","NANOS_PER_SECOND","SECONDS_PER_HOUR","SECONDS_PER_MINUTE","MINUTES_PER_HOUR","NANOSECOND_OF_SECOND_RANGE","SECOND_OF_MINUTE_RANGE","MINUTE_OF_HOUR_RANGE","HOUR_OF_DAY_RANGE","DAY_OF_MONTH_RANGE","MONTH_OF_YEAR_RANGE","YEAR_RANGE","integer_1","require","error_1","util_1","ValueRange","min","max","_minNumber","_maxNumber","_minInteger","int","_maxInteger","contains","isInt","default","greaterThanOrEqual","lessThanOrEqual","intValue","toString","concat","seconds","nanoseconds","add","hour","minute","second","nanosecond","totalNanos","multiply","year","month","day","epochDay","localTimeSeconds","localTimeToSecondOfDay","div","subtract","greaterThan","isLeapYear","months","days","monthsString","formatNumber","daysString","secondsAndNanosecondsString","formatSecondsAndNanosecondsForDuration","hourString","minuteString","secondString","nanosecondString","formatNanosecond","offsetSeconds","equals","isNegative","signPrefix","hours","minutes","modulo","secondsValue","yearString","formatYear","monthString","dayString","isoString","Date","utc","date","standardDate","nanosFromMillis","getMilliseconds","secondsPortion","getSeconds","getUTCSeconds","offsetInMinutes","getTimezoneOffset","assertValidTemporalValue","fieldName","zoneId","Intl","DateTimeFormat","timeZone","e","newError","range","name","assertNumberOrInteger","totalSeconds","x","y","isPositive","notEquals","secondsString","nanosecondsString","secondsNegative","nanosecondsGreaterThanZero","negate","yearInteger","usePositiveSign","num","stringLength","params","numString","length","BigInt"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver-core/lib/internal/temporal-util.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.floorMod = exports.floorDiv = exports.assertValidZoneId = exports.assertValidNanosecond = exports.assertValidSecond = exports.assertValidMinute = exports.assertValidHour = exports.assertValidDay = exports.assertValidMonth = exports.assertValidYear = exports.timeZoneOffsetInSeconds = exports.totalNanoseconds = exports.newDate = exports.toStandardDate = exports.isoStringToStandardDate = exports.dateToIsoString = exports.timeZoneOffsetToIsoString = exports.timeToIsoString = exports.durationToIsoString = exports.dateToEpochDay = exports.localDateTimeToEpochSecond = exports.localTimeToNanoOfDay = exports.normalizeNanosecondsForDuration = exports.normalizeSecondsForDuration = exports.SECONDS_PER_DAY = exports.DAYS_PER_400_YEAR_CYCLE = exports.DAYS_0000_TO_1970 = exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE = exports.NANOS_PER_MILLISECOND = exports.NANOS_PER_SECOND = exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE = exports.MINUTES_PER_HOUR = exports.NANOSECOND_OF_SECOND_RANGE = exports.SECOND_OF_MINUTE_RANGE = exports.MINUTE_OF_HOUR_RANGE = exports.HOUR_OF_DAY_RANGE = exports.DAY_OF_MONTH_RANGE = exports.MONTH_OF_YEAR_RANGE = exports.YEAR_RANGE = void 0;\nvar integer_1 = __importStar(require(\"../integer\"));\nvar error_1 = require(\"../error\");\nvar util_1 = require(\"./util\");\n/*\n  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.\n\n  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived\n  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere\n  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.\n\n  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the\n  conversion functions.\n */\nvar ValueRange = /** @class */ (function () {\n    function ValueRange(min, max) {\n        this._minNumber = min;\n        this._maxNumber = max;\n        this._minInteger = (0, integer_1.int)(min);\n        this._maxInteger = (0, integer_1.int)(max);\n    }\n    ValueRange.prototype.contains = function (value) {\n        if ((0, integer_1.isInt)(value) && value instanceof integer_1.default) {\n            return (value.greaterThanOrEqual(this._minInteger) &&\n                value.lessThanOrEqual(this._maxInteger));\n        }\n        else if (typeof value === 'bigint') {\n            var intValue = (0, integer_1.int)(value);\n            return (intValue.greaterThanOrEqual(this._minInteger) &&\n                intValue.lessThanOrEqual(this._maxInteger));\n        }\n        else {\n            return value >= this._minNumber && value <= this._maxNumber;\n        }\n    };\n    ValueRange.prototype.toString = function () {\n        return \"[\".concat(this._minNumber, \", \").concat(this._maxNumber, \"]\");\n    };\n    return ValueRange;\n}());\nexports.YEAR_RANGE = new ValueRange(-999999999, 999999999);\nexports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);\nexports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);\nexports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);\nexports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);\nexports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);\nexports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);\nexports.MINUTES_PER_HOUR = 60;\nexports.SECONDS_PER_MINUTE = 60;\nexports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.NANOS_PER_SECOND = 1000000000;\nexports.NANOS_PER_MILLISECOND = 1000000;\nexports.NANOS_PER_MINUTE = exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;\nexports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.DAYS_0000_TO_1970 = 719528;\nexports.DAYS_PER_400_YEAR_CYCLE = 146097;\nexports.SECONDS_PER_DAY = 86400;\nfunction normalizeSecondsForDuration(seconds, nanoseconds) {\n    return (0, integer_1.int)(seconds).add(floorDiv(nanoseconds, exports.NANOS_PER_SECOND));\n}\nexports.normalizeSecondsForDuration = normalizeSecondsForDuration;\nfunction normalizeNanosecondsForDuration(nanoseconds) {\n    return floorMod(nanoseconds, exports.NANOS_PER_SECOND);\n}\nexports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;\n/**\n * Converts given local time into a single integer representing this same time in nanoseconds of the day.\n * @param {Integer|number|string} hour the hour of the local time to convert.\n * @param {Integer|number|string} minute the minute of the local time to convert.\n * @param {Integer|number|string} second the second of the local time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.\n * @return {Integer} nanoseconds representing the given local time.\n */\nfunction localTimeToNanoOfDay(hour, minute, second, nanosecond) {\n    hour = (0, integer_1.int)(hour);\n    minute = (0, integer_1.int)(minute);\n    second = (0, integer_1.int)(second);\n    nanosecond = (0, integer_1.int)(nanosecond);\n    var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);\n    totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));\n    totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));\n    return totalNanos.add(nanosecond);\n}\nexports.localTimeToNanoOfDay = localTimeToNanoOfDay;\n/**\n * Converts given local date time into a single integer representing this same time in epoch seconds UTC.\n * @param {Integer|number|string} year the year of the local date-time to convert.\n * @param {Integer|number|string} month the month of the local date-time to convert.\n * @param {Integer|number|string} day the day of the local date-time to convert.\n * @param {Integer|number|string} hour the hour of the local date-time to convert.\n * @param {Integer|number|string} minute the minute of the local date-time to convert.\n * @param {Integer|number|string} second the second of the local date-time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.\n * @return {Integer} epoch second in UTC representing the given local date time.\n */\nfunction localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {\n    var epochDay = dateToEpochDay(year, month, day);\n    var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);\n    return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);\n}\nexports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;\n/**\n * Converts given local date into a single integer representing it's epoch day.\n * @param {Integer|number|string} year the year of the local date to convert.\n * @param {Integer|number|string} month the month of the local date to convert.\n * @param {Integer|number|string} day the day of the local date to convert.\n * @return {Integer} epoch day representing the given date.\n */\nfunction dateToEpochDay(year, month, day) {\n    year = (0, integer_1.int)(year);\n    month = (0, integer_1.int)(month);\n    day = (0, integer_1.int)(day);\n    var epochDay = year.multiply(365);\n    if (year.greaterThanOrEqual(0)) {\n        epochDay = epochDay.add(year\n            .add(3)\n            .div(4)\n            .subtract(year.add(99).div(100))\n            .add(year.add(399).div(400)));\n    }\n    else {\n        epochDay = epochDay.subtract(year\n            .div(-4)\n            .subtract(year.div(-100))\n            .add(year.div(-400)));\n    }\n    epochDay = epochDay.add(month\n        .multiply(367)\n        .subtract(362)\n        .div(12));\n    epochDay = epochDay.add(day.subtract(1));\n    if (month.greaterThan(2)) {\n        epochDay = epochDay.subtract(1);\n        if (!isLeapYear(year)) {\n            epochDay = epochDay.subtract(1);\n        }\n    }\n    return epochDay.subtract(exports.DAYS_0000_TO_1970);\n}\nexports.dateToEpochDay = dateToEpochDay;\n/**\n * Format given duration to an ISO 8601 string.\n * @param {Integer|number|string} months the number of months.\n * @param {Integer|number|string} days the number of days.\n * @param {Integer|number|string} seconds the number of seconds.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds.\n * @return {string} ISO string that represents given duration.\n */\nfunction durationToIsoString(months, days, seconds, nanoseconds) {\n    var monthsString = formatNumber(months);\n    var daysString = formatNumber(days);\n    var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);\n    return \"P\".concat(monthsString, \"M\").concat(daysString, \"DT\").concat(secondsAndNanosecondsString, \"S\");\n}\nexports.durationToIsoString = durationToIsoString;\n/**\n * Formats given time to an ISO 8601 string.\n * @param {Integer|number|string} hour the hour value.\n * @param {Integer|number|string} minute the minute value.\n * @param {Integer|number|string} second the second value.\n * @param {Integer|number|string} nanosecond the nanosecond value.\n * @return {string} ISO string that represents given time.\n */\nfunction timeToIsoString(hour, minute, second, nanosecond) {\n    var hourString = formatNumber(hour, 2);\n    var minuteString = formatNumber(minute, 2);\n    var secondString = formatNumber(second, 2);\n    var nanosecondString = formatNanosecond(nanosecond);\n    return \"\".concat(hourString, \":\").concat(minuteString, \":\").concat(secondString).concat(nanosecondString);\n}\nexports.timeToIsoString = timeToIsoString;\n/**\n * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.\n * @param {Integer|number|string} offsetSeconds the offset in seconds.\n * @return {string} ISO string that represents given offset.\n */\nfunction timeZoneOffsetToIsoString(offsetSeconds) {\n    offsetSeconds = (0, integer_1.int)(offsetSeconds);\n    if (offsetSeconds.equals(0)) {\n        return 'Z';\n    }\n    var isNegative = offsetSeconds.isNegative();\n    if (isNegative) {\n        offsetSeconds = offsetSeconds.multiply(-1);\n    }\n    var signPrefix = isNegative ? '-' : '+';\n    var hours = formatNumber(offsetSeconds.div(exports.SECONDS_PER_HOUR), 2);\n    var minutes = formatNumber(offsetSeconds.div(exports.SECONDS_PER_MINUTE).modulo(exports.MINUTES_PER_HOUR), 2);\n    var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);\n    var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);\n    return seconds != null\n        ? \"\".concat(signPrefix).concat(hours, \":\").concat(minutes, \":\").concat(seconds)\n        : \"\".concat(signPrefix).concat(hours, \":\").concat(minutes);\n}\nexports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;\n/**\n * Formats given date to an ISO 8601 string.\n * @param {Integer|number|string} year the date year.\n * @param {Integer|number|string} month the date month.\n * @param {Integer|number|string} day the date day.\n * @return {string} ISO string that represents given date.\n */\nfunction dateToIsoString(year, month, day) {\n    var yearString = formatYear(year);\n    var monthString = formatNumber(month, 2);\n    var dayString = formatNumber(day, 2);\n    return \"\".concat(yearString, \"-\").concat(monthString, \"-\").concat(dayString);\n}\nexports.dateToIsoString = dateToIsoString;\n/**\n * Convert the given iso date string to a JavaScript Date object\n *\n * @param {string} isoString The iso date string\n * @returns {Date} the date\n */\nfunction isoStringToStandardDate(isoString) {\n    return new Date(isoString);\n}\nexports.isoStringToStandardDate = isoStringToStandardDate;\n/**\n * Convert the given utc timestamp to a JavaScript Date object\n *\n * @param {number} utc Timestamp in UTC\n * @returns {Date} the date\n */\nfunction toStandardDate(utc) {\n    return new Date(utc);\n}\nexports.toStandardDate = toStandardDate;\n/**\n * Shortcut for creating a new StandardDate\n * @param date\n * @returns {Date} the standard date\n */\nfunction newDate(date) {\n    return new Date(date);\n}\nexports.newDate = newDate;\n/**\n * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.\n * @param {global.Date} standardDate the standard JavaScript date.\n * @param {Integer|number|bigint|undefined} nanoseconds the optional number of nanoseconds.\n * @return {Integer|number|bigint} the total amount of nanoseconds.\n */\nfunction totalNanoseconds(standardDate, nanoseconds) {\n    nanoseconds = nanoseconds !== null && nanoseconds !== void 0 ? nanoseconds : 0;\n    var nanosFromMillis = standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;\n    return add(nanoseconds, nanosFromMillis);\n}\nexports.totalNanoseconds = totalNanoseconds;\n/**\n * Get the time zone offset in seconds from the given standard JavaScript date.\n *\n * <b>Implementation note:</b>\n * Time zone offset returned by the standard JavaScript date is the difference, in minutes, from local time to UTC.\n * So positive value means offset is behind UTC and negative value means it is ahead.\n * For Neo4j temporal types, like `Time` or `DateTime` offset is in seconds and represents difference from UTC to local time.\n * This is different from standard JavaScript dates and that's why implementation negates the returned value.\n *\n * @param {global.Date} standardDate the standard JavaScript date.\n * @return {number} the time zone offset in seconds.\n */\nfunction timeZoneOffsetInSeconds(standardDate) {\n    var secondsPortion = standardDate.getSeconds() >= standardDate.getUTCSeconds()\n        ? standardDate.getSeconds() - standardDate.getUTCSeconds()\n        : standardDate.getSeconds() - standardDate.getUTCSeconds() + 60;\n    var offsetInMinutes = standardDate.getTimezoneOffset();\n    if (offsetInMinutes === 0) {\n        return 0 + secondsPortion;\n    }\n    return -1 * offsetInMinutes * exports.SECONDS_PER_MINUTE + secondsPortion;\n}\nexports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;\n/**\n * Assert that the year value is valid.\n * @param {Integer|number} year the value to check.\n * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidYear(year) {\n    return assertValidTemporalValue(year, exports.YEAR_RANGE, 'Year');\n}\nexports.assertValidYear = assertValidYear;\n/**\n * Assert that the month value is valid.\n * @param {Integer|number} month the value to check.\n * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMonth(month) {\n    return assertValidTemporalValue(month, exports.MONTH_OF_YEAR_RANGE, 'Month');\n}\nexports.assertValidMonth = assertValidMonth;\n/**\n * Assert that the day value is valid.\n * @param {Integer|number} day the value to check.\n * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidDay(day) {\n    return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, 'Day');\n}\nexports.assertValidDay = assertValidDay;\n/**\n * Assert that the hour value is valid.\n * @param {Integer|number} hour the value to check.\n * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidHour(hour) {\n    return assertValidTemporalValue(hour, exports.HOUR_OF_DAY_RANGE, 'Hour');\n}\nexports.assertValidHour = assertValidHour;\n/**\n * Assert that the minute value is valid.\n * @param {Integer|number} minute the value to check.\n * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMinute(minute) {\n    return assertValidTemporalValue(minute, exports.MINUTE_OF_HOUR_RANGE, 'Minute');\n}\nexports.assertValidMinute = assertValidMinute;\n/**\n * Assert that the second value is valid.\n * @param {Integer|number} second the value to check.\n * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidSecond(second) {\n    return assertValidTemporalValue(second, exports.SECOND_OF_MINUTE_RANGE, 'Second');\n}\nexports.assertValidSecond = assertValidSecond;\n/**\n * Assert that the nanosecond value is valid.\n * @param {Integer|number} nanosecond the value to check.\n * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidNanosecond(nanosecond) {\n    return assertValidTemporalValue(nanosecond, exports.NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');\n}\nexports.assertValidNanosecond = assertValidNanosecond;\nfunction assertValidZoneId(fieldName, zoneId) {\n    try {\n        Intl.DateTimeFormat(undefined, { timeZone: zoneId });\n    }\n    catch (e) {\n        throw (0, error_1.newError)(\"\".concat(fieldName, \" is expected to be a valid ZoneId but was: \\\"\").concat(zoneId, \"\\\"\"));\n    }\n}\nexports.assertValidZoneId = assertValidZoneId;\n/**\n * Check if the given value is of expected type and is in the expected range.\n * @param {Integer|number} value the value to check.\n * @param {ValueRange} range the range.\n * @param {string} name the name of the value.\n * @return {Integer|number} the value if valid. Exception is thrown otherwise.\n */\nfunction assertValidTemporalValue(value, range, name) {\n    (0, util_1.assertNumberOrInteger)(value, name);\n    if (!range.contains(value)) {\n        throw (0, error_1.newError)(\"\".concat(name, \" is expected to be in range \").concat(range.toString(), \" but was: \").concat(value.toString()));\n    }\n    return value;\n}\n/**\n * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.\n * @param {Integer|number|string} hour the hour of the local time.\n * @param {Integer|number|string} minute the minute of the local time.\n * @param {Integer|number|string} second the second of the local time.\n * @return {Integer} seconds representing the given local time.\n */\nfunction localTimeToSecondOfDay(hour, minute, second) {\n    hour = (0, integer_1.int)(hour);\n    minute = (0, integer_1.int)(minute);\n    second = (0, integer_1.int)(second);\n    var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);\n    totalSeconds = totalSeconds.add(minute.multiply(exports.SECONDS_PER_MINUTE));\n    return totalSeconds.add(second);\n}\n/**\n * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.\n * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.\n * @return {boolean} `true` if given year is a leap year, `false` otherwise.\n */\nfunction isLeapYear(year) {\n    year = (0, integer_1.int)(year);\n    if (!year.modulo(4).equals(0)) {\n        return false;\n    }\n    else if (!year.modulo(100).equals(0)) {\n        return true;\n    }\n    else if (!year.modulo(400).equals(0)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorDiv(x, y) {\n    x = (0, integer_1.int)(x);\n    y = (0, integer_1.int)(y);\n    var result = x.div(y);\n    if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {\n        result = result.subtract(1);\n    }\n    return result;\n}\nexports.floorDiv = floorDiv;\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorMod(x, y) {\n    x = (0, integer_1.int)(x);\n    y = (0, integer_1.int)(y);\n    return x.subtract(floorDiv(x, y).multiply(y));\n}\nexports.floorMod = floorMod;\n/**\n * @param {Integer|number|string} seconds the number of seconds to format.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.\n * @return {string} formatted value.\n */\nfunction formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {\n    seconds = (0, integer_1.int)(seconds);\n    nanoseconds = (0, integer_1.int)(nanoseconds);\n    var secondsString;\n    var nanosecondsString;\n    var secondsNegative = seconds.isNegative();\n    var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);\n    if (secondsNegative && nanosecondsGreaterThanZero) {\n        if (seconds.equals(-1)) {\n            secondsString = '-0';\n        }\n        else {\n            secondsString = seconds.add(1).toString();\n        }\n    }\n    else {\n        secondsString = seconds.toString();\n    }\n    if (nanosecondsGreaterThanZero) {\n        if (secondsNegative) {\n            nanosecondsString = formatNanosecond(nanoseconds\n                .negate()\n                .add(2 * exports.NANOS_PER_SECOND)\n                .modulo(exports.NANOS_PER_SECOND));\n        }\n        else {\n            nanosecondsString = formatNanosecond(nanoseconds.add(exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));\n        }\n    }\n    return nanosecondsString != null ? secondsString + nanosecondsString : secondsString;\n}\n/**\n * @param {Integer|number|string} value the number of nanoseconds to format.\n * @return {string} formatted and possibly left-padded nanoseconds part as string.\n */\nfunction formatNanosecond(value) {\n    value = (0, integer_1.int)(value);\n    return value.equals(0) ? '' : '.' + formatNumber(value, 9);\n}\n/**\n *\n * @param {Integer|number|string} year The year to be formatted\n * @return {string} formatted year\n */\nfunction formatYear(year) {\n    var yearInteger = (0, integer_1.int)(year);\n    if (yearInteger.isNegative() || yearInteger.greaterThan(9999)) {\n        return formatNumber(yearInteger, 6, { usePositiveSign: true });\n    }\n    return formatNumber(yearInteger, 4);\n}\n/**\n * @param {Integer|number|string} num the number to format.\n * @param {number} [stringLength=undefined] the string length to left-pad to.\n * @return {string} formatted and possibly left-padded number as string.\n */\nfunction formatNumber(num, stringLength, params) {\n    num = (0, integer_1.int)(num);\n    var isNegative = num.isNegative();\n    if (isNegative) {\n        num = num.negate();\n    }\n    var numString = num.toString();\n    if (stringLength != null) {\n        // left pad the string with zeroes\n        while (numString.length < stringLength) {\n            numString = '0' + numString;\n        }\n    }\n    if (isNegative) {\n        return '-' + numString;\n    }\n    else if ((params === null || params === void 0 ? void 0 : params.usePositiveSign) === true) {\n        return '+' + numString;\n    }\n    return numString;\n}\nfunction add(x, y) {\n    if (x instanceof integer_1.default) {\n        return x.add(y);\n    }\n    else if (typeof x === 'bigint') {\n        return x + BigInt(y);\n    }\n    return x + y;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}