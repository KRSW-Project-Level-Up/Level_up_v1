{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line no-unused-vars\n\nvar result_rx_1 = __importDefault(require(\"./result-rx\")); // eslint-disable-next-line no-unused-vars\n\n\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\n/**\n * Represents a rx transaction that is managed by the transaction executor.\n *\n * @public\n */\n\n\nvar RxManagedTransaction =\n/** @class */\nfunction () {\n  /**\n   * @private\n   */\n  function RxManagedTransaction(_a) {\n    var run = _a.run;\n    this._run = run;\n  }\n  /**\n   * @private\n   * @param {RxTransaction} txc - The transaction to be wrapped\n   * @returns {RxManagedTransaction} The managed transaction\n   */\n\n\n  RxManagedTransaction.fromTransaction = function (txc) {\n    return new RxManagedTransaction({\n      run: txc.run.bind(txc)\n    });\n  };\n  /**\n   * Creates a reactive result that will execute the query in this transaction, with the provided parameters.\n   *\n   * @public\n   * @param {string} query - Query to be executed.\n   * @param {Object} parameters - Parameter values to use in query execution.\n   * @returns {RxResult} - A reactive result\n   */\n\n\n  RxManagedTransaction.prototype.run = function (query, parameters) {\n    return this._run(query, parameters);\n  };\n\n  return RxManagedTransaction;\n}();\n\nexports.default = RxManagedTransaction;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","result_rx_1","require","transaction_rx_1","RxManagedTransaction","_a","run","_run","fromTransaction","txc","bind","prototype","query","parameters","default"],"sources":["C:/projects/levelUp_v1/Level-Up-FN/Level-Up-Fronten-master/node_modules/neo4j-driver/lib/transaction-managed-rx.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line no-unused-vars\nvar result_rx_1 = __importDefault(require(\"./result-rx\"));\n// eslint-disable-next-line no-unused-vars\nvar transaction_rx_1 = __importDefault(require(\"./transaction-rx\"));\n/**\n * Represents a rx transaction that is managed by the transaction executor.\n *\n * @public\n */\nvar RxManagedTransaction = /** @class */ (function () {\n    /**\n     * @private\n     */\n    function RxManagedTransaction(_a) {\n        var run = _a.run;\n        this._run = run;\n    }\n    /**\n     * @private\n     * @param {RxTransaction} txc - The transaction to be wrapped\n     * @returns {RxManagedTransaction} The managed transaction\n     */\n    RxManagedTransaction.fromTransaction = function (txc) {\n        return new RxManagedTransaction({\n            run: txc.run.bind(txc)\n        });\n    };\n    /**\n     * Creates a reactive result that will execute the query in this transaction, with the provided parameters.\n     *\n     * @public\n     * @param {string} query - Query to be executed.\n     * @param {Object} parameters - Parameter values to use in query execution.\n     * @returns {RxResult} - A reactive result\n     */\n    RxManagedTransaction.prototype.run = function (query, parameters) {\n        return this._run(query, parameters);\n    };\n    return RxManagedTransaction;\n}());\nexports.default = RxManagedTransaction;"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAGP,eAAe,CAACQ,OAAO,CAAC,aAAD,CAAR,CAAjC,C,CACA;;;AACA,IAAIC,gBAAgB,GAAGT,eAAe,CAACQ,OAAO,CAAC,kBAAD,CAAR,CAAtC;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,oBAAoB;AAAG;AAAe,YAAY;EAClD;AACJ;AACA;EACI,SAASA,oBAAT,CAA8BC,EAA9B,EAAkC;IAC9B,IAAIC,GAAG,GAAGD,EAAE,CAACC,GAAb;IACA,KAAKC,IAAL,GAAYD,GAAZ;EACH;EACD;AACJ;AACA;AACA;AACA;;;EACIF,oBAAoB,CAACI,eAArB,GAAuC,UAAUC,GAAV,EAAe;IAClD,OAAO,IAAIL,oBAAJ,CAAyB;MAC5BE,GAAG,EAAEG,GAAG,CAACH,GAAJ,CAAQI,IAAR,CAAaD,GAAb;IADuB,CAAzB,CAAP;EAGH,CAJD;EAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIL,oBAAoB,CAACO,SAArB,CAA+BL,GAA/B,GAAqC,UAAUM,KAAV,EAAiBC,UAAjB,EAA6B;IAC9D,OAAO,KAAKN,IAAL,CAAUK,KAAV,EAAiBC,UAAjB,CAAP;EACH,CAFD;;EAGA,OAAOT,oBAAP;AACH,CA9ByC,EAA1C;;AA+BAL,OAAO,CAACe,OAAR,GAAkBV,oBAAlB"},"metadata":{},"sourceType":"script"}